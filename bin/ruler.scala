#!/bin/sh
exec bin/scala -classpath bin -deprecation -nocompdaemon "$0" "$@"
!# 
// Local Variables:
// mode: scala
// End:

/// count lines of code in NetLogo source tree

import Scripting.shell

val ignore = Set("extensions/url/myjavatools/src/com/myjavatools/web")
val autogenerated = Set("src/main/org/nlogo/lex/TokenLexer.java",
                        "src/main/org/nlogo/agent/ImportLexer.java",
                        "src/main/org/nlogo/window/Events.java",
                        "src/main/org/nlogo/app/Events.java")
val format = "%25s: %6d unique, %6d total  (%3d%% Scala)\n"
var tj, tuj, ts, tus = 0 // totals. u = unique, j = Java, s = Scala

def percent(n: Int, d: Int) = math.ceil(100 * n / d).toInt
def names(dir: String, extension: String) =
  shell("find '" + dir + "' -name *." + extension + " -depth 1")
    .filterNot(autogenerated)
def lines(dir: String, extension: String) =
  shell("cat /dev/null " + names(dir, extension).mkString(" ") + " || cat /dev/null")
    .map(_.trim)
    .toList
def dirs(root: String) =
  shell("find " + root + """ -type d | grep -v \\.svn || grep -v \\.git""")
    .filterNot(ignore)
    .filterNot(_.containsSlice("/build/"))

def outputLines(root: String) =
  for{dir <- dirs(root)
      j = lines(dir, "java")
      uj = j.distinct
      s = lines(dir, "scala")
      us = s.distinct
      if j.nonEmpty || s.nonEmpty}
  yield {
    tj += j.size; tuj += uj.size; ts += s.size; tus += us.size
    format.format(dir.replaceAll(root + "/org/nlogo/", "")
                     .replaceAll(root + "/", "")
                     .replaceFirst(".src$", "")
                     .replaceAll("/", "."),
                  uj.size + us.size, j.size + s.size,
                  percent(us.size, uj.size + us.size))
  }
def firstNumber(s: String) = s.dropWhile(!_.isDigit).takeWhile(_.isDigit).mkString.toInt
def sortAndPrint(root: String) = {
  println(root + ":")
  outputLines(root).toList.sortBy(firstNumber).reverse.foreach(print)
  println()
}
sortAndPrint("src/main")
sortAndPrint("src/test")
sortAndPrint("src/tools")
sortAndPrint("extensions")
sortAndPrint("project/build")
sortAndPrint("bin")
println(format.format("TOTAL",
                      tuj + tus, tj + ts,
                      percent(tus, tuj + tus)))
