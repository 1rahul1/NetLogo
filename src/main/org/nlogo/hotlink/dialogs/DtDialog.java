package org.nlogo.hotlink.dialogs;

import org.nlogo.hotlink.graph.PlotPanel;
import java.awt.Dimension;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;

public class DtDialog extends javax.swing.JDialog {

    private javax.swing.JCheckBox displayApproximator;
    private javax.swing.JLabel chooseValueLabel;
    private javax.swing.JSpinner chooseValue;
    private javax.swing.JTextPane calcText;
    private javax.swing.JTextPane calcNote;
    private javax.swing.JButton okButton;
    private javax.swing.JButton cancelButton;
    private JPanel gdtbPanel; // get down to business panel

    public int interval = 10;

    PlotPanel plotPanel;

    public DtDialog(PlotPanel plotPanel) {
        setModal(true);
        this.plotPanel = plotPanel;
        setPreferredSize( new Dimension( 415 , 325 ));
        initComponents();
    }

    public void calibrateSpinner() {
        int defaultSpinnerValue =
                (int) Math.ceil( plotPanel.getViewPanel().getImageCount() / 10 );

        int maxSpinnerValue =
                (int) Math.ceil( plotPanel.getViewPanel().getImageCount() / 5 );

        chooseValue.setModel(new javax.swing.SpinnerNumberModel(defaultSpinnerValue, 0, maxSpinnerValue, 1));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        calcText = new javax.swing.JTextPane();
        calcNote = new javax.swing.JTextPane();
        chooseValueLabel = new JLabel();
        chooseValue = new javax.swing.JSpinner();
        displayApproximator = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        gdtbPanel = new JPanel();

        gdtbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Interval"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        chooseValueLabel.setText("Choose a value for interval:");

        calcText.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        calcText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        calcText.setEditable(false);
        calcText.setText("Change over an interval is calculated by looking at the change " +
                         "in x over a certain number of ticks during a given " +
                         "time that you hover over with your mouse. Now, ticks are set to 10" +
                         ", so I will show you how much values change from time t - 5" +
                         " to time t + 5.");

        calcNote.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        calcNote.setBorder(null);
        calcNote.setEditable(false);
        calcNote.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        calcNote.setText("* If interval is odd, then change will be calculated for " +
                         "an interval that begins one additional unit before " +
                         "a given time t.");
        calcNote.setRequestFocusEnabled(false);

        chooseValue.setModel(new javax.swing.SpinnerNumberModel(10, 0, 20, 1));
        chooseValue.setName("Interval"); // NOI18N

        displayApproximator.setSelected(true);
        displayApproximator.setText("Turn Interval On");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interval = ((SpinnerNumberModel) chooseValue.getModel()).getNumber().intValue();
                plotPanel.setShowPiecewiseApproximator( displayApproximator.isSelected() );
                //System.out.println("ok here");
                setVisible(false);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setVisible(false);
            }
        });

        chooseValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                JSpinner mySpinner = (JSpinner) e.getSource();
                double myValue = ((SpinnerNumberModel) mySpinner.getModel()).getNumber().doubleValue();

                calcText.setText("Change over an interval is calculated by looking at the change " +
                         "in x over a certain number of ticks during a given " +
                         "time that you hover over with your mouse. Now, ticks are set to "
                         + myValue +
                         ", " +
                         "so I will show you how much values change from time t - "
                         + (int) Math.ceil(myValue / 2) +
                         " to time t + "
                         + (int) Math.floor(myValue / 2) +
                         " .");
            }
        });

        org.jdesktop.layout.GroupLayout gdtbPanelLayout = new org.jdesktop.layout.GroupLayout(gdtbPanel);
        gdtbPanel.setLayout(gdtbPanelLayout);
        gdtbPanelLayout.setHorizontalGroup(
            gdtbPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, gdtbPanelLayout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .add(gdtbPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, gdtbPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(gdtbPanelLayout.createSequentialGroup()
                            .add(32, 32, 32)
                            .add(displayApproximator)
                            .add(128, 128, 128))
                        .add(gdtbPanelLayout.createSequentialGroup()
                            .add(chooseValueLabel)
                            .add(18, 18, 18)
                            .add(chooseValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, gdtbPanelLayout.createSequentialGroup()
                        .add(cancelButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(okButton))))
        );
        gdtbPanelLayout.setVerticalGroup(
            gdtbPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(gdtbPanelLayout.createSequentialGroup()
                .add(displayApproximator)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(gdtbPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chooseValueLabel)
                    .add(chooseValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(gdtbPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okButton)
                    .add(cancelButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(calcText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 375, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                //.add(1009, 1009, 1009)
                                //.add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                //.add(697, 697, 697)
                            )))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, gdtbPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(calcNote, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(116, 116, 116)
                        //.add(jLabel5)
                        )
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(calcText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                //.add(105, 105, 105)
                .add(gdtbPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(calcNote, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    public void setVisible( boolean visible ) {
        calibrateSpinner();
        super.setVisible( visible );
    }
}