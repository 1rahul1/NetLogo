##############################################################################################
# This file contains all (hopefully all anyway) of the strings in the code.
# it was created with this command (issued from src/main):
# grep -C 2 -rn .*\".*[0-9a-zA-Z][0-9a-zA-Z].*\".* * | grep -v svn > ../../all-strings.txt
#
# I plan to go through this file painstakingly and globalize every string that needs it.
# I'll also remove strings that don't need globalization.
#
# I'm also going to keep a small notes section here. Maybe a little later I'll save it to the i18n ticket.
#   - I think, if I've decided not to globalize a string, I should move it to another file just in case.
#     Some strings can just be removed from here though, like strings in comments.
#     So, I'll just be moving over questionable Strings.
#   - we have to make sure to pick good key names, so that when we are reading the code
#     we can have a good idea of what the message is from the key.
#   - It seems like many if not all of IllegalStateExceptions can be ignored. Not sure yet.
#   - I'm going to make a distinction between devel error messages and user error messages.
#     User error messages need to be globalized, devel error messages should not be.
#   - I see this weird comment in the code:
#     public String classDisplayName() { return "Command Center" ; } // for Errors tab
#     there is no errors tab. does this mean we can get rid of classDisplayName from just about everywhere?
#   - looks like we might need to go back through and look for scala """ strings
#   - lots of strings around importing and exporting that probably dont have to get globalized
#     but we better double check
#############################################################################################

src/main/org/nlogo/agent/AbstractExporter.scala:12:    println(csv.header("export-" + tyype + " data (" + Version.version + ")"))
src/main/org/nlogo/agent/AbstractExporter.scala:18:    val dateFormatter = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss:SSS Z")
src/main/org/nlogo/agent/AbstractExporter.scala:32:    val file = new org.nlogo.api.LocalFile(filename, ".csv")
src/main/org/nlogo/agent/Agent.java:140:            ? "org.nlogo.agent.Agent.rgbListSizeError.3or4"
src/main/org/nlogo/agent/Agent.java:141:            : "org.nlogo.agent.Agent.rgbListSizeError.3";
src/main/org/nlogo/agent/AgentSet.java:68:      throw new IllegalStateException("unknown type: " + type);
src/main/org/nlogo/agent/ArrayAgentSet.java:144:        ("Cannot call remove() from an  ArrayAgentSet");
src/main/org/nlogo/agent/ArrayAgentSet.java:152:          ("Cannot call remove() on an AgentSet with removableAgents set to false");
src/main/org/nlogo/agent/ArrayAgentSet.java:273:    StringBuilder s = new StringBuilder("AgentSet");
src/main/org/nlogo/agent/ArrayAgentSet.java:274:    s = s.append("\n...... type: ");
src/main/org/nlogo/agent/ArrayAgentSet.java:275:    s = s.append(type == null ? "null" : type.toString());
src/main/org/nlogo/agent/ArrayAgentSet.java:276:    s = s.append("\n...... size: " + size);
src/main/org/nlogo/agent/ArrayAgentSet.java:277:    s = s.append("\n...... count(): " + count());
src/main/org/nlogo/agent/ArrayAgentSet.java:278:    s = s.append("\n...... capacity: " + capacity);
src/main/org/nlogo/agent/ArrayAgentSet.java:279:    s = s.append("\n...... agents: ");
src/main/org/nlogo/agent/ArrayAgentSet.java:301:          ("remove() not supported");
src/main/org/nlogo/agent/BreedShapes.java:45:                  ? "__default"
src/main/org/nlogo/agent/BreedShapes.java:51:                ? "default"
src/main/org/nlogo/agent/BreedShapes.java:63:            breedShapePair.setValue("__default");
src/main/org/nlogo/agent/BreedShapes.java:73:      if (result.equals("__default")) {
src/main/org/nlogo/agent/BreedShapes.java:83:      if (result.equals("__default")) {
src/main/org/nlogo/agent/Exporter.scala:28:    println(csv.encode("LINKS"))
src/main/org/nlogo/agent/Exporter.scala:54:      if(key != "LINKS") {
src/main/org/nlogo/agent/Exporter.scala:84:    println(csv.encode("RANDOM STATE"))
src/main/org/nlogo/agent/Exporter.scala:90:    println(csv.encode("GLOBALS"))
src/main/org/nlogo/agent/Exporter.scala:91:    print(csv.encode("min-pxcor") + ","
src/main/org/nlogo/agent/Exporter.scala:92:          + csv.encode("max-pxcor") + ","
src/main/org/nlogo/agent/Exporter.scala:93:          + csv.encode("min-pycor") + ","
src/main/org/nlogo/agent/Exporter.scala:94:          + csv.encode("max-pycor") + ","
src/main/org/nlogo/agent/Exporter.scala:95:          + csv.encode("perspective") + ","
src/main/org/nlogo/agent/Exporter.scala:96:          + csv.encode("subject") + "," 
src/main/org/nlogo/agent/Exporter.scala:97:          + csv.encode("nextIndex") + "," 
src/main/org/nlogo/agent/Exporter.scala:98:          + csv.encode("directed-links") + ","
src/main/org/nlogo/agent/Exporter.scala:99:          + csv.encode("ticks"))
src/main/org/nlogo/agent/Exporter.scala:121:          + csv.data(if (world.links.isDirected) "DIRECTED" else
src/main/org/nlogo/agent/Exporter.scala:122:                     if (world.links.isUndirected) "UNDIRECTED" else "NEITHER") + ","
src/main/org/nlogo/agent/Exporter.scala:134:    println(csv.encode("TURTLES"))
src/main/org/nlogo/agent/Exporter.scala:160:      if (key != "TURTLES") {
src/main/org/nlogo/agent/Exporter.scala:189:    println(csv.encode("PATCHES"))
src/main/org/nlogo/agent/Exporter3D.scala:27:    println(csv.encode("DRAWING"))
src/main/org/nlogo/agent/Exporter3D.scala:28:    println(csv.encode("x0")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:29:            + csv.encode("y0")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:30:            + csv.encode("z0")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:31:            + csv.encode("x1")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:32:            + csv.encode("y1")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:33:            + csv.encode("z1")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:34:            + csv.encode("width")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:35:            + csv.encode("color"))
src/main/org/nlogo/agent/Exporter3D.scala:48:    println(csv.encode("shape")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:49:            + csv.encode("xcor")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:50:            + csv.encode("ycor")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:51:            + csv.encode("zcor")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:52:            + csv.encode("size")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:53:            + csv.encode("heading")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:54:            + csv.encode("pitch")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:55:            + csv.encode("roll")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:56:            + csv.encode("color")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:57:            + csv.encode("lineThickness"))
src/main/org/nlogo/agent/Exporter3D.scala:72:    println(csv.encode("shape")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:73:            + csv.encode("x1")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:74:            + csv.encode("y1")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:75:            + csv.encode("z1")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:76:            + csv.encode("x2")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:77:            + csv.encode("y2")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:78:            + csv.encode("z2")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:79:            + csv.encode("color")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:80:            + csv.encode("lineThickness")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:81:            + csv.encode("directedLink")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:82:            + csv.encode("destSize") + ","
src/main/org/nlogo/agent/Exporter3D.scala:83:            + csv.encode("heading")  + ","
src/main/org/nlogo/agent/Exporter3D.scala:84:            + csv.encode("pitch"))
src/main/org/nlogo/agent/Exporter3D.scala:105:    println(csv.encode("GLOBALS"))
src/main/org/nlogo/agent/Exporter3D.scala:106:    print(csv.encode("min-pxcor") + ","
src/main/org/nlogo/agent/Exporter3D.scala:107:                  + csv.encode("max-pxcor") + ","
src/main/org/nlogo/agent/Exporter3D.scala:108:                  + csv.encode("min-pycor") + ","
src/main/org/nlogo/agent/Exporter3D.scala:109:                  + csv.encode("max-pycor") + ","
src/main/org/nlogo/agent/Exporter3D.scala:110:                  + csv.encode("min-pzcor") + ","
src/main/org/nlogo/agent/Exporter3D.scala:111:                  + csv.encode("max-pzcor") + ","
src/main/org/nlogo/agent/Exporter3D.scala:112:                  + csv.encode("perspective") + ","
src/main/org/nlogo/agent/Exporter3D.scala:113:                  + csv.encode("subject") + ","
src/main/org/nlogo/agent/Exporter3D.scala:114:                  + csv.encode("nextIndex") + "," 
src/main/org/nlogo/agent/Exporter3D.scala:115:                  + csv.encode("directed-links") + ","
src/main/org/nlogo/agent/Exporter3D.scala:116:                  + csv.encode("ticks"))
src/main/org/nlogo/agent/Exporter3D.scala:139:                  + csv.data(if(world.links().isDirected()) "DIRECTED" else
src/main/org/nlogo/agent/Exporter3D.scala:140:                                   if(world.links().isUndirected()) "UNDIRECTED" else "NEITHER") + ","
src/main/org/nlogo/agent/Exporter3D.scala:154:    println(csv.encode("TURTLES"))
src/main/org/nlogo/agent/Exporter3D.scala:177:      if (!key.equals("TURTLES")) {
src/main/org/nlogo/agent/Gamma.java:12:suitability of this software for any purpose.  It is provided "as is"
src/main/org/nlogo/agent/HorizCylinder.java:20:      throw new AgentException("Cannot move turtle beyond the world's edge.");
src/main/org/nlogo/agent/Importer.java:32:  static final String SCREEN_EDGE_X_HEADER = "SCREEN-EDGE-X";
src/main/org/nlogo/agent/Importer.java:33:  static final String SCREEN_EDGE_Y_HEADER = "SCREEN-EDGE-Y";
src/main/org/nlogo/agent/Importer.java:35:  static final String MIN_PXCOR_HEADER = "MIN-PXCOR";
src/main/org/nlogo/agent/Importer.java:36:  static final String MAX_PXCOR_HEADER = "MAX-PXCOR";
src/main/org/nlogo/agent/Importer.java:37:  static final String MIN_PYCOR_HEADER = "MIN-PYCOR";
src/main/org/nlogo/agent/Importer.java:38:  static final String MAX_PYCOR_HEADER = "MAX-PYCOR";
src/main/org/nlogo/agent/Importer.java:40:  static final String PERSPECTIVE_HEADER = "PERSPECTIVE";
src/main/org/nlogo/agent/Importer.java:41:  static final String SUBJECT_HEADER = "SUBJECT";
src/main/org/nlogo/agent/Importer.java:42:  static final String NEXT_INDEX_HEADER = "NEXTINDEX";
src/main/org/nlogo/agent/Importer.java:43:  static final String DIRECTED_LINKS_HEADER = "DIRECTED-LINKS";
src/main/org/nlogo/agent/Importer.java:44:  static final String TICKS_HEADER = "TICKS";
src/main/org/nlogo/agent/Importer.java:97:        versionNumber.startsWith("2.2pre1") ||
src/main/org/nlogo/agent/Importer.java:98:        versionNumber.startsWith("2.2pre2")) {
src/main/org/nlogo/agent/Importer.java:114:        versionNumber.startsWith("4.0pre") ||
src/main/org/nlogo/agent/Importer.java:115:        versionNumber.startsWith("4.0alpha") ||
src/main/org/nlogo/agent/Importer.java:116:        versionNumber.startsWith("4.0beta1")) {
src/main/org/nlogo/agent/Importer.java:128:        String versionHeader = "export-world data (NetLogo ";
src/main/org/nlogo/agent/Importer.java:134:        if (line[0].trim().equals("RANDOM STATE")) {
src/main/org/nlogo/agent/Importer.java:152:      if (nextLine != null && nextLine.indexOf("DRAWING") != -1) {
src/main/org/nlogo/agent/Importer.java:155:      if (nextLine != null && nextLine.indexOf("OUTPUT") != -1) {
src/main/org/nlogo/agent/Importer.java:169:      errorHandler.showError("Error Importing Drawing",
src/main/org/nlogo/agent/Importer.java:170:          "Invalid data length, the drawing will not be imported", false);
src/main/org/nlogo/agent/Importer.java:189:            errorHandler.showError("Error Importing Plots",
src/main/org/nlogo/agent/Importer.java:190:                "The plot \"" + plotName + "\" does not exist.",
src/main/org/nlogo/agent/Importer.java:248:            errorHandler.showError("Error Importing Plots",
src/main/org/nlogo/agent/Importer.java:249:                "The pen \"" + value + "\" does not exist.", false);
src/main/org/nlogo/agent/Importer.java:286:                  errorHandler.showError("Import Error",
src/main/org/nlogo/agent/Importer.java:287:                      "Error while importing " + plot.name() +
src/main/org/nlogo/agent/Importer.java:288:                          ", this point will be skipped.", false);
src/main/org/nlogo/agent/Importer.java:293:              errorHandler.showError("Error Importing Plots",
src/main/org/nlogo/agent/Importer.java:294:                  "The pen \"" + pens[i] + "\" does not exist.", false);
src/main/org/nlogo/agent/Importer.java:370:              ("The data was not the correct length for the size of the world");
src/main/org/nlogo/agent/Importer.java:376:            ("invalid drawing data: drawing will not be imported");
src/main/org/nlogo/agent/Importer.java:400:      errorHandler.showError("Error Importing Extension Data", e.getMessage(), false);
src/main/org/nlogo/agent/Importer.java:402:      errorHandler.showError("Error Importing Extension Data", e.getMessage(), false);
src/main/org/nlogo/agent/Importer.java:512:      if (!str.equals("NEITHER")) {
src/main/org/nlogo/agent/Importer.java:513:        world.links().setDirected(str.equals("DIRECTED"));
src/main/org/nlogo/agent/Importer.java:578:      String abortingError = "No " + printName(agentClass) + " headers have been imported. " +
src/main/org/nlogo/agent/Importer.java:579:          "Globals, Turtles, and Patches must be in the same import file.";
src/main/org/nlogo/agent/Importer.java:588:        if (convertPenDown && mixedCaseHeaders[i].equalsIgnoreCase("PEN-DOWN?")) {
src/main/org/nlogo/agent/Importer.java:589:          headers.add("PEN-MODE");
src/main/org/nlogo/agent/Importer.java:607:          {"PEN-SIZE", "PEN-COLOR"});
src/main/org/nlogo/agent/Importer.java:611:          {"SHAPE", "TIE-MODE"});
src/main/org/nlogo/agent/Importer.java:614:          {"TIE-MODE"});
src/main/org/nlogo/agent/Importer.java:635:              "Too Many Values For Agent",
src/main/org/nlogo/agent/Importer.java:636:              "There are a total of " + headersArr.length + " "
src/main/org/nlogo/agent/Importer.java:637:                  + printName(agentClass) + " variables declared in this "
src/main/org/nlogo/agent/Importer.java:638:                  + "model (including built-in " +
src/main/org/nlogo/agent/Importer.java:640:                      ? "and breed " : "")
src/main/org/nlogo/agent/Importer.java:641:                  + "variables).  The import-world file has at least one agent "
src/main/org/nlogo/agent/Importer.java:642:                  + "in the " + printSectionName()
src/main/org/nlogo/agent/Importer.java:643:                  + " section with more than this number of values.",
src/main/org/nlogo/agent/Importer.java:644:              "All the extra values will be ignored for this section."));
src/main/org/nlogo/agent/Importer.java:659:      if (convertPenDown && headersArr[i].equals("PEN-MODE")) {
src/main/org/nlogo/agent/Importer.java:660:        if (values[i].equalsIgnoreCase("FALSE")) {
src/main/org/nlogo/agent/Importer.java:661:          values[i] = "\"up\"";
src/main/org/nlogo/agent/Importer.java:662:        } else if (values[i].equals("TRUE")) {
src/main/org/nlogo/agent/Importer.java:663:          values[i] = "\"down\"";
src/main/org/nlogo/agent/Importer.java:675:            " with the essential variable " + headersArr[i] +
src/main/org/nlogo/agent/Importer.java:676:            " cannot be imported since the agent's value in the import" +
src/main/org/nlogo/agent/Importer.java:677:            " file for " + headersArr[i] + " could not be imported.";
src/main/org/nlogo/agent/Importer.java:688:        || breed.equalsIgnoreCase("TURTLES")
src/main/org/nlogo/agent/Importer.java:689:        || breed.equalsIgnoreCase("PATCHES")
src/main/org/nlogo/agent/Importer.java:690:        || breed.equalsIgnoreCase("LINKS");
src/main/org/nlogo/agent/Importer.java:711:                  "Illegal Breed",
src/main/org/nlogo/agent/Importer.java:713:                  "all turtles with this breed will be made as regular turtles"));
src/main/org/nlogo/agent/Importer.java:722:                      "Illegal Link Breed",
src/main/org/nlogo/agent/Importer.java:724:                      "all links with this breed will be made as regular links"));
src/main/org/nlogo/agent/Importer.java:731:                "Parsing Error",
src/main/org/nlogo/agent/Importer.java:732:                "error parsing the values:\n" + valueString,
src/main/org/nlogo/agent/Importer.java:733:                "the import will continue if it can, but values for this " +
src/main/org/nlogo/agent/Importer.java:734:                    "agent's variables will be set to an appropriate default",
src/main/org/nlogo/agent/Importer.java:782:              "Illegal " + agentType + " Variable",
src/main/org/nlogo/agent/Importer.java:783:              "the " + agentType + " variable " + header + " does not " +
src/main/org/nlogo/agent/Importer.java:784:                  "exist in this model.",
src/main/org/nlogo/agent/Importer.java:785:              "the import will continue but this variable will be ignored."));
src/main/org/nlogo/agent/Importer.java:823:              "Error Setting Value",
src/main/org/nlogo/agent/Importer.java:824:              "could not set " + agent + "'s variable " + header +
src/main/org/nlogo/agent/Importer.java:825:                  " to " + value,
src/main/org/nlogo/agent/Importer.java:826:              "the import will continue, but the variable will be set " +
src/main/org/nlogo/agent/Importer.java:827:                  "to an appropriate default."));
src/main/org/nlogo/agent/Importer.java:833:              "Error Setting Value",
src/main/org/nlogo/agent/Importer.java:834:              "could not set " + agent + "'s variable " + header +
src/main/org/nlogo/agent/Importer.java:835:                  " to " + value,
src/main/org/nlogo/agent/Importer.java:836:              "the import will continue, but the variable will be set " +
src/main/org/nlogo/agent/Importer.java:837:                  "to an appropriate default."));
src/main/org/nlogo/agent/Importer.java:847:        String abortingError = "Illegal Patch Coordinate- pxcor and pycor must be in range.";
src/main/org/nlogo/agent/Importer.java:853:      String abortingError = "Illegal Patch Coordinate- pxcor and pycor must be integers.";
src/main/org/nlogo/agent/Importer.java:863:      String abortingError = "Illegal Who- a turtle's who must be an integer.";
src/main/org/nlogo/agent/Importer.java:873:      String abortingError = "Illegal lwho- a link's who must be an integer.";
src/main/org/nlogo/agent/Importer.java:883:      String abortingError = "Illegal End a link's end points must be a turtle.";
src/main/org/nlogo/agent/Importer.java:897:            "Illegal Shape",
src/main/org/nlogo/agent/Importer.java:899:            "setting " + turtle + "'s shape to its breed's default shape");
src/main/org/nlogo/agent/Importer.java:951:      String abortingError = "Illegal Screen dimension- max-px/ycor, min-px/ycor must be numbers.";
src/main/org/nlogo/agent/Importer.java:1152:          String abortingError = header + " is not in the list of variables to be imported " +
src/main/org/nlogo/agent/Importer.java:1153:              "from the import file in the " + printSectionName() + " section. " +
src/main/org/nlogo/agent/Importer.java:1154:              "This variable is essential to a model.";
src/main/org/nlogo/agent/Importer.java:1161:                  "Implicit Variable Not Declared",
src/main/org/nlogo/agent/Importer.java:1162:                  "the " + printName(agentClass) + " variable " +
src/main/org/nlogo/agent/Importer.java:1163:                      header + " was not declared.",
src/main/org/nlogo/agent/Importer.java:1164:                  "the import will continue but all agents with this " +
src/main/org/nlogo/agent/Importer.java:1165:                      "variable will have it set to an appropriate default."));
src/main/org/nlogo/agent/Importer.java:1193:  private final String[] sentinels = {"GLOBALS", "TURTLES", "PATCHES", "LINKS", "DRAWING", "OUTPUT", "PLOTS", "EXTENSIONS", "DONE",};
src/main/org/nlogo/agent/Importer.java:1216:        if (sentinels[currentSentinel].equals("DRAWING") ||
src/main/org/nlogo/agent/Importer.java:1217:            sentinels[currentSentinel].equals("LINKS") ||
src/main/org/nlogo/agent/Importer.java:1218:            sentinels[currentSentinel].equals("OUTPUT") ||
src/main/org/nlogo/agent/Importer.java:1219:            sentinels[currentSentinel].equals("PLOTS") ||
src/main/org/nlogo/agent/Importer.java:1220:            sentinels[currentSentinel].equals("EXTENSIONS")) {
src/main/org/nlogo/agent/Importer.java:1224:        String abortingError = "No " + sentinels[currentSentinel] +
src/main/org/nlogo/agent/Importer.java:1225:            " have been imported.  Globals, Turtles, and Patches " +
src/main/org/nlogo/agent/Importer.java:1226:            "must be in the same import file.";
src/main/org/nlogo/agent/Importer.java:1247:              "At line " + lineNum + ": " + le.getMessage());
src/main/org/nlogo/agent/Importer.java:1264:          String abortingError = "The agents are in the wrong order in the import file. " +
src/main/org/nlogo/agent/Importer.java:1265:              "The global variables should be first, followed by the turtles, " +
src/main/org/nlogo/agent/Importer.java:1266:              "followed by the patches.  Found " + nextLineFields[0] +
src/main/org/nlogo/agent/Importer.java:1267:              " but needed " + sentinels[currentSentinel];
src/main/org/nlogo/agent/Importer.java:1301:    return ((currentSentinel > 0) ? sentinels[currentSentinel - 1] : "UNKNOWN");
src/main/org/nlogo/agent/Importer.java:1306:      return "Global";
src/main/org/nlogo/agent/Importer.java:1309:      return "Turtle";
src/main/org/nlogo/agent/Importer.java:1312:      return "Patch";
src/main/org/nlogo/agent/Importer.java:1315:      return "Link";
src/main/org/nlogo/agent/Importer.java:1325:        String abortingError = turtle.toString() + " was referenced in an agentset or agent " +
src/main/org/nlogo/agent/Importer.java:1326:            "but was not defined in the TURTLES section.";
src/main/org/nlogo/agent/Importer.java:1366:      super(errorTitle + "- Error Type: " + errorType);
src/main/org/nlogo/agent/Importer.java:1376:      message += "\n\nAdditional Information: " + additionalInfo;
src/main/org/nlogo/agent/Importer.java:1388:      super("Fatal Error Type:" + errorType);
src/main/org/nlogo/agent/Importer.java:1390:      title = "Fatal Error- " + getErrorMessage();
src/main/org/nlogo/agent/Importer.java:1391:      this.details = details + "\n\nThe import will now abort.";
src/main/org/nlogo/agent/Importer.java:1398:          message = "Error Already Given";
src/main/org/nlogo/agent/Importer.java:1401:          message = "Illegal Type Cast";
src/main/org/nlogo/agent/Importer.java:1404:          message = "Unexpected End of File";
src/main/org/nlogo/agent/Importer.java:1407:          message = "Incorrect Structure For Import File";
src/main/org/nlogo/agent/Importer.java:1410:          message = "Essential Variable Not Declared";
src/main/org/nlogo/agent/Importer.java:1413:          message = "Essential Variable Not Imported";
src/main/org/nlogo/agent/Importer.java:1416:          message = "Referenced Turtle Not Defined";
src/main/org/nlogo/agent/Importer.java:1419:          message = "Invalid CSV File";
src/main/org/nlogo/agent/Importer.java:1422:          message = "You cannot import a 2D world into 3D NetLogo";
src/main/org/nlogo/agent/Importer.java:1425:          message = "Unknown Fatal Error";
src/main/org/nlogo/agent/Importer.java:1435:          (ImportError.UNKNOWN_ERROR, "An unknown error has occurred. The import will now abort.");
src/main/org/nlogo/agent/Importer.java:1437:    if (!errorHandler.showError("Warning: " + ix.title,
src/main/org/nlogo/agent/Importer.java:1438:        "Error Importing at Line " + lineNum + ": " + ix.message +
src/main/org/nlogo/agent/Importer.java:1439:            "\n\nAction to be Taken: " + ix.action, false)) {
src/main/org/nlogo/agent/Importer.java:1526:          ("The data must be a multiple of 4 to covert from Hex string to ints");
src/main/org/nlogo/agent/Importer.java:1547:      throw new IllegalArgumentException("Invalid hex character: " + c);
src/main/org/nlogo/agent/Importer3D.java:11:  static final String MIN_PZCOR_HEADER = "MIN-PZCOR";
src/main/org/nlogo/agent/Importer3D.java:12:  static final String MAX_PZCOR_HEADER = "MAX-PZCOR";
src/main/org/nlogo/agent/Importer3D.java:28:    if (!versionNumber.startsWith("3-D") && !versionNumber.startsWith("3D")) {
src/main/org/nlogo/agent/Importer3D.java:41:      if (line[0].equalsIgnoreCase("x0")) {
src/main/org/nlogo/agent/Importer3D.java:44:      if (line[0].equalsIgnoreCase("shape")) {
src/main/org/nlogo/agent/Importer3D.java:47:          if (line[1].equalsIgnoreCase("x1")) {
src/main/org/nlogo/agent/Importer3D.java:67:                    (ImportError.ILLEGAL_CLASS_CAST_ERROR, "Coordinates in the drawing must be doubles");
src/main/org/nlogo/agent/Importer3D.java:87:                    "Coordinates in the drawing must be doubles");
src/main/org/nlogo/agent/Importer3D.java:104:                "Coordinates in the drawing must be doubles");
src/main/org/nlogo/agent/Importer3D.java:152:        String abortingError = "Illegal Patch Coordinate- pxcor, pycor and pzcor must be in range.";
src/main/org/nlogo/agent/Importer3D.java:158:      String abortingError = "Illegal Patch Coordinate- pxcor and pycor must be integers.";
src/main/org/nlogo/agent/Importer3D.java:195:      String abortingError = "Illegal Screen dimension- max-px/y/zcor, min-px/y/zcor must be numbers.";
src/main/org/nlogo/agent/ImportLexer.java:11:@SuppressWarnings({"unused","fallthrough"})
src/main/org/nlogo/agent/ImportLexer.java:47:    "\10\0\2\2\1\4\25\0\1\2\1\0\1\3\11\0\1\1\uffd3\0";
src/main/org/nlogo/agent/ImportLexer.java:61:    "\1\7\1\0\1\10\1\7\1\10";
src/main/org/nlogo/agent/ImportLexer.java:90:    "Unkown internal scanner error",
src/main/org/nlogo/agent/ImportLexer.java:91:    "Error: could not match input",
src/main/org/nlogo/agent/ImportLexer.java:92:    "Error: pushback value was too large"
src/main/org/nlogo/agent/ImportLexer.java:191:			if( c == '"' && i < s.length() - 1 && s.charAt( i + 1 ) == '"' )
src/main/org/nlogo/agent/ImportLexer.java:387:   * will only be called with things that "Can't Possibly Happen".
src/main/org/nlogo/agent/ImportLexer.java:587:          { throw new ImportLexer.LexerException( "Unclosed double quote" ) ;
src/main/org/nlogo/agent/ImportLexer.java:611:		( "Quoted fields must be followed by comma or end of line" ) ;
src/main/org/nlogo/agent/ImportPatchColors.java:28:          "org.nlogo.agent.ImportPatchColors.unsupportedImageFormat", new String[]{fileName}));
src/main/org/nlogo/agent/InputBoxConstraint.scala:15:      case "Number" | "Color" => obj.isInstanceOf[java.lang.Double]
src/main/org/nlogo/agent/InputBoxConstraint.scala:21:      throw new ValueConstraint.Violation("You can't set this to " + value)
src/main/org/nlogo/agent/Link.java:202:            (vn + " is not a double variable");
src/main/org/nlogo/agent/Link.java:226:            (vn + " is not a double variable");
src/main/org/nlogo/agent/Link.java:275:              throw new AgentException("there is already a "
src/main/org/nlogo/agent/Link.java:277:                  + " with endpoints "
src/main/org/nlogo/agent/Link.java:278:                  + end1.toString() + " and " + end2.toString());
src/main/org/nlogo/agent/Link.java:321:          throw new AgentException("you can't change a link's endpoints");
src/main/org/nlogo/agent/Link.java:333:        ("a link can't access a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:340:        ("a link can't access a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:355:        ("a link can't access a patch variable without specifying which patch");
src/main/org/nlogo/agent/Link.java:362:        ("a link can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:369:        ("a link can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:376:        ("a link can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:382:        ("a link can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:397:        ("a link can't set a patch variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:404:        ("a link can't set a patch variable without specifying which turtle");
src/main/org/nlogo/agent/Link.java:484:  public static final String MODE_NONE = "none";
src/main/org/nlogo/agent/Link.java:485:  public static final String MODE_FREE = "free";
src/main/org/nlogo/agent/Link.java:486:  public static final String MODE_FIXED = "fixed";
src/main/org/nlogo/agent/Link.java:539:        ("links can't access patches via relative coordinates");
src/main/org/nlogo/agent/LogoHashObject.java:3:/* The "general contract" between Object.hashCode() and Object.equals(..) is
src/main/org/nlogo/agent/NetworkMetrics.java:80:   * Directed links are only followed in the "forward" direction.
src/main/org/nlogo/agent/NetworkMetrics.java:129:   * Directed links are only followed in the "forward" direction.
src/main/org/nlogo/agent/Observer.java:58:    throw new AgentException("the observer can't access a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:65:        ("the observer can't access a turtle or link variable without specifying which agent");
src/main/org/nlogo/agent/Observer.java:71:    throw new AgentException("the observer can't access a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:78:        ("the observer can't access a link variable without specifying which link");
src/main/org/nlogo/agent/Observer.java:85:        ("the observer can't access a link variable without specifying which link");
src/main/org/nlogo/agent/Observer.java:91:    throw new AgentException("the observer can't access a patch variable without specifying which patch");
src/main/org/nlogo/agent/Observer.java:120:        ("the observer can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:126:    throw new AgentException("the observer can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:132:    throw new AgentException("the observer can't set a turtle variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:138:    throw new AgentException("the observer can't set a patch variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:144:    throw new AgentException("the observer can't set a patch variable without specifying which turtle");
src/main/org/nlogo/agent/Observer.java:151:        ("the observer can't access a link variable without specifying which link");
src/main/org/nlogo/agent/Observer.java:158:        ("the observer can't access a link variable without specifying which link");
src/main/org/nlogo/agent/Observer.java:165:        ("the observer can't access a link variable without specifying which link");
src/main/org/nlogo/agent/Observer.java:172:        ("the observer can't access a turtle or link variable without specifying which agent");
src/main/org/nlogo/agent/Observer.java:397:      throw new AgentException("you can't move-to a link");
src/main/org/nlogo/agent/Observer.java:510:    return "observer";
src/main/org/nlogo/agent/Observer.java:515:    return "observer";
src/main/org/nlogo/agent/Patch.java:500:    return "patch " + pxcor + " " + pycor;
src/main/org/nlogo/agent/Patch.java:505:    return "patch";
src/main/org/nlogo/agent/Patch3D.java:106:          throw new AgentException("you can't change a patch's coordinates");
src/main/org/nlogo/agent/Patch3D.java:119:        throw new AgentException("you can't change a patch's coordinates");
src/main/org/nlogo/agent/Patch3D.java:121:        throw new AgentException("you can't change a patch's coordinates");
src/main/org/nlogo/agent/Patch3D.java:123:        throw new AgentException("you can't change a patch's coordinates");
src/main/org/nlogo/agent/Patch3D.java:126:            (vn + " is not a double variable");
src/main/org/nlogo/agent/Patch3D.java:150:            (vn + " is not a double variable");
src/main/org/nlogo/agent/Patch3D.java:159:      throw new AgentException("Cannot get patch beyond limits of current world.");
src/main/org/nlogo/agent/Patch3D.java:168:      throw new AgentException("Cannot get patch beyond limits of current world.");
src/main/org/nlogo/agent/Patch3D.java:325:    return "patch " + pxcor + " " + pycor + " " + pzcor;
src/main/org/nlogo/agent/Protractor.java:259:      throw new IllegalStateException("In towards: fromAgent must not be a link");
src/main/org/nlogo/agent/Protractor.java:299:          ("no pitch is defined from an agent to itself");
src/main/org/nlogo/agent/Protractor.java:332:      throw new IllegalStateException("In towardsPitch: fromAgent must be the observer");
src/main/org/nlogo/agent/Protractor.java:342:          ("no pitch is defined from a point (" +
src/main/org/nlogo/agent/Protractor.java:343:              fromX + "," + fromY + "," + fromZ + ") to that same point");
src/main/org/nlogo/agent/Protractor3D.java:25:      throw new IllegalStateException("you can't find distance to links");
src/main/org/nlogo/agent/Protractor3D.java:124:          ("no pitch is defined from an agent to itself");
src/main/org/nlogo/agent/Protractor3D.java:173:          ("no pitch is defined from a point (" +
src/main/org/nlogo/agent/Protractor3D.java:174:              fromX + "," + fromY + "," + fromZ + ") to that same point");
src/main/org/nlogo/agent/Protractor3D.java:194:          ("no pitch is defined from a point (" +
src/main/org/nlogo/agent/Protractor3D.java:195:              fromX + "," + fromY + "," + fromZ + ") to that same point");
src/main/org/nlogo/agent/SliderConstraint.scala:8:  val Min = Spec("minimumCode", "Minimum")
src/main/org/nlogo/agent/SliderConstraint.scala:9:  val Max = Spec("maximumCode", "Maximum")
src/main/org/nlogo/agent/SliderConstraint.scala:10:  val Inc = Spec("incrementCode", "Increment")
src/main/org/nlogo/agent/SliderConstraint.scala:16:    LogoException("Constraint runtime error for " + spec.displayName + ": " + message) with SliderConstraintException
src/main/org/nlogo/agent/SliderConstraint.scala:40:        if (!(o.isInstanceOf[Double])) Left(new ConstraintRuntimeException(spec, "constraint must be a number."))
src/main/org/nlogo/agent/SliderConstraint.scala:47:        try Right(thunkFactory.makeReporterThunk(code, "slider '" + ownerName + "' " + spec.displayName))
src/main/org/nlogo/agent/SliderConstraint.scala:68:    if (!(o.isInstanceOf[Double])) {throw new ValueConstraint.Violation("Value must be a number.")}
src/main/org/nlogo/agent/SliderConstraint.scala:89:      case ex: ClassCastException => throw new ConstraintRuntimeException(spec, "Must be a number.")
src/main/org/nlogo/agent/TreeAgentSet.java:179:    StringBuilder s = new StringBuilder("TreeAgentSet");
src/main/org/nlogo/agent/TreeAgentSet.java:180:    s = s.append("\n...... type: ");
src/main/org/nlogo/agent/TreeAgentSet.java:181:    s = s.append(type == null ? "null" : type.toString());
src/main/org/nlogo/agent/TreeAgentSet.java:182:    s = s.append("\n...... count(): " + count());
src/main/org/nlogo/agent/TreeAgentSet.java:183:    s = s.append("\n...... agents: ");
src/main/org/nlogo/agent/TreeAgentSet.java:205:          ("remove() not supported");
src/main/org/nlogo/agent/Turtle.java:46:  public static final String PEN_UP = "up";
src/main/org/nlogo/agent/Turtle.java:47:  public static final String PEN_DOWN = "down";
src/main/org/nlogo/agent/Turtle.java:48:  public static final String PEN_ERASE = "erase";
src/main/org/nlogo/agent/Turtle.java:563:        ("a turtle can't set a link variable without specifying which link");
src/main/org/nlogo/agent/Turtle.java:570:        ("a turtle can't set a link variable without specifying which link");
src/main/org/nlogo/agent/Turtle.java:577:        ("a turtle can't set a link variable without specifying which link");
src/main/org/nlogo/agent/Turtle.java:692:      throw new AgentException("you can't move-to a link");
src/main/org/nlogo/agent/Turtle3D.java:122:      throw new AgentException("Cannot get patch beyond limits of current world.");
src/main/org/nlogo/agent/Turtle3D.java:131:      throw new AgentException("Cannot get patch beyond limits of current world.");
src/main/org/nlogo/agent/Turtle3D.java:240:            (vn + " is not a double variable");
src/main/org/nlogo/agent/Turtle3D.java:273:        throw new AgentException("you can't change a turtle's who number");
src/main/org/nlogo/agent/Turtle3D.java:276:            (vn + " is not a double variable");
src/main/org/nlogo/agent/Turtle3D.java:326:                  ("\"" + (String) value + "\" is not a currently defined shape");
src/main/org/nlogo/agent/Turtle3D.java:394:          throw new AgentException("you can't change a turtle's ID number");
src/main/org/nlogo/agent/VertCylinder.java:26:      throw new AgentException("Cannot move turtle beyond the world's edge.");
src/main/org/nlogo/agent/World.java:89:    _observers = new ArrayAgentSet(Observer.class, 1, "observers", false, this);
src/main/org/nlogo/agent/World.java:347:      throw new AgentException("Cannot access patches beyond the limits of current world.");
src/main/org/nlogo/agent/World.java:364:      throw new AgentException("Cannot access patches beyond the limits of current world.");
src/main/org/nlogo/agent/World.java:431:        ("agentClass = " + agentClass);
src/main/org/nlogo/agent/World.java:440:        variableName.equalsIgnoreCase("MIN-PXCOR") ||
src/main/org/nlogo/agent/World.java:441:            variableName.equalsIgnoreCase("MAX-PXCOR") ||
src/main/org/nlogo/agent/World.java:442:            variableName.equalsIgnoreCase("MIN-PYCOR") ||
src/main/org/nlogo/agent/World.java:443:            variableName.equalsIgnoreCase("MAX-PYCOR") ||
src/main/org/nlogo/agent/World.java:444:            variableName.equalsIgnoreCase("WORLD-WIDTH") ||
src/main/org/nlogo/agent/World.java:445:            variableName.equalsIgnoreCase("WORLD-HEIGHT");
src/main/org/nlogo/agent/World.java:450:    if (variableName.equalsIgnoreCase("MIN-PXCOR")) {
src/main/org/nlogo/agent/World.java:452:    } else if (variableName.equalsIgnoreCase("MAX-PXCOR")) {
src/main/org/nlogo/agent/World.java:454:    } else if (variableName.equalsIgnoreCase("MIN-PYCOR")) {
src/main/org/nlogo/agent/World.java:456:    } else if (variableName.equalsIgnoreCase("MAX-PYCOR")) {
src/main/org/nlogo/agent/World.java:458:    } else if (variableName.equalsIgnoreCase("WORLD-WIDTH")) {
src/main/org/nlogo/agent/World.java:461:    } else if (variableName.equalsIgnoreCase("WORLD-HEIGHT")) {
src/main/org/nlogo/agent/World.java:707:    _turtles = new TreeAgentSet(Turtle.class, "TURTLES", this);
src/main/org/nlogo/agent/World.java:708:    _links = new TreeAgentSet(Link.class, "LINKS", this);
src/main/org/nlogo/agent/World.java:730:    _patches = new ArrayAgentSet(Patch.class, patchArray, "patches", this);
src/main/org/nlogo/agent/World.java:876:      boolean directed = _program.linkBreeds.get(breedName).equals("DIRECTED-LINK-BREED");
src/main/org/nlogo/agent/World.java:1121:      return "TURTLE";
src/main/org/nlogo/agent/World.java:1131:    return "TURTLE";
src/main/org/nlogo/agent/World.java:1136:      return "LINK";
src/main/org/nlogo/agent/World.java:1146:    return "LINK";
src/main/org/nlogo/agent/World.java:1161:    throw new IllegalStateException("neither of the breeds exist, that's bad");
src/main/org/nlogo/agent/World.java:1252:  public final BreedShapes linkBreedShapes = new BreedShapes("LINKS");
src/main/org/nlogo/agent/World.java:1253:  public final BreedShapes turtleBreedShapes = new BreedShapes("TURTLES");
src/main/org/nlogo/agent/World.java:1266:          ("World.program cannot be set to null");
src/main/org/nlogo/agent/World.java:1325:        ("\"" + var + "\" not found");
src/main/org/nlogo/agent/World.java:1339:        ("\"" + var + "\" not found");
src/main/org/nlogo/agent/World3D.java:238:    _turtles = new TreeAgentSet(Turtle.class, "TURTLES", this);
src/main/org/nlogo/agent/World3D.java:239:    _links = new TreeAgentSet(Link.class, "LINKS", this);
src/main/org/nlogo/agent/World3D.java:266:    _patches = new ArrayAgentSet(Patch.class, patchArray, "patches", this);
src/main/org/nlogo/agent/World3D.java:318:        variableName.equalsIgnoreCase("MIN-PXCOR") ||
src/main/org/nlogo/agent/World3D.java:319:            variableName.equalsIgnoreCase("MAX-PXCOR") ||
src/main/org/nlogo/agent/World3D.java:320:            variableName.equalsIgnoreCase("MIN-PYCOR") ||
src/main/org/nlogo/agent/World3D.java:321:            variableName.equalsIgnoreCase("MAX-PYCOR") ||
src/main/org/nlogo/agent/World3D.java:322:            variableName.equalsIgnoreCase("MIN-PZCOR") ||
src/main/org/nlogo/agent/World3D.java:323:            variableName.equalsIgnoreCase("MAX-PZCOR") ||
src/main/org/nlogo/agent/World3D.java:324:            variableName.equalsIgnoreCase("WORLD-WIDTH") ||
src/main/org/nlogo/agent/World3D.java:325:            variableName.equalsIgnoreCase("WORLD-HEIGHT") ||
src/main/org/nlogo/agent/World3D.java:326:            variableName.equalsIgnoreCase("WORLD-DEPTH");
src/main/org/nlogo/agent/World3D.java:332:    if (variableName.equalsIgnoreCase("MIN-PXCOR")) {
src/main/org/nlogo/agent/World3D.java:334:    } else if (variableName.equalsIgnoreCase("MAX-PXCOR")) {
src/main/org/nlogo/agent/World3D.java:336:    } else if (variableName.equalsIgnoreCase("MIN-PYCOR")) {
src/main/org/nlogo/agent/World3D.java:338:    } else if (variableName.equalsIgnoreCase("MAX-PYCOR")) {
src/main/org/nlogo/agent/World3D.java:340:    } else if (variableName.equalsIgnoreCase("MIN-PZCOR")) {
src/main/org/nlogo/agent/World3D.java:342:    } else if (variableName.equalsIgnoreCase("MAX-PZCOR")) {
src/main/org/nlogo/agent/World3D.java:344:    } else if (variableName.equalsIgnoreCase("WORLD-WIDTH")) {
src/main/org/nlogo/agent/World3D.java:347:    } else if (variableName.equalsIgnoreCase("WORLD-HEIGHT")) {
src/main/org/nlogo/agent/World3D.java:350:    } else if (variableName.equalsIgnoreCase("WORLD-DEPTH")) {
src/main/org/nlogo/api/AgentVariables.java:75:        ? new String[]{"WHO", "COLOR", "HEADING", "PITCH", "ROLL", "XCOR", "YCOR", "ZCOR", "SHAPE",
src/main/org/nlogo/api/AgentVariables.java:76:        "LABEL", "LABEL-COLOR", "BREED", "HIDDEN?", "SIZE", "PEN-SIZE", "PEN-MODE"}
src/main/org/nlogo/api/AgentVariables.java:77:        : new String[]{"WHO", "COLOR", "HEADING", "XCOR", "YCOR", "SHAPE", "LABEL", "LABEL-COLOR", "BREED",
src/main/org/nlogo/api/AgentVariables.java:78:        "HIDDEN?", "SIZE", "PEN-SIZE", "PEN-MODE"};
src/main/org/nlogo/api/AgentVariables.java:83:        ? new String[]{"PXCOR", "PYCOR", "PZCOR", "PCOLOR", "PLABEL", "PLABEL-COLOR"}
src/main/org/nlogo/api/AgentVariables.java:84:        : new String[]{"PXCOR", "PYCOR", "PCOLOR", "PLABEL", "PLABEL-COLOR"};
src/main/org/nlogo/api/AgentVariables.java:88:    return new String[]{"END1", "END2", "COLOR", "LABEL", "LABEL-COLOR", "HIDDEN?", "BREED",
src/main/org/nlogo/api/AgentVariables.java:89:        "THICKNESS", "SHAPE", "TIE-MODE"};
src/main/org/nlogo/api/ClassManager.java:15: *         primManager.addPrimitive("first-n-fibs", new Fibonacci());
src/main/org/nlogo/api/Color.java:31:          "gray", "red", "orange", "brown",
src/main/org/nlogo/api/Color.java:32:          "yellow", "green", "lime", "turquoise", "cyan", "sky",
src/main/org/nlogo/api/Color.java:33:          "blue", "violet", "magenta", "pink",
src/main/org/nlogo/api/Color.java:35:          "black", "white"
src/main/org/nlogo/api/Color.java:475:  private static final String COLOR_TRANSLATIONS = "/system/color-translation.txt";
src/main/org/nlogo/api/Color.java:524:      throw new IllegalStateException("Can't get RGB color");
src/main/org/nlogo/api/Command.java:10:   * Specifies whether NetLogo should "switch" to another
src/main/org/nlogo/api/CommandLogoThunk.java:5:   * @return whether the code did a "stop" at the top level
src/main/org/nlogo/api/CompilerException.java:10:  public static final String RUNTIME_ERROR_AT_COMPILE_TIME_MSG_PREFIX = "Runtime error: ";
src/main/org/nlogo/api/CompilerException.java:44:    return getMessage() + " at position " + startPos + " in " + fileName;
src/main/org/nlogo/api/Context.java:42:   * The "current working directory" is the current
src/main/org/nlogo/api/CSV.java:73:      s = "null";
src/main/org/nlogo/api/DefaultClassManager.java:16:  @SuppressWarnings("unused")
src/main/org/nlogo/api/DefaultClassManager.java:31:  @SuppressWarnings("unused")
src/main/org/nlogo/api/DefaultClassManager.java:45:  @SuppressWarnings("unused")
src/main/org/nlogo/api/DefaultClassManager.java:59:  @SuppressWarnings("unused")
src/main/org/nlogo/api/DefaultClassManager.java:63:        ("readExtensionObject not implemented for " + this);
src/main/org/nlogo/api/DummyCompilerServices.scala:12:          case "true" => true: java.lang.Boolean
src/main/org/nlogo/api/DummyCompilerServices.scala:13:          case "false" => false: java.lang.Boolean
src/main/org/nlogo/api/DummyExtensionManager.scala:20:    if(filename == "aggregate") ""
src/main/org/nlogo/api/Dump.java:57:      throw new IllegalArgumentException("Integer: " + obj);
src/main/org/nlogo/api/Dump.java:64:        return "\"" + StringUtils.escapeString((String) obj) + "\"";
src/main/org/nlogo/api/Dump.java:73:      return "nobody";
src/main/org/nlogo/api/Dump.java:79:      return "<null>";
src/main/org/nlogo/api/Dump.java:81:      return "<" + obj.getClass().getName() + ">";
src/main/org/nlogo/api/Dump.java:88:    return "{{" + obj.getExtensionName() + ":" + obj.getNLTypeName() + " "
src/main/org/nlogo/api/Dump.java:129:        buff.append(key + " = null\n");
src/main/org/nlogo/api/Dump.java:137:        buff.append(key + " = " + value + "\n");
src/main/org/nlogo/api/Dump.java:193:      buffer.append("(agentset, " + agentset.count() + " ");
src/main/org/nlogo/api/Dump.java:196:          buffer.append("turtle");
src/main/org/nlogo/api/Dump.java:198:          buffer.append("turtles");
src/main/org/nlogo/api/Dump.java:202:          buffer.append("patch");
src/main/org/nlogo/api/Dump.java:204:          buffer.append("patches");
src/main/org/nlogo/api/Dump.java:207:        buffer.append("observer");
src/main/org/nlogo/api/Dump.java:210:          buffer.append("link");
src/main/org/nlogo/api/Dump.java:212:          buffer.append("links");
src/main/org/nlogo/api/Dump.java:223:            buffer.append("all-" + printName);
src/main/org/nlogo/api/Dump.java:225:            buffer.append("breed " + printName);
src/main/org/nlogo/api/Dump.java:228:          buffer.append("turtles");
src/main/org/nlogo/api/Dump.java:236:            buffer.append("all-" + printName);
src/main/org/nlogo/api/Dump.java:238:            buffer.append("breed " + printName);
src/main/org/nlogo/api/Dump.java:241:          buffer.append("links");
src/main/org/nlogo/api/Dump.java:244:            buffer.append(" [" + link.end1().id() + " " +
src/main/org/nlogo/api/Dump.java:251:          buffer.append("all-" + printName);
src/main/org/nlogo/api/Dump.java:253:          buffer.append("patches");
src/main/org/nlogo/api/Dump.java:256:            buffer.append(" [" + patch.pxcor() + " " + patch.pycor() + "]");
src/main/org/nlogo/api/Dump.java:260:        buffer.append("observer");
src/main/org/nlogo/api/Dump.java:278:      return "observer";
src/main/org/nlogo/api/Dump.java:283:        return "nobody";
src/main/org/nlogo/api/Dump.java:302:      return "true/false";
src/main/org/nlogo/api/Dump.java:304:      return "number";
src/main/org/nlogo/api/Dump.java:306:      return "string";
src/main/org/nlogo/api/Dump.java:308:      return "agentset";
src/main/org/nlogo/api/Dump.java:310:      return "turtle";
src/main/org/nlogo/api/Dump.java:312:      return "patch";
src/main/org/nlogo/api/Dump.java:314:      return "link";
src/main/org/nlogo/api/Dump.java:316:      return "observer";
src/main/org/nlogo/api/Dump.java:318:      return "agent";
src/main/org/nlogo/api/Dump.java:320:      return "list";
src/main/org/nlogo/api/Dump.java:322:      return "nobody";
src/main/org/nlogo/api/ExtensionManager.java:42:   * "live", or currently in the block, so that its primitives are available for use
src/main/org/nlogo/api/ExtensionManager.java:65:   * Returns the identifier "name" by its imported implementation, if any,
src/main/org/nlogo/api/File.java:101:            throw new IllegalArgumentException("invalid escape sequence in \"" + s + "\"");
src/main/org/nlogo/api/Graphics2DWrapper.java:8:      System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/api/Graphics2DWrapper.java:10:      IS_MAC && Boolean.getBoolean("apple.awt.graphics.UseQuartz");
src/main/org/nlogo/api/Graphics2DWrapper.java:19:    return "(" + (g.getTransform().getTranslateX() + x) + " , " + (g.getTransform().getTranslateY() + y) + ")";
src/main/org/nlogo/api/JavaLibraryPath.java:12: * The Terms of Use for the website, in the "Content Submitted to Sun"
src/main/org/nlogo/api/JavaLibraryPath.java:40:      final String filesep = System.getProperty("file.separator");
src/main/org/nlogo/api/JavaLibraryPath.java:45:      String osname = System.getProperty("os.name");
src/main/org/nlogo/api/JavaLibraryPath.java:46:      if (osname.equals("Mac OS X")) {
src/main/org/nlogo/api/JavaLibraryPath.java:48:      } else if (osname.startsWith("Windows")) {
src/main/org/nlogo/api/JavaLibraryPath.java:49:        libdir = libdir + "Windows";
src/main/org/nlogo/api/JavaLibraryPath.java:51:        String arch = System.getProperty("os.arch");
src/main/org/nlogo/api/JavaLibraryPath.java:52:        if (arch.endsWith("86")) {
src/main/org/nlogo/api/JavaLibraryPath.java:53:          libdir = libdir + "-x86";
src/main/org/nlogo/api/JavaLibraryPath.java:68:        libdir = libdir.replaceAll("LinuxLinux", "Linux");
src/main/org/nlogo/api/JavaLibraryPath.java:84:    String newLibraryPath = System.getProperty("java.library.path");
src/main/org/nlogo/api/JavaLibraryPath.java:94:    Field f = System.class.getDeclaredField("props");
src/main/org/nlogo/api/JavaLibraryPath.java:98:    props.put("java.library.path", newLibraryPath);
src/main/org/nlogo/api/JavaLibraryPath.java:105:        ClassLoader.class.getDeclaredField("usr_paths");
src/main/org/nlogo/api/Link.java:48:   * Returns the x-coordinate of end2 this coordinate is "unwrapped" so
src/main/org/nlogo/api/Link.java:54:   * Returns the y-coordinate of end2 this coordinate is "unwrapped" so
src/main/org/nlogo/api/Link3D.java:10:   * Returns the z-coordinate of end2 this coordinate is "unwrapped" so
src/main/org/nlogo/api/LocalFile.java:58:      throw new java.io.IOException("Attempted to open an already open file");
src/main/org/nlogo/api/LocalFile.java:91:      throw new java.io.IOException("Attempted to print to an unopened File");
src/main/org/nlogo/api/LocalFile.java:100:      throw new java.io.IOException("Attempted to println to an unopened File");
src/main/org/nlogo/api/LocalFile.java:109:      throw new java.io.IOException("Attempted to println to an unopened File");
src/main/org/nlogo/api/Matrix3D.java:10: * Sun grants you ("Licensee") a non-exclusive, royalty free, license to use,
src/main/org/nlogo/api/Matrix3D.java:16: * This software is provided "AS IS," without a warranty of any kind. ALL
src/main/org/nlogo/api/Matrix3D.java:292:    return ("[" + xo + "," + xx + "," + xy + "," + xz + ";"
src/main/org/nlogo/api/Matrix3D.java:293:        + yo + "," + yx + "," + yy + "," + yz + ";"
src/main/org/nlogo/api/Matrix3D.java:294:        + zo + "," + zx + "," + zy + "," + zz + "]");
src/main/org/nlogo/api/ModelReader.scala:16:    Utils.getResourceAsStringArray("/system/defaultShapes.txt")
src/main/org/nlogo/api/ModelReader.scala:18:    Utils.getResourceAsStringArray("/system/defaultLinkShapes.txt")
src/main/org/nlogo/api/NetLogoListener.java:32:   * <p>The button may be a "once" button or a "forever" button.
src/main/org/nlogo/api/NetLogoListener.java:33:   * If it is a "once" button, it pops back up automatically when
src/main/org/nlogo/api/NetLogoListener.java:34:   * its action is completed.  If it is a "forever" button, it will
src/main/org/nlogo/api/NetLogoListener.java:103:   * "Potentially" because an actual update might not take place
src/main/org/nlogo/api/Number.scala:23:        Left("Illegal number format")
src/main/org/nlogo/api/Number.scala:32:          Left("Number too large")
src/main/org/nlogo/api/Number.scala:33:        else if (".eE".exists(text.contains(_)))
src/main/org/nlogo/api/Number.scala:36:          Left(text + " is too large to be represented exactly as an integer in NetLogo")
src/main/org/nlogo/api/Number.scala:43:        Left("Illegal number format")
src/main/org/nlogo/api/Options.java:52:    throw new IllegalArgumentException("not found: " + s);
src/main/org/nlogo/api/Options.java:62:    throw new IllegalArgumentException("not found: " + obj);
src/main/org/nlogo/api/package.html:5:<body bgcolor="white">
src/main/org/nlogo/api/package.html:18:  <a href="../../../../extensions.html">Extending NetLogo</a> in 
src/main/org/nlogo/api/package.html:19:<a href="../../../../index.html">NetLogo User Manual</a> 
src/main/org/nlogo/api/Primitive.java:15:   * Turtle use "T", and to specify Patch use "P".  To use combinations,
src/main/org/nlogo/api/Primitive.java:20:   * <pre> String getAgentClassString() { return "OTP"; }</pre>
src/main/org/nlogo/api/PrimitiveManager.java:21:   * to in NetLogo code as "extensionname:primitive".  If true, they
src/main/org/nlogo/api/PrimitiveManager.java:22:   * may also optionally be referred to simply as "primitive".  The
src/main/org/nlogo/api/Program.java:52:    buf.append("globals " + Dump.list(globals) + "\n");
src/main/org/nlogo/api/Program.java:53:    buf.append("interfaceGlobals " +
src/main/org/nlogo/api/Program.java:55:    buf.append("turtles-own " + Dump.list(turtlesOwn) + "\n");
src/main/org/nlogo/api/Program.java:56:    buf.append("patches-own " + Dump.list(patchesOwn) + "\n");
src/main/org/nlogo/api/Program.java:57:    buf.append("links-own " + Dump.list(linksOwn) + "\n");
src/main/org/nlogo/api/Program.java:58:    buf.append("breeds " + Dump.map(breeds) + "\n");
src/main/org/nlogo/api/Program.java:59:    buf.append("breeds-own " + Dump.map(breedsOwn) + "\n");
src/main/org/nlogo/api/Program.java:60:    buf.append("link-breeds " + Dump.map(linkBreeds) + "\n");
src/main/org/nlogo/api/Program.java:61:    buf.append("link-breeds-own " + Dump.map(linkBreedsOwn) + "\n");
src/main/org/nlogo/api/RemoteFile.java:71:      throw new java.io.IOException("Attempted to open an already open file");
src/main/org/nlogo/api/RemoteFile.java:86:        throw new java.io.IOException("Cannot write to remote files.");
src/main/org/nlogo/api/RemoteFile.java:88:        throw new java.io.IOException("Cannot append to remote files.");
src/main/org/nlogo/api/RemoteFile.java:97:    throw new java.io.IOException("Attempted to print to an unopened File");
src/main/org/nlogo/api/RemoteFile.java:103:    throw new java.io.IOException("Attempted to println to an unopened File");
src/main/org/nlogo/api/RemoteFile.java:109:    throw new java.io.IOException("Attempted to println to an unopened File");
src/main/org/nlogo/api/ScalaConversions.scala:60:    case _ => sys.error("don't know how to convert: " + a)
src/main/org/nlogo/api/ShapeList.java:14:  public static final String DEFAULT_SHAPE_NAME = "default";
src/main/org/nlogo/api/StringUtils.scala:33:          "invalid escape sequence: \\" + c)
src/main/org/nlogo/api/Token.scala:15:  val eof = new Token("",TokenType.EOF,"")(0,0,"")
src/main/org/nlogo/app/AboutWindow.scala:24:      " (" + Version.buildDate() + ")\n" +
src/main/org/nlogo/app/AboutWindow.scala:25:      "Extension API version: " + APIVersion.version + "\n" +
src/main/org/nlogo/app/AboutWindow.scala:30:    setTitle("About NetLogo")
src/main/org/nlogo/app/AboutWindow.scala:36:          "<html>\n"
src/main/org/nlogo/app/AboutWindow.scala:37:          + "<center>"
src/main/org/nlogo/app/AboutWindow.scala:39:          + " <font color=\"#666666\">(" + Version.buildDate()
src/main/org/nlogo/app/AboutWindow.scala:40:          + ")</font>" + "</b><br><br>\n"
src/main/org/nlogo/app/AboutWindow.scala:41:          + "<font size=-1><b>web site</b> "
src/main/org/nlogo/app/AboutWindow.scala:43:          + "<font color=\"#333333\">&copy 1999-2011 Uri Wilensky. All rights reserved.<br><br>"
src/main/org/nlogo/app/AboutWindow.scala:44:          + "Please cite as:<br>"
src/main/org/nlogo/app/AboutWindow.scala:46:          + "Center for Connected Learning and Computer-Based Modeling,<br>"
src/main/org/nlogo/app/AboutWindow.scala:47:          + "Northwestern University. Evanston, IL."
src/main/org/nlogo/app/AboutWindow.scala:48:          + "</center> </html>"
src/main/org/nlogo/app/AboutWindow.scala:61:    val graphic = new IconHolder(new ImageIcon(classOf[AboutWindow].getResource("/images/title.jpg"))){
src/main/org/nlogo/app/AboutWindow.scala:66:    val credits = new JTextArea(org.nlogo.util.Utils.getResourceAsString("/system/about.txt"),15,0){
src/main/org/nlogo/app/AboutWindow.scala:76:      add("Credits",new JScrollPane(credits){ setPreferredSize(new Dimension(200,230)) })
src/main/org/nlogo/app/AboutWindow.scala:77:      add("System",new JScrollPane(system){ setPreferredSize(new Dimension(200,230)) })
src/main/org/nlogo/app/AboutWindow.scala:103:            SysInfo.getJOGLInfoString + "\n" +SysInfo.getGLInfoString + "\n"
src/main/org/nlogo/app/AgentMonitor.scala:33:    override def classDisplayName = "Agent Monitor"
src/main/org/nlogo/app/AgentMonitorEditor.scala:32:      add(new javax.swing.JLabel("(no variables defined)"))
src/main/org/nlogo/app/AgentMonitorEditor.scala:158:      case O => "Globals Monitor"
src/main/org/nlogo/app/AgentMonitorEditor.scala:159:      case T => "Turtle Monitor"
src/main/org/nlogo/app/AgentMonitorEditor.scala:160:      case P => "Patch Monitor"
src/main/org/nlogo/app/AgentMonitorEditor.scala:161:      case L => "Link Monitor"
src/main/org/nlogo/app/AgentMonitorEditor.scala:202:    var header = "to __agentvareditor [] "
src/main/org/nlogo/app/AgentMonitorEditor.scala:204:      header += " __turtlecode "
src/main/org/nlogo/app/AgentMonitorEditor.scala:206:      header += " __patchcode "
src/main/org/nlogo/app/AgentMonitorEditor.scala:208:      header += "__linkcode "
src/main/org/nlogo/app/AgentMonitorEditor.scala:209:    header += "set " + variableName + " "
src/main/org/nlogo/app/AgentMonitorEditor.scala:210:    val footer = "__done end"
src/main/org/nlogo/app/AgentMonitorEditor.scala:408:        throw new org.nlogo.api.AgentException("expected a turtle or a who number")
src/main/org/nlogo/app/AgentMonitorEditor.scala:414:    if(text.equalsIgnoreCase("LINKS"))
src/main/org/nlogo/app/AgentMonitorEditor.scala:419:        throw new org.nlogo.api.AgentException("expected a link breed")
src/main/org/nlogo/app/AgentMonitorViewPanel.scala:46:  private class WatchMeAction extends javax.swing.AbstractAction("watch-me") {
src/main/org/nlogo/app/AgentMonitorWindow.scala:38:  if(!System.getProperty("os.name").startsWith("Mac"))
src/main/org/nlogo/app/AgentMonitorWindow.scala:106:      case O => "Globals"
src/main/org/nlogo/app/AgentMonitorWindow.scala:107:      case T if agent == null => "(no turtle)"
src/main/org/nlogo/app/AgentMonitorWindow.scala:108:      case T if agent.id == -1 => lastAliveTitle + " (dead)"
src/main/org/nlogo/app/AgentMonitorWindow.scala:112:      case L if agent == null => "(no link)"
src/main/org/nlogo/app/AgentMonitorWindow.scala:113:      case L if agent.id == -1 => lastAliveTitle + " (dead)"
src/main/org/nlogo/app/AgentMonitorWindow.scala:117:      case P if agent == null => "(no patch)"
src/main/org/nlogo/app/App.scala:31: * <p>See the "Controlling" section of the NetLogo User Manual
src/main/org/nlogo/app/App.scala:63:    System.setProperty("apple.awt.graphics.UseQuartz", "true")
src/main/org/nlogo/app/App.scala:64:    System.setProperty("apple.awt.showGrowBox", "true")
src/main/org/nlogo/app/App.scala:65:    System.setProperty("apple.laf.useScreenMenuBar", "true")
src/main/org/nlogo/app/App.scala:67:    System.setProperty("Quaqua.visualMargin", "1,1,1,1")
src/main/org/nlogo/app/App.scala:73:    if(System.getProperty("os.name").startsWith("Mac")) MacHandlers.init()
src/main/org/nlogo/app/App.scala:81:    pico.addScalaObject("org.nlogo.compiler.Compiler")
src/main/org/nlogo/app/App.scala:88:    pico.add("org.nlogo.gl.view.ViewManager")
src/main/org/nlogo/app/App.scala:95:          "org.nlogo.shape.editor.TurtleShapeManagerDialog",
src/main/org/nlogo/app/App.scala:101:          "org.nlogo.shape.editor.LinkShapeManagerDialog",
src/main/org/nlogo/app/App.scala:107:          "org.nlogo.sdm.gui.GUIAggregateManager",
src/main/org/nlogo/app/App.scala:113:          "org.nlogo.hubnet.server.gui.GUIHubNetManager",
src/main/org/nlogo/app/App.scala:118:    pico.add("org.nlogo.lab.gui.LabManager")
src/main/org/nlogo/app/App.scala:119:    pico.add("org.nlogo.properties.EditDialogFactory")
src/main/org/nlogo/app/App.scala:127:        val w = Class.forName("org.nlogo.headless.HeadlessWorkspace").
src/main/org/nlogo/app/App.scala:128:                getMethod("newInstance").invoke(null).asInstanceOf[Workspace]
src/main/org/nlogo/app/App.scala:163:      if (token == "--events") org.nlogo.window.Event.logEvents = true;
src/main/org/nlogo/app/App.scala:164:      else if (token == "--open" || token == "--launch") {
src/main/org/nlogo/app/App.scala:165:        commandLineModelIsLaunch = token == "--launch"
src/main/org/nlogo/app/App.scala:167:          throw new IllegalStateException("Error parsing command line arguments: you can only specify one model to open at startup.")
src/main/org/nlogo/app/App.scala:171:        if (!modelFile.exists) throw new IllegalStateException("File specified to open (" + token + ") was not found!")
src/main/org/nlogo/app/App.scala:174:      else if (token == "--magic") {
src/main/org/nlogo/app/App.scala:178:      else if (token == "--version") printAndExit(Version.version)
src/main/org/nlogo/app/App.scala:179:      else if (token == "--extension-api-version") printAndExit(APIVersion.version)
src/main/org/nlogo/app/App.scala:180:      else if (token == "--builddate") printAndExit(Version.buildDate)
src/main/org/nlogo/app/App.scala:181:      else if (token == "--logging") loggingName = nextToken()
src/main/org/nlogo/app/App.scala:182:      else if (token == "--log-directory") {
src/main/org/nlogo/app/App.scala:185:          "You need to initialize the logger using the --logging options before specifying a directory.",
src/main/org/nlogo/app/App.scala:186:          "NetLogo", JOptionPane.DEFAULT_OPTION)
src/main/org/nlogo/app/App.scala:191:        System.err.println("Error: Unknown command line argument: " + token)
src/main/org/nlogo/app/App.scala:196:          throw new IllegalStateException("Error parsing command line arguments: you can only specify one model to open at startup.")
src/main/org/nlogo/app/App.scala:201:          throw new IllegalStateException("File specified to open (" + token + ") was not found!")
src/main/org/nlogo/app/App.scala:215:              !ModelReader.parseVersion(map).startsWith("NetLogo")) {
src/main/org/nlogo/app/App.scala:228:              !ModelReader.parseVersion(map).startsWith("NetLogo")) {
src/main/org/nlogo/app/App.scala:258:  lazy val owner = new SimpleJobOwner("App", workspace.world.mainRNG, classOf[Observer])
src/main/org/nlogo/app/App.scala:335:          pico.add("org.nlogo.render.Renderer")
src/main/org/nlogo/app/App.scala:418:    if(! System.getProperty("os.name").startsWith("Mac")){ org.nlogo.awt.Utils.center(frame, null) }
src/main/org/nlogo/app/App.scala:424:    if(System.getProperty("os.name").startsWith("Mac")){ MacHandlers.ready(this) }
src/main/org/nlogo/app/App.scala:430:        JOptionPane.showInputDialog(null, "Enter your name:", "",
src/main/org/nlogo/app/App.scala:439:    else JOptionPane.showConfirmDialog(null, "The file " + properties + " does not exist.",
src/main/org/nlogo/app/App.scala:440:      "NetLogo", JOptionPane.DEFAULT_OPTION)
src/main/org/nlogo/app/App.scala:511:        if (logger==null) Logger.zipSessionFiles(System.getProperty("java.io.tmpdir"), e.args(0).toString)
src/main/org/nlogo/app/App.scala:514:        if(logger==null) Logger.deleteSessionFiles(System.getProperty("java.io.tmpdir"))
src/main/org/nlogo/app/App.scala:525:    else commandLater("print \"can't, new model\"")
src/main/org/nlogo/app/App.scala:531:    if (matches.isEmpty) commandLater("print \"no models matching \\\"" + name + "\\\" found\"")
src/main/org/nlogo/app/App.scala:536:          val i = org.nlogo.swing.OptionDialog.showAsList(frame, "Magic Model Matcher", "You must choose!", matches.toArray)
src/main/org/nlogo/app/App.scala:551:      "Change Language", "Choose a new language.", languages.asInstanceOf[Array[Object]])
src/main/org/nlogo/app/App.scala:554:      val netLogoPrefs = java.util.prefs.Preferences.userRoot.node("/org/nlogo/NetLogo")
src/main/org/nlogo/app/App.scala:555:      netLogoPrefs.put("user.language", chosenLocale.getLanguage)
src/main/org/nlogo/app/App.scala:556:      netLogoPrefs.put("user.country", chosenLocale.getCountry)
src/main/org/nlogo/app/App.scala:558:    val restart = "Langauge changed.\nYou must restart NetLogo for the changes to take effect."
src/main/org/nlogo/app/App.scala:563:    fileMenu.openFromPath(workspace.getModelPath.replaceFirst(" \\S+.nlogo$", " Index.nlogo"), workspace.getModelType)
src/main/org/nlogo/app/App.scala:567:    val path = workspace.getModelPath.replaceFirst(".nlogo$", "")
src/main/org/nlogo/app/App.scala:571:      workspace.getModelPath.replaceFirst(" \\d+.nlogo$", " " + modelNumber + ".nlogo"), workspace.getModelType)
src/main/org/nlogo/app/App.scala:669:    if(workspace.getModelFileName() == null) "NetLogo"
src/main/org/nlogo/app/App.scala:673:      if(! System.getProperty("os.name").startsWith("Mac")) title = title + " - " + "NetLogo"
src/main/org/nlogo/app/App.scala:676:      else title = "NetLogo " + (8212.toChar) + " " + title
src/main/org/nlogo/app/App.scala:679:      if (workspace.getModelType() == ModelType.NORMAL) title += " {" + workspace.getModelDir() + "}"
src/main/org/nlogo/app/App.scala:704:            RuntimeErrorDialog.show("Runtime Error", null, null, Thread.currentThread, t))
src/main/org/nlogo/app/App.scala:715:            RuntimeErrorDialog.show("Internal Error", null, null, Thread.currentThread, t))
src/main/org/nlogo/app/App.scala:749:      try fileMenu.openFromSource(source, path, "Loading...", modelType)
src/main/org/nlogo/app/App.scala:839:    if (java.awt.EventQueue.isDispatchThread()) throw new IllegalStateException("can't call on event thread")
src/main/org/nlogo/app/App.scala:876:        "button '" + name + "' not found")}
src/main/org/nlogo/app/App.scala:944:  setIconImage(org.nlogo.awt.Utils.loadImageResource("/images/arrowhead.gif"))
src/main/org/nlogo/app/AppletSaver.scala:18:  val siteLink = "<a target=\"_blank\" href=\"" + url + "\">NetLogo</a>"
src/main/org/nlogo/app/AppletSaver.scala:19:  val eol = System.getProperty("line.separator")
src/main/org/nlogo/app/AppletSaver.scala:61:            frame, "Applet Saved",
src/main/org/nlogo/app/AppletSaver.scala:62:            "The HTML file you have saved contains instructions for " +
src/main/org/nlogo/app/AppletSaver.scala:63:            "arranging the necessary files on your web server.  "  +
src/main/org/nlogo/app/AppletSaver.scala:64:            "You may view or edit the HTML file in any text editor.",
src/main/org/nlogo/app/AppletSaver.scala:72:        } } }, "Saving...")
src/main/org/nlogo/app/AppletSaver.scala:78:    paragraph("In order for this to work, this file and the file HubNet.jar",
src/main/org/nlogo/app/AppletSaver.scala:79:              "must be in the same directory.  (You can copy HubNet.jar",
src/main/org/nlogo/app/AppletSaver.scala:80:              "from the directory where you installed NetLogo.)")
src/main/org/nlogo/app/AppletSaver.scala:81:    paragraph("On some systems, you can test the applet locally on your computer",
src/main/org/nlogo/app/AppletSaver.scala:82:              "before uploading it to a web server.  It doesn't work on all systems,",
src/main/org/nlogo/app/AppletSaver.scala:83:              "though, so if it doesn't work from your hard drive, please try",
src/main/org/nlogo/app/AppletSaver.scala:84:              "uploading it to a web server.")
src/main/org/nlogo/app/AppletSaver.scala:85:    paragraph("You don't need to include everything in this file in your page.",
src/main/org/nlogo/app/AppletSaver.scala:86:              "If you want, you can just take the HTML code beginning with",
src/main/org/nlogo/app/AppletSaver.scala:87:              "&lt;applet&gt; and ending with &lt;/applet&gt;, and paste it into any HTML",
src/main/org/nlogo/app/AppletSaver.scala:88:              "file you want.  It's even OK to put multiple &lt;applet&gt; tags",
src/main/org/nlogo/app/AppletSaver.scala:89:              "on a single page.")
src/main/org/nlogo/app/AppletSaver.scala:90:    paragraph("If HubNet.jar is in a different directory you must",
src/main/org/nlogo/app/AppletSaver.scala:91:              "modify the archive= line in the HTML code to point",
src/main/org/nlogo/app/AppletSaver.scala:92:              "to its actual location. (For example, if you have ",
src/main/org/nlogo/app/AppletSaver.scala:93:              "multiple applets in different directories on the same", 
src/main/org/nlogo/app/AppletSaver.scala:94:              "web server, you may want to put a single copy of",
src/main/org/nlogo/app/AppletSaver.scala:95:              "HubNet.jar in one central place and change the", 
src/main/org/nlogo/app/AppletSaver.scala:96:              "archive= lines of all the HTML files to point to that",
src/main/org/nlogo/app/AppletSaver.scala:97:              "one central copy.  This will save disk space for you and",
src/main/org/nlogo/app/AppletSaver.scala:98:              "download time for your users.)")
src/main/org/nlogo/app/AppletSaver.scala:99:    paragraph("To run this activity you must run the server in NetLogo",
src/main/org/nlogo/app/AppletSaver.scala:100:              "on the same server that you are hosting the webpage. This",
src/main/org/nlogo/app/AppletSaver.scala:101:              "webpage must be accessible to the webserver user.  To login",
src/main/org/nlogo/app/AppletSaver.scala:102:              "users should navigate to this webpage and enter a user name",
src/main/org/nlogo/app/AppletSaver.scala:103:              "and the port as displayed in the HubNet Control Center.")
src/main/org/nlogo/app/AppletSaver.scala:104:    applet("org.nlogo.hubnet.client.ClientApplet", "HubNet.jar", width, height)
src/main/org/nlogo/app/AppletSaver.scala:105:    line("<p>powered by " + siteLink + "</p>")
src/main/org/nlogo/app/AppletSaver.scala:107:    line("</body>")
src/main/org/nlogo/app/AppletSaver.scala:108:    line("</html>")
src/main/org/nlogo/app/AppletSaver.scala:118:    paragraph("In order for this to work, this file, your model file", 
src/main/org/nlogo/app/AppletSaver.scala:119:              "(" + fileName + "), and the file NetLogoLite.jar",
src/main/org/nlogo/app/AppletSaver.scala:120:              "must all be in the same directory.  (You can copy NetLogoLite.jar",
src/main/org/nlogo/app/AppletSaver.scala:121:              "from the directory where you installed NetLogo.)")
src/main/org/nlogo/app/AppletSaver.scala:129:          str ++= "and "
src/main/org/nlogo/app/AppletSaver.scala:132:      str ++= (if (size > 1) "extensions." else "extension.")
src/main/org/nlogo/app/AppletSaver.scala:133:      paragraph("The applet will also need access to the ", str.toString,
src/main/org/nlogo/app/AppletSaver.scala:134:                "Copy the entire directory for each required extension into the same",
src/main/org/nlogo/app/AppletSaver.scala:135:                "directory as the applet.")
src/main/org/nlogo/app/AppletSaver.scala:137:    paragraph("On some systems, you can test the applet locally on your computer",
src/main/org/nlogo/app/AppletSaver.scala:138:              "before uploading it to a web server.  It doesn't work on all systems,",
src/main/org/nlogo/app/AppletSaver.scala:139:              "though, so if it doesn't work from your hard drive, please try",
src/main/org/nlogo/app/AppletSaver.scala:140:              "uploading it to a web server.")
src/main/org/nlogo/app/AppletSaver.scala:141:    paragraph("You don't need to include everything in this file in your page.",
src/main/org/nlogo/app/AppletSaver.scala:142:              "If you want, you can just take the HTML code beginning with",
src/main/org/nlogo/app/AppletSaver.scala:143:              "&lt;applet&gt; and ending with &lt;/applet&gt;, and paste it into any HTML",
src/main/org/nlogo/app/AppletSaver.scala:144:              "file you want.  It's even OK to put multiple &lt;applet&gt; tags",
src/main/org/nlogo/app/AppletSaver.scala:145:              "on a single page.")
src/main/org/nlogo/app/AppletSaver.scala:146:    paragraph("If NetLogoLite.jar and your model are in different",
src/main/org/nlogo/app/AppletSaver.scala:147:              "directories, you must modify the archive= and value= lines",
src/main/org/nlogo/app/AppletSaver.scala:148:              "in the HTML code to point to their actual locations.",
src/main/org/nlogo/app/AppletSaver.scala:149:              "(For example, if you have multiple applets in different",
src/main/org/nlogo/app/AppletSaver.scala:150:              "directories on the same web server, you may want to put ",
src/main/org/nlogo/app/AppletSaver.scala:151:              "a single copy of NetLogoLite.jar in one central place and",
src/main/org/nlogo/app/AppletSaver.scala:152:              "change the archive= lines of all the HTML files to point",
src/main/org/nlogo/app/AppletSaver.scala:153:              "to that one central copy.  This will save disk space for",
src/main/org/nlogo/app/AppletSaver.scala:154:              "you and download time for your users.)")
src/main/org/nlogo/app/AppletSaver.scala:155:    applet("org.nlogo.lite.Applet", "NetLogoLite.jar", width, height, 
src/main/org/nlogo/app/AppletSaver.scala:156:           List(("DefaultModel", org.nlogo.util.Utils.escapeSpacesInURL(fileName)),
src/main/org/nlogo/app/AppletSaver.scala:157:                ("java_arguments", "-Djnlp.packEnabled=true")),
src/main/org/nlogo/app/AppletSaver.scala:159:    line("<p>powered by")
src/main/org/nlogo/app/AppletSaver.scala:162:    line("<p>view/download model file:")
src/main/org/nlogo/app/AppletSaver.scala:163:    line("<a href=\"" + org.nlogo.util.Utils.escapeSpacesInURL(fileName) +
src/main/org/nlogo/app/AppletSaver.scala:164:         "\">" + fileName + "</a></p>")
src/main/org/nlogo/app/AppletSaver.scala:166:    line(InfoFormatter.toInnerHtml("# PROCEDURES"))
src/main/org/nlogo/app/AppletSaver.scala:168:    line("</body>")
src/main/org/nlogo/app/AppletSaver.scala:169:    line("</html>")
src/main/org/nlogo/app/AppletSaver.scala:173:    line("<html>")
src/main/org/nlogo/app/AppletSaver.scala:174:    line("<head>")
src/main/org/nlogo/app/AppletSaver.scala:175:    line("<title>" + modelName + "</title>")
src/main/org/nlogo/app/AppletSaver.scala:178:    line("</head>")
src/main/org/nlogo/app/AppletSaver.scala:179:    line("<body>")
src/main/org/nlogo/app/AppletSaver.scala:181:    line("<p>This page was automatically generated by " + Version.version() + ".</p>")
src/main/org/nlogo/app/AppletSaver.scala:184:    line("<p>The applet requires Java 5 or higher.")
src/main/org/nlogo/app/AppletSaver.scala:185:    line("Java must be enabled in your browser settings.")
src/main/org/nlogo/app/AppletSaver.scala:186:    line("Mac users must have Mac OS X 10.4 or higher.")
src/main/org/nlogo/app/AppletSaver.scala:187:    line("Windows and Linux users may obtain the latest Java from")
src/main/org/nlogo/app/AppletSaver.scala:190:    line("<p><hr>")
src/main/org/nlogo/app/AppletSaver.scala:200:    line("<applet code=\"" + code + "\"")
src/main/org/nlogo/app/AppletSaver.scala:201:    line("        archive=" + (archive :: additionalJars.toList).mkString("\"", ",", "\""))
src/main/org/nlogo/app/AppletSaver.scala:202:    line("        width=\"" + width + "\" height=\"" + height + "\">")
src/main/org/nlogo/app/AppletSaver.scala:204:      line("  <param name=\"" + param._1 + "\"")
src/main/org/nlogo/app/AppletSaver.scala:205:      line("         value=\"" + param._2 + "\">")
src/main/org/nlogo/app/AppletSaver.scala:207:    line("</applet>")
src/main/org/nlogo/app/AppletSaver.scala:213:    line(lines.mkString("<p><font size=\"-1\">", eol, "</font></p>"))
src/main/org/nlogo/app/CommandCenter.scala:37:      putClientProperty("Quaqua.Component.visualMargin", new Insets(0, 0, 0, 0))
src/main/org/nlogo/app/CommandCenter.scala:46:        putClientProperty("Quaqua.Button.style", "square")
src/main/org/nlogo/app/CommandCenter.scala:47:        putClientProperty("Quaqua.Component.visualMargin", new Insets(0, 0, 0, 0))
src/main/org/nlogo/app/CommandCenter.scala:56:      putClientProperty("Quaqua.Button.style", "square")
src/main/org/nlogo/app/CommandCenter.scala:57:      putClientProperty("Quaqua.Component.visualMargin", new Insets(0, 0, 0, 0))
src/main/org/nlogo/app/CommandCenter.scala:89:    if(System.getProperty("os.name").startsWith("Mac"))
src/main/org/nlogo/app/CommandCenter.scala:114:              workspace.guessExportName("command center output.txt")))
src/main/org/nlogo/app/CommandLine.java:85:    return "Command Center";
src/main/org/nlogo/app/CommandLine.java:157:    String header = "to __commandline [] ";
src/main/org/nlogo/app/CommandLine.java:158:    String footer = "__done end";
src/main/org/nlogo/app/CommandLine.java:160:      header += "__observercode ";
src/main/org/nlogo/app/CommandLine.java:162:      header += "__turtlecode ";
src/main/org/nlogo/app/CommandLine.java:164:      header += "__patchcode ";
src/main/org/nlogo/app/CommandLine.java:166:      header += "__linkcode ";
src/main/org/nlogo/app/CommandLine.java:215:                    ("", "ERROR: " + error().getMessage(), true, true),
src/main/org/nlogo/app/DirtyMonitor.scala:7:    val df = new java.text.SimpleDateFormat("yyyy-MM-dd.HH_mm_ss",
src/main/org/nlogo/app/DirtyMonitor.scala:9:    System.getProperty("java.io.tmpdir") +
src/main/org/nlogo/app/DirtyMonitor.scala:10:      System.getProperty("file.separator") + "autosave_" +
src/main/org/nlogo/app/DirtyMonitor.scala:11:      df.format(new java.util.Date()) + ".nlogo"
src/main/org/nlogo/app/DirtyMonitor.scala:34:      frame.getRootPane().putClientProperty("windowModified", dirty)
src/main/org/nlogo/app/FileMenu.java:63:    if (!System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/app/FileMenu.java:76:    return org.nlogo.api.Version.is3D() ? "nlogo3d" : "nlogo";
src/main/org/nlogo/app/FileMenu.java:80:    return "/system/empty." + modelSuffix();
src/main/org/nlogo/app/FileMenu.java:170:      openFromSource(source, modelPath, "Loading...",
src/main/org/nlogo/app/FileMenu.java:250:      suggestedFileName = suggestedFileName + suffix + ".html";
src/main/org/nlogo/app/FileMenu.java:254:          (FileMenu.this, "Saving as Applet", java.awt.FileDialog.SAVE,
src/main/org/nlogo/app/FileMenu.java:271:      String exportPath = getExportPath("-client");
src/main/org/nlogo/app/FileMenu.java:296:          (FileMenu.this, "Export World", java.awt.FileDialog.SAVE,
src/main/org/nlogo/app/FileMenu.java:297:              app.workspace().guessExportName("world.csv"));
src/main/org/nlogo/app/FileMenu.java:311:              "Exporting...");
src/main/org/nlogo/app/FileMenu.java:328:              (FileMenu.this, "Export View",
src/main/org/nlogo/app/FileMenu.java:330:                  app.workspace().guessExportName("view.png"));
src/main/org/nlogo/app/FileMenu.java:339:                        (exportPath, "png");
src/main/org/nlogo/app/FileMenu.java:345:              "Exporting...");
src/main/org/nlogo/app/FileMenu.java:362:              (FileMenu.this, "Export Interface",
src/main/org/nlogo/app/FileMenu.java:364:                  app.workspace().guessExportName("interface.png"));
src/main/org/nlogo/app/FileMenu.java:378:              "Exporting...");
src/main/org/nlogo/app/FileMenu.java:394:          (FileMenu.this, "Export Output", java.awt.FileDialog.SAVE,
src/main/org/nlogo/app/FileMenu.java:395:              app.workspace().guessExportName("output.txt"));
src/main/org/nlogo/app/FileMenu.java:404:              "Exporting...");
src/main/org/nlogo/app/FileMenu.java:417:          (FileMenu.this, "Export Plot", java.awt.FileDialog.SAVE,
src/main/org/nlogo/app/FileMenu.java:418:              app.workspace().guessExportName("plot.csv"));
src/main/org/nlogo/app/FileMenu.java:429:              "Exporting...");
src/main/org/nlogo/app/FileMenu.java:442:          (FileMenu.this, "Export All Plots", java.awt.FileDialog.SAVE,
src/main/org/nlogo/app/FileMenu.java:443:              app.workspace().guessExportName("plots.csv"));
src/main/org/nlogo/app/FileMenu.java:454:              "Exporting...");
src/main/org/nlogo/app/FileMenu.java:467:          FileMenu.this, "Import World", java.awt.FileDialog.LOAD, null);
src/main/org/nlogo/app/FileMenu.java:483:              "Importing...");
src/main/org/nlogo/app/FileMenu.java:499:          FileMenu.this, "Import Patch Colors", java.awt.FileDialog.LOAD, null);
src/main/org/nlogo/app/FileMenu.java:521:              "Importing Patch Colors...");
src/main/org/nlogo/app/FileMenu.java:537:          FileMenu.this, "Import Patch Colors RGB", java.awt.FileDialog.LOAD, null);
src/main/org/nlogo/app/FileMenu.java:559:              "Importing Patch Colors...");
src/main/org/nlogo/app/FileMenu.java:575:          FileMenu.this, "Import Drawing", java.awt.FileDialog.LOAD, null);
src/main/org/nlogo/app/FileMenu.java:591:              "Importing Drawing...");
src/main/org/nlogo/app/FileMenu.java:607:          FileMenu.this, "Import HubNet Client Interface", java.awt.FileDialog.LOAD, null);
src/main/org/nlogo/app/FileMenu.java:613:                  "Import HubNet Client",
src/main/org/nlogo/app/FileMenu.java:614:                  "Which section would you like to import from?",
src/main/org/nlogo/app/FileMenu.java:630:                "Importing Drawing...");
src/main/org/nlogo/app/FileMenu.java:667:   * This is the model name if there is one, "Untitled.nlogo" otherwise.
src/main/org/nlogo/app/FileMenu.java:672:      return "Untitled." + modelSuffix();
src/main/org/nlogo/app/FileMenu.java:692:      openFromSource(source, null, "Clearing...",
src/main/org/nlogo/app/FileMenu.java:698:      openFromSource(source, null, "Loading...",
src/main/org/nlogo/app/FileMenu.java:720:            ("couldn't open: '" + path + "'");
src/main/org/nlogo/app/FileMenu.java:722:      openFromSource(source, path, "Loading...", modelType);
src/main/org/nlogo/app/FileMenu.java:737:   *                  example: "/home/mmh/models/My_Model.nlogo". This may be null, if,
src/main/org/nlogo/app/FileMenu.java:739:   * @param message   the message to display in the "loading" modal dialog.
src/main/org/nlogo/app/FileMenu.java:753:    if (version == null || !version.startsWith("NetLogo")) {
src/main/org/nlogo/app/FileMenu.java:864:            "Saving...");
src/main/org/nlogo/app/FileMenu.java:867:          (this, "Save failed.  Error: " + saver.getException().getMessage(),
src/main/org/nlogo/app/FileMenu.java:868:              "NetLogo", javax.swing.JOptionPane.ERROR_MESSAGE);
src/main/org/nlogo/app/FileMenu.java:885:      String message = "There is a movie in progress. " +
src/main/org/nlogo/app/FileMenu.java:886:          "Are you sure you want to exit this model? " +
src/main/org/nlogo/app/FileMenu.java:887:          "You will lose the contents of your movie.";
src/main/org/nlogo/app/FileMenu.java:889:          (this, "NetLogo", message, options) == 1) {
src/main/org/nlogo/app/FileMenu.java:903:    return org.nlogo.swing.FileDialog.show(this, "Open",
src/main/org/nlogo/app/FileMenu.java:921:          this, "Save As", java.awt.FileDialog.SAVE,
src/main/org/nlogo/app/FileMenu.java:937:      String[] options = {"Try Again"};
src/main/org/nlogo/app/FileMenu.java:938:      String message = "You must choose a name ending with: ." + modelSuffix();
src/main/org/nlogo/app/FileMenu.java:947:    String message = "Do you want to save the changes you made to this model?";
src/main/org/nlogo/app/FileMenu.java:949:        (this, "NetLogo", message, options)) {
src/main/org/nlogo/app/FileMenu.java:963:      String message = "This model was made with " + savedVersion + ". "
src/main/org/nlogo/app/FileMenu.java:964:          + "If you save it in " + org.nlogo.api.Version.version()
src/main/org/nlogo/app/FileMenu.java:965:          + " it may not work in the old version anymore.";
src/main/org/nlogo/app/FileMenu.java:967:          (this, "NetLogo", message, options) != 0) {
src/main/org/nlogo/app/FileMenu.java:977:    String message = "You are attempting to open a model that was created" +
src/main/org/nlogo/app/FileMenu.java:978:        " in a newer version of NetLogo.  (This is " +
src/main/org/nlogo/app/FileMenu.java:980:        "the model was created in " + version + ".) " +
src/main/org/nlogo/app/FileMenu.java:981:        "NetLogo can try to open the model, but it may " +
src/main/org/nlogo/app/FileMenu.java:982:        "or may not work.";
src/main/org/nlogo/app/FileMenu.java:984:        (this, "NetLogo", message, options) != 0) {
src/main/org/nlogo/app/FileMenu.java:992:    String message = "You are attempting to open a model that was created" +
src/main/org/nlogo/app/FileMenu.java:993:        " in a 3D version of NetLogo.  (This is " +
src/main/org/nlogo/app/FileMenu.java:995:        "the model was created in " + version + ".) " +
src/main/org/nlogo/app/FileMenu.java:996:        "NetLogo can try to open the model, but it may " +
src/main/org/nlogo/app/FileMenu.java:997:        "or may not work.";
src/main/org/nlogo/app/FileMenu.java:999:        (this, "NetLogo", message, options) != 0) {
src/main/org/nlogo/app/FileMenu.java:1007:    String message = "You are attempting to open a 2D model in " +
src/main/org/nlogo/app/FileMenu.java:1009:        "You might need to make changes before it will work in 3D.";
src/main/org/nlogo/app/FileMenu.java:1011:        (this, "NetLogo", message, options) != 0) {
src/main/org/nlogo/app/FileMenu.java:1020:        (this, "NetLogo",
src/main/org/nlogo/app/FileMenu.java:1021:            "The file is not a valid NetLogo model file.",
src/main/org/nlogo/app/FindDialog.java:25:      throw new IllegalStateException("FindDialog was never initialized");
src/main/org/nlogo/app/FindDialog.java:56:                      ("/images/magnify.gif")));
src/main/org/nlogo/app/FindDialog.java:81:                      ("/images/magnify.gif")));
src/main/org/nlogo/app/FindDialog.java:331:          throw new IllegalStateException("Replace All replaced too many items.");
src/main/org/nlogo/app/HelpMenu.scala:29:           "docs/index.html"))
src/main/org/nlogo/app/HelpMenu.scala:32:           "docs/index2.html"))
src/main/org/nlogo/app/HelpMenu.scala:40:  if(!System.getProperty("os.name").startsWith("Mac"))
src/main/org/nlogo/app/HelpMenu.scala:42:      action("About " + Version.version + "...",
src/main/org/nlogo/app/HistoryPrompt.scala:12:      classOf[HistoryPrompt].getResource("/images/popup.gif"))
src/main/org/nlogo/app/HistoryPrompt.scala:24:  putClientProperty("Quaqua.Button.style", "square")
src/main/org/nlogo/app/IncludesMenu.scala:4:extends org.nlogo.swing.ToolBarMenu("Includes")
src/main/org/nlogo/app/IncludesMenu.scala:28:      val nullItem = new javax.swing.JMenuItem("<No Includes Defined>")
src/main/org/nlogo/app/IncludesMenu.scala:36:      for(include <- includes.asScala if include.endsWith(".nls") && include.size > 4)
src/main/org/nlogo/app/IncludesMenu.scala:65:  extends javax.swing.AbstractAction("Open Source File...")
src/main/org/nlogo/app/IncludesMenu.scala:70:            IncludesMenu.this, "Open: NetLogo Source File",
src/main/org/nlogo/app/IncludesMenu.scala:73:        if(path.endsWith(".nls"))
src/main/org/nlogo/app/IncludesMenu.scala:76:          javax.swing.JOptionPane.showMessageDialog(target, "Filename must end in *.nls")
src/main/org/nlogo/app/IncludesMenu.scala:86:  extends javax.swing.AbstractAction("New Source File") {
src/main/org/nlogo/app/InfoConverter.scala:26:    val anythingButLowercaseLetter = """[\p{Print}&&\P{Lower}]*"""
src/main/org/nlogo/app/InfoConverter.scala:29:    replace("""(?m)^(\s*\n|\A)(""" + anythingButLowercaseLetter + "[A-Z]" + anythingButLowercaseLetter + ")$",
src/main/org/nlogo/app/InfoFormatter.scala:22:  def styleSheetFile: CSS = org.nlogo.util.Utils.getResourceAsString("/system/info.css")
src/main/org/nlogo/app/InfoFormatter.scala:25:  def styleSheet(fontSize: Int): CSS = "<style type=\"text/css\">\n<!--\n"+
src/main/org/nlogo/app/InfoFormatter.scala:27:            replace("{BODY-FONT-SIZE}", fontSize.toString).
src/main/org/nlogo/app/InfoFormatter.scala:28:            replace("{H1-FONT-SIZE}", (fontSize * 1.5).toInt.toString).
src/main/org/nlogo/app/InfoFormatter.scala:29:            replace("{H2-FONT-SIZE}", (fontSize * 1.25).toInt.toString).
src/main/org/nlogo/app/InfoFormatter.scala:30:            replace("{H3-FONT-SIZE}", fontSize.toString) + "\n-->\n</style>"
src/main/org/nlogo/app/InfoFormatter.scala:39:    "<html><head>"+styleSheet(fontSize)+"</head><body>"+body+"</body></html>"
src/main/org/nlogo/app/InfoTab.scala:24:  val baseDocUrl = "docs/infotab.html"
src/main/org/nlogo/app/InfoTab.scala:53:    setContentType("text/html")
src/main/org/nlogo/app/InfoTab.scala:58:    BrowserLauncher.openURL(this, baseDocUrl, "#information", true)
src/main/org/nlogo/app/InfoTab.scala:60:  helpButton.setIcon(new ImageIcon(classOf[FindDialog].getResource("/images/questionmark.gif")))
src/main/org/nlogo/app/InfoTab.scala:168:        val selection = OptionDialog.show(Utils.getFrame(InfoTab.this), "Bad URL", message,
src/main/org/nlogo/app/InfoTab.scala:170:        if(selection == 1 /*Help*/) BrowserLauncher.openURL(this, baseDocUrl, "#infotabLinks", true)
src/main/org/nlogo/app/InfoTab.scala:188:    putValue(Action.SMALL_ICON, new ImageIcon(classOf[InterfaceTab].getResource("/images/edit.gif")))
src/main/org/nlogo/app/InterfacePanel.java:90:    JMenuItem exportItem = new javax.swing.JMenuItem("Export Interface...");
src/main/org/nlogo/app/InterfacePanel.java:140:    } else if (type.equalsIgnoreCase("SLIDER")) {
src/main/org/nlogo/app/InterfacePanel.java:151:    } else if (type.equals("BUTTON")) {
src/main/org/nlogo/app/InterfacePanel.java:153:    } else if (type.equals("PLOT")) {
src/main/org/nlogo/app/InterfacePanel.java:155:    } else if (type.equals("MONITOR")) {
src/main/org/nlogo/app/InterfacePanel.java:179:          ("unknown widget type: " + type);
src/main/org/nlogo/app/InterfacePanel.java:261:        !type.equals("GRAPHICS-WINDOW") &&
src/main/org/nlogo/app/InterfacePanel.java:266:    if (type.equals("GRAPHICS-WINDOW")) {
src/main/org/nlogo/app/InterfacePanel.java:341:              "png", e.stream);
src/main/org/nlogo/app/InterfacePanel.java:352:              (this, "Export Interface",
src/main/org/nlogo/app/InterfacePanel.java:354:                  workspace.guessExportName("interface.png"));
src/main/org/nlogo/app/InterfacePanel.java:368:              "Exporting...");
src/main/org/nlogo/app/InterfacePanel.java:479:    return (!widget.equals("Output")) || (getOutputWidget() == null);
src/main/org/nlogo/app/InterfaceTab.scala:117:  private class CommandCenterLocationToggleAction extends AbstractAction("Toggle") {
src/main/org/nlogo/app/InterfaceTab.scala:118:    putValue(Action.SMALL_ICON,new ImageIcon(classOf[InterfaceTab].getResource("/images/toggle.gif")))
src/main/org/nlogo/app/InterfaceToolBar.scala:36:  if(System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/app/InterfaceToolBar.scala:46:    putValue(Action.SMALL_ICON, new ImageIcon(classOf[InterfaceToolBar].getResource("/images/edit.gif")))
src/main/org/nlogo/app/InterfaceToolBar.scala:53:    putValue(Action.SMALL_ICON, new ImageIcon(classOf[InterfaceToolBar].getResource("/images/add.gif")))
src/main/org/nlogo/app/InterfaceToolBar.scala:88:    putValue(Action.SMALL_ICON, new ImageIcon(classOf[InterfaceToolBar].getResource("/images/delete.gif")))
src/main/org/nlogo/app/LinePrompt.scala:28:      val popMenu = new JPopupMenu("Ask who?")
src/main/org/nlogo/app/ModelSaver.scala:88:      buf ++= (if(app.tabs.workspace.snapOn) "1\n" else "0\n")
src/main/org/nlogo/app/ModelsLibraryDialog.java:67:      new javax.swing.AbstractAction("toggle-or-open") {
src/main/org/nlogo/app/ModelsLibraryDialog.java:135:            .getName().equals("Curricular Models")) {
src/main/org/nlogo/app/ModelsLibraryDialog.java:140:            .getName().equals("Sample Models")) {
src/main/org/nlogo/app/ModelsLibraryDialog.java:145:            .getName().equals("3D")) {
src/main/org/nlogo/app/ModelsLibraryDialog.java:155:            "toggle-or-open");
src/main/org/nlogo/app/ModelsLibraryDialog.java:157:    tree.getActionMap().put("toggle-or-open", toggleOrOpenAction);
src/main/org/nlogo/app/ModelsLibraryDialog.java:207:                (AboutWindow.class.getResource("/images/magnify.gif"))));
src/main/org/nlogo/app/ModelsLibraryDialog.java:227:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/app/ModelsLibraryDialog.java:436:      textArea.setContentType("text/html");
src/main/org/nlogo/app/ModelsLibraryDialog.java:466:            "<html>\n"
src/main/org/nlogo/app/ModelsLibraryDialog.java:467:                + "<head>\n"
src/main/org/nlogo/app/ModelsLibraryDialog.java:468:                + "<style>body {font-family: Dialog; font-size: 12pt; }</style>"
src/main/org/nlogo/app/ModelsLibraryDialog.java:469:                + "</head>"
src/main/org/nlogo/app/ModelsLibraryDialog.java:470:                + "<body>\n"
src/main/org/nlogo/app/ModelsLibraryDialog.java:471:                + "<h2>" + selected.getName() + "</h2>\n"
src/main/org/nlogo/app/ModelsLibraryDialog.java:473:                + "</body>"
src/main/org/nlogo/app/ModelsLibraryDialog.java:474:                + "</html>"
src/main/org/nlogo/app/ModelsLibraryDialog.java:498:        String text = org.nlogo.util.Utils.getResourceAsString("/system/library.html");
src/main/org/nlogo/app/ModelsLibraryDialog.java:691:            infoMap.get(path.substring(path.indexOf("models"))
src/main/org/nlogo/app/ModelsLibraryDialog.java:692:                .replace(System.getProperty("file.separator"), "/"));
src/main/org/nlogo/app/ModelsLibraryIndexReader.scala:12:    val input = io.Source.fromFile("models/index.txt").getLines
src/main/org/nlogo/app/package.html:5:<body bgcolor="white">
src/main/org/nlogo/app/ProceduresTab.scala:55:        "/images/check.gif")))
src/main/org/nlogo/app/ProceduresTab.scala:85:      try workspace.attachModelDir("foo.nlogo")
src/main/org/nlogo/app/ProceduresTab.scala:139:  def classDisplayName = "Code"
src/main/org/nlogo/app/ProceduresToHtml.scala:15:    pico.addScalaObject("org.nlogo.compiler.Compiler")
src/main/org/nlogo/app/ProceduresToHtml.scala:26:    val result = new StringBuilder("<pre>")
src/main/org/nlogo/app/ProceduresToHtml.scala:35:    result ++= "\n</pre>\n"
src/main/org/nlogo/app/ProceduresToHtml.scala:40:    "<font color=\"#" + hexColor + "\">" + source.map(escape).mkString + "</font>"
src/main/org/nlogo/app/ProceduresToHtml.scala:42:  private def toHex(i:Int) = (if(i < 16) "0" else "") + i.toHexString
src/main/org/nlogo/app/ProceduresToHtml.scala:44:  private val escapeMap = Map('&' -> "&amp;",
src/main/org/nlogo/app/ProceduresToHtml.scala:45:                              '<' -> "&lt;",
src/main/org/nlogo/app/ProceduresToHtml.scala:46:                              '>' -> "&gt;",
src/main/org/nlogo/app/ProceduresToHtml.scala:47:                              '"' -> "&quot;")
src/main/org/nlogo/app/SmartIndenter.scala:29:      if(code.getLineOfText(lineNum).trim.equalsIgnoreCase("end"))
src/main/org/nlogo/app/SmartIndenter.scala:40:    if(List("]",")","end").contains(wordUpToCursor)) {
src/main/org/nlogo/app/SmartIndenter.scala:87:       token.name.equalsIgnoreCase("breed"))
src/main/org/nlogo/app/SmartIndenter.scala:192:      (t.name.equalsIgnoreCase("to") || t.name.equalsIgnoreCase("to-report"))
src/main/org/nlogo/app/SmartIndenter.scala:197:      t.name.equalsIgnoreCase("end")
src/main/org/nlogo/app/Splash.scala:25:      Splash.getClass.getResource("/images/title.jpg"))
src/main/org/nlogo/app/Splash.scala:30:      val version = "Version " + Version.versionNumberOnly
src/main/org/nlogo/app/Splash.scala:33:      if(date.startsWith("INTERIM DEVEL BUILD"))
src/main/org/nlogo/app/Tabs.scala:170:    filename.substring(filename.lastIndexOf(System.getProperty("file.separator")) + 1, filename.length)
src/main/org/nlogo/app/Tabs.scala:172:  val printAction = PimpedAction("print-current-tab") { _ =>
src/main/org/nlogo/app/TemporaryProceduresTab.scala:9:  val NewFile = "New File"
src/main/org/nlogo/app/TemporaryProceduresTab.scala:117:        this, "Save NetLogo Source File", java.awt.FileDialog.SAVE, newFileName)
src/main/org/nlogo/app/TemporaryProceduresTab.scala:120:      val suffixIndex = newFileName.lastIndexOf(".nls")
src/main/org/nlogo/app/TemporaryProceduresTab.scala:127:      newFileName ++= ".nls"
src/main/org/nlogo/app/TemporaryProceduresTab.scala:130:        Array("Try Again"))
src/main/org/nlogo/app/TemporaryProceduresTab.scala:138:    val message = "Do you want to save the changes you made to " + filename + "?"
src/main/org/nlogo/app/TemporaryProceduresTab.scala:146:  private class FileCloseAction extends javax.swing.AbstractAction("Close") {
src/main/org/nlogo/app/WidgetPanel.java:137:        System.getProperty("os.name").startsWith("Mac") &&
src/main/org/nlogo/app/WidgetPanel.java:138:        System.getProperty("os.version").startsWith("10.2")) {
src/main/org/nlogo/app/WidgetPanel.java:404:    type = "DUMMY " + type.toUpperCase();
src/main/org/nlogo/app/WidgetPanel.java:408:    } else if (type.equals("DUMMY SLIDER")) {
src/main/org/nlogo/app/WidgetPanel.java:415:    } else if (type.equals("DUMMY BUTTON")) {
src/main/org/nlogo/app/WidgetPanel.java:417:    } else if (type.equals("DUMMY PLOT")) {
src/main/org/nlogo/app/WidgetPanel.java:427:        return DummyPlotWidget.apply("plot 1", workspace.plotManager());
src/main/org/nlogo/app/WidgetPanel.java:429:    } else if (type.equals("DUMMY MONITOR")) {
src/main/org/nlogo/app/WidgetPanel.java:451:    } else if (type.equals("DUMMY GRAPHICS-WINDOW") || type.equals("DUMMY VIEW") || type.equals("VIEW")) {
src/main/org/nlogo/app/WidgetPanel.java:456:          ("unknown widget type: " + type);
src/main/org/nlogo/app/WidgetWrapper.java:878:          new javax.swing.JMenuItem("Edit...");
src/main/org/nlogo/app/WidgetWrapper.java:893:          new javax.swing.JMenuItem("Unselect");
src/main/org/nlogo/app/WidgetWrapper.java:904:          new javax.swing.JMenuItem("Select");
src/main/org/nlogo/app/WidgetWrapper.java:916:          new javax.swing.JMenuItem("Delete");
src/main/org/nlogo/app/WidgetWrapper.java:931:            new javax.swing.JMenuItem("Export...");
src/main/org/nlogo/app/WidgetWrapper.java:937:                      (widget(), "Export",
src/main/org/nlogo/app/WindowBar.java:50:        throw new IllegalStateException("type = " + type);
src/main/org/nlogo/awt/JMFMovieEncoder.java:32: * make, have made, use and sell ("Utilize") all or any portion of the source
src/main/org/nlogo/awt/JMFMovieEncoder.java:53: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
src/main/org/nlogo/awt/JMFMovieEncoder.java:73: * Sun grants you ("Licensee") a non-exclusive, royalty free, license to use,
src/main/org/nlogo/awt/JMFMovieEncoder.java:79: * This software is provided "AS IS," without a warranty of any kind. ALL
src/main/org/nlogo/awt/JMFMovieEncoder.java:172:      throw new IOException("Can't set framerate after setup");
src/main/org/nlogo/awt/JMFMovieEncoder.java:229:        throw new IOException("JMFMovieEncoder error: Failed to configure processor");
src/main/org/nlogo/awt/JMFMovieEncoder.java:243:        throw new IOException("The mux does not support the input format: " + tcs[0].getFormat());
src/main/org/nlogo/awt/JMFMovieEncoder.java:258:        throw new IOException("Failed to realize processor");
src/main/org/nlogo/awt/JMFMovieEncoder.java:273:      throw new IOException("Cannot setup movie: " + ex);
src/main/org/nlogo/awt/JMFMovieEncoder.java:432:  @SuppressWarnings("deprecation")
src/main/org/nlogo/awt/JMFMovieEncoder.java:580:        System.out.println("ugh.");
src/main/org/nlogo/awt/Utils.java:26:                        "bounds: " + comp.getBounds());
src/main/org/nlogo/awt/Utils.java:368:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/awt/Utils.java:369:      return "Lucida Grande";
src/main/org/nlogo/awt/Utils.java:371:      return "Sans-serif";
src/main/org/nlogo/awt/Utils.java:376:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/awt/Utils.java:377:      return "Monaco";
src/main/org/nlogo/awt/Utils.java:378:    } else if (System.getProperty("os.name").startsWith("Windows")) {
src/main/org/nlogo/awt/Utils.java:383:        if (fonts[i].equalsIgnoreCase("Lucida Console")) {
src/main/org/nlogo/awt/Utils.java:387:      return "Monospaced";
src/main/org/nlogo/awt/Utils.java:389:      return "Monospaced";
src/main/org/nlogo/awt/Utils.java:394:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/awt/Utils.java:398:    } else if (!(System.getProperty("os.name").startsWith("Windows"))) {
src/main/org/nlogo/awt/Utils.java:406:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/awt/Utils.java:417:      throw new IllegalStateException("not event thread: " + Thread.currentThread());
src/main/org/nlogo/awt/Utils.java:482:            System.out.println(comp + " gained focus at " + System.nanoTime());
src/main/org/nlogo/awt/Utils.java:483:            System.out.println("oppositeComponent = " + fe.getOppositeComponent());
src/main/org/nlogo/awt/Utils.java:487:            System.out.println(comp + " lost focus at " + System.nanoTime());
src/main/org/nlogo/awt/Utils.java:488:            System.out.println("oppositeComponent = " + fe.getOppositeComponent());
src/main/org/nlogo/awt/Utils.java:507:        "<font color=\""
src/main/org/nlogo/awt/Utils.java:512:            + "</font>";
src/main/org/nlogo/compiler/Assembler.scala:25:    ret.token(new Token("END", TokenType.KEYWORD, ret)(proc.endPos, proc.endPos, proc.fileName))
src/main/org/nlogo/compiler/AstNode.scala:69: * not necessarily a "block" of statements, as block means something specific
src/main/org/nlogo/compiler/AstNode.scala:103:  override def toString = command.toString + "[" + args.mkString(", ") + "]"
src/main/org/nlogo/compiler/AstNode.scala:117:  override def toString = "[" + statements.toString + "]"
src/main/org/nlogo/compiler/AstNode.scala:126: * the expression it contains... Its "blockness" is significant.
src/main/org/nlogo/compiler/AstNode.scala:129:  override def toString = "[" + app.toString() + "]"
src/main/org/nlogo/compiler/AstNode.scala:152: * expression, things like "round 5" and "3 + 4". However, this class also
src/main/org/nlogo/compiler/AstNode.scala:170:  override def toString = reporter.toString + "[" + args.mkString(", ") + "]"
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:22:                case s:String => s == "DIRECTED-LINK-BREED" } )
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:27:                case s:String => s == "UNDIRECTED-LINK-BREED" } ) 
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:32:    turtle("CREATE-*", COMMAND, false, classOf[_createturtles]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:33:    turtle("CREATE-ORDERED-*", COMMAND, false, classOf[_createorderedturtles]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:34:    turtle("HATCH-*", COMMAND, false, classOf[_hatch]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:35:    turtle("SPROUT-*", COMMAND, false,classOf[_sprout]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:36:    turtle("IS-*?", REPORTER, true,classOf[_isbreed]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:37:    turtle("*-HERE", REPORTER, false,classOf[_breedhere]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:38:    turtle("*-ON", REPORTER, false,classOf[_breedon]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:43:    turtle("*-AT", REPORTER, false,
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:51:    directedLink("IS-*?", REPORTER, true,classOf[_isbreed]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:52:    undirectedLink("IS-*?", REPORTER, true,classOf[_isbreed]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:53:    directedLink("CREATE-*-FROM", COMMAND, true,classOf[_createlinkfrom]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:54:    directedLink("CREATE-*-FROM", COMMAND, false,classOf[_createlinksfrom]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:55:    directedLink("CREATE-*-TO", COMMAND, true,classOf[_createlinkto]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:56:    directedLink("CREATE-*-TO", COMMAND, false,classOf[_createlinksto]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:57:    undirectedLink("CREATE-*-WITH", COMMAND, true,classOf[_createlinkwith]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:58:    undirectedLink("CREATE-*-WITH", COMMAND, false,classOf[_createlinkswith]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:59:    directedLink("IN-*-NEIGHBOR?", REPORTER, true,classOf[_inlinkneighbor]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:60:    directedLink("OUT-*-NEIGHBOR?", REPORTER, true,classOf[_outlinkneighbor]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:61:    directedLink("IN-*-FROM", REPORTER, true,classOf[_inlinkfrom]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:62:    directedLink("OUT-*-TO", REPORTER, true,classOf[_outlinkto]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:63:    directedLink("OUT-*-NEIGHBORS", REPORTER, true,classOf[_outlinkneighbors]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:64:    directedLink("IN-*-NEIGHBORS", REPORTER, true,classOf[_inlinkneighbors]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:65:    directedLink("MY-IN-*", REPORTER, false,classOf[_myinlinks]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:66:    directedLink("MY-OUT-*", REPORTER, false,classOf[_myoutlinks]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:67:    undirectedLink("*-NEIGHBORS", REPORTER, true,classOf[_linkneighbors]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:68:    undirectedLink("MY-*", REPORTER, false,classOf[_mylinks]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:69:    undirectedLink("*-WITH", REPORTER, true,classOf[_linkwith]),
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:70:    undirectedLink("*-NEIGHBOR?", REPORTER, true,classOf[_linkneighbor]) 
src/main/org/nlogo/compiler/BreedIdentifierHandler.scala:78:    val pattern = Pattern.compile("\\A"+patternString.replaceAll("\\?","\\\\?").replaceAll("\\*","(.+)")+"\\Z")
src/main/org/nlogo/compiler/CarefullyVisitor.scala:6: * This is an AstVisitor that connects "error-message" reporters to
src/main/org/nlogo/compiler/CarefullyVisitor.scala:7: * their enclosing "carefully" commands.
src/main/org/nlogo/compiler/CarefullyVisitor.scala:26:        if(stack.isEmpty) exception(em.token.name + " cannot be used outside of CAREFULLY",app)
src/main/org/nlogo/compiler/Compiler.scala:15:  val Tokenizer2D = Femto.scalaSingleton(classOf[TokenizerInterface], "org.nlogo.lex.Tokenizer2D")
src/main/org/nlogo/compiler/Compiler.scala:16:  val Tokenizer3D = Femto.scalaSingleton(classOf[TokenizerInterface], "org.nlogo.lex.Tokenizer3D")
src/main/org/nlogo/compiler/Compiler.scala:17:  val TokenMapper2D = Femto.scalaSingleton(classOf[TokenMapperInterface], "org.nlogo.lex.TokenMapper2D")
src/main/org/nlogo/compiler/Compiler.scala:38:    checkSyntax("to __bogus-name " + source + "\nend", 
src/main/org/nlogo/compiler/Compiler.scala:43:    checkSyntax("to-report __bogus-name report " + source + "\nend", 
src/main/org/nlogo/compiler/Compiler.scala:109:      Femto.get(classOf[TokenReaderInterface], "org.nlogo.lex.TokenReader", 
src/main/org/nlogo/compiler/CompilerMain.scala:53:          Femto.get(classOf[GeneratorInterface], "org.nlogo.generator.Generator",
src/main/org/nlogo/compiler/ConstantParser.scala:27:  private val BAD_AGENT = "Not an agent"
src/main/org/nlogo/compiler/ConstantParser.scala:28:  private val BAD_PATCH_SET_ARGS = "Patch agentsets are given by a set of 2 element integer lists containing a patch's pxcor and pycor"
src/main/org/nlogo/compiler/ConstantParser.scala:29:  private val BAD_PATCH_ARGS = "pxcor and pycor must be floats"
src/main/org/nlogo/compiler/ConstantParser.scala:30:  private val BAD_LINK_ARGS = "end1 and end2 must be floats"
src/main/org/nlogo/compiler/ConstantParser.scala:31:  private val BAD_TURTLE_SET_ARGS = "Turtle agentsets are given by a set of turtles' who numbers"
src/main/org/nlogo/compiler/ConstantParser.scala:32:  private val BAD_LINK_SET_ARGS = "Link agentsets are given by a set of links' endpoints and breeds"
src/main/org/nlogo/compiler/ConstantParser.scala:33:  private val BAD_TURTLE_ARG = "a turtle's who number must be an integer"
src/main/org/nlogo/compiler/ConstantParser.scala:34:  private val EXPECTED_BREED = "Expected breed"
src/main/org/nlogo/compiler/ConstantParser.scala:35:  private val EXPECTED_CLOSE_BRACE = "Expected closing brace."
src/main/org/nlogo/compiler/ConstantParser.scala:36:  private val EXPECTED_CLOSE_PAREN = "Expected a closing parenthesis."
src/main/org/nlogo/compiler/ConstantParser.scala:37:  private val EXPECTED_CONSTANT = "Expected a constant."
src/main/org/nlogo/compiler/ConstantParser.scala:38:  private val EXPECTED_NUMBER = "Expected a number."
src/main/org/nlogo/compiler/ConstantParser.scala:39:  private val EXPECTED_INT_ETC = "Expected number, list, string or boolean"
src/main/org/nlogo/compiler/ConstantParser.scala:40:  private val EXPECTED_OPEN_BRACE = "Expected open brace."
src/main/org/nlogo/compiler/ConstantParser.scala:41:  private val EXPECTED_OPEN_BRACKET = "Internal error: Expected an opening bracket here."
src/main/org/nlogo/compiler/ConstantParser.scala:42:  private val EXTRA_STUFF_AFTER_CONSTANT = "Extra characters after constant."
src/main/org/nlogo/compiler/ConstantParser.scala:43:  private val EXTRA_STUFF_AFTER_NUMBER = "Extra characters after number."
src/main/org/nlogo/compiler/ConstantParser.scala:44:  private val ILLEGAL_AGENT_CONSTANT = "Can only have constant agents and agentsets if importing."
src/main/org/nlogo/compiler/ConstantParser.scala:45:  private val MISSING_CLOSE_BRACKET = "No closing bracket for this open bracket."
src/main/org/nlogo/compiler/ConstantParser.scala:46:  private val NOT_AN_AGENTSET = " is not an agentset"
src/main/org/nlogo/compiler/ConstantParser.scala:47:  private val NOT_A_BREED = " is not a breed"
src/main/org/nlogo/compiler/ConstantParser.scala:49:  private val SET_TYPE_ALLPATCHES = "ALL-PATCHES"
src/main/org/nlogo/compiler/ConstantParser.scala:50:  private val SET_TYPE_ALLTURTLES = "ALL-TURTLES"
src/main/org/nlogo/compiler/ConstantParser.scala:51:  private val SET_TYPE_ALLLINKS   = "ALL-LINKS"
src/main/org/nlogo/compiler/ConstantParser.scala:52:  private val SET_TYPE_BREED      = "BREED"
src/main/org/nlogo/compiler/ConstantParser.scala:53:  private val SET_TYPE_OBSERVER   = "OBSERVER"
src/main/org/nlogo/compiler/ConstantParser.scala:144:  * parses a constant agent (e.g. "{turtle 3}" or "{patch 1 2}" or "{link 5 6}"
src/main/org/nlogo/compiler/ConstantParser.scala:155:                exception("Invalid patch coordinates ( " + pxcor + " , " + pycor + " ) ",token) }
src/main/org/nlogo/compiler/ConstantParser.scala:173:               exception("Invalid patch coordinates ( " + pxcor + " , " + pycor +  " , " + pzcor + " ) " ,token) }
src/main/org/nlogo/compiler/ConstantParser.scala:311:            exception("Invalid patch coordinates in one of the agents of this set.",token)
src/main/org/nlogo/compiler/ExpressionParser.scala:12: *  - "command" is an actual command token itself, e.g., show, run.
src/main/org/nlogo/compiler/ExpressionParser.scala:13: *  - "reporter" is an actual reporter itself, e.g., +, round, with.
src/main/org/nlogo/compiler/ExpressionParser.scala:14: *  - "statement" is a syntactic form with no value and a command as head (e.g., show 5)
src/main/org/nlogo/compiler/ExpressionParser.scala:15: *  - "expression" is a syntactic form which can occur as an argument to a command or to a
src/main/org/nlogo/compiler/ExpressionParser.scala:33:  private val EXPECTED_COMMAND = "Expected command."
src/main/org/nlogo/compiler/ExpressionParser.scala:34:  private val EXPECTED_CLOSE_BRACKET = "Expected closing bracket."
src/main/org/nlogo/compiler/ExpressionParser.scala:35:  private val EXPECTED_CLOSE_PAREN_HERE = "Expected a closing parenthesis here."
src/main/org/nlogo/compiler/ExpressionParser.scala:36:  private val EXPECTED_REFERENCABLE = "Expected a patch variable here."
src/main/org/nlogo/compiler/ExpressionParser.scala:37:  private val EXPECTED_REPORTER = "Expected reporter."
src/main/org/nlogo/compiler/ExpressionParser.scala:38:  private val INVALID_VARIADIC_CONTEXT = "To use a non-default number of inputs, you need to put parentheses around this."
src/main/org/nlogo/compiler/ExpressionParser.scala:39:  private val MISSING_CLOSE_BRACKET = "No closing bracket for this open bracket."
src/main/org/nlogo/compiler/ExpressionParser.scala:40:  private val MISSING_CLOSE_PAREN = "No closing parenthesis for this open parenthesis."
src/main/org/nlogo/compiler/ExpressionParser.scala:41:  private val MISSING_INPUT_ON_LEFT = "Missing input on the left."
src/main/org/nlogo/compiler/ExpressionParser.scala:163:    val rightArgs = syntax.right.map(Syntax.aTypeName(_).replaceFirst("anything","any input"))
src/main/org/nlogo/compiler/ExpressionParser.scala:167:        app.instruction.displayName + " expected " + syntax.rightDefault + " input" + (if(syntax.rightDefault > 1) "s" else "") +
src/main/org/nlogo/compiler/ExpressionParser.scala:168:        " on the right or any number of inputs when surrounded by parentheses"
src/main/org/nlogo/compiler/ExpressionParser.scala:170:        app.instruction.displayName + " expected " + (if(isVariadic(app.instruction)) "at least " else "") +
src/main/org/nlogo/compiler/ExpressionParser.scala:171:        (if(right) syntax.rightDefault + " input" + (if(syntax.rightDefault > 1) "s" else "") +
src/main/org/nlogo/compiler/ExpressionParser.scala:172:                    (if(syntax.isInfix) " on the right" else "")
src/main/org/nlogo/compiler/ExpressionParser.scala:173:         else Syntax.aTypeName(left) + " on the left.")
src/main/org/nlogo/compiler/ExpressionParser.scala:176:    else if(rightArgs.forall(_ == "any input"))
src/main/org/nlogo/compiler/ExpressionParser.scala:179:      result + ", " + rightArgs.mkString + "."
src/main/org/nlogo/compiler/ExpressionParser.scala:181:      result + ", " + rightArgs.toList.dropRight(1).mkString(", ") + " and " + rightArgs.last + "." 
src/main/org/nlogo/compiler/ExpressionParser.scala:235:   * resolves the type of an expression. We call this "resolution" instead of "checking" because
src/main/org/nlogo/compiler/ExpressionParser.scala:248:            instruction + " expected this input to be " + Syntax.aTypeName(goalType) + ", but got " +
src/main/org/nlogo/compiler/ExpressionParser.scala:249:            Syntax.aTypeName(arg.reportedType) + " instead",arg)
src/main/org/nlogo/compiler/ExpressionParser.scala:283:   *                   the "stack"
src/main/org/nlogo/compiler/ExpressionParser.scala:307:   *                   the "stack"
src/main/org/nlogo/compiler/ExpressionParser.scala:395:            Procedure.Type.COMMAND, token, "__lambda-" + lambdaNumbers.next(), None, procedure)
src/main/org/nlogo/compiler/ExpressionParser.scala:547:        Procedure.Type.COMMAND, openBracket, "__lambda-" + lambdaNumbers.next(), None, procedure)
src/main/org/nlogo/compiler/ExpressionParser.scala:568:    else exception("Expected " + Syntax.aTypeName(goalType) + " here, rather than a list or block.",block)
src/main/org/nlogo/compiler/IdentifierParser.scala:7: * Converts identifier tokens into instances of primitives.  In "forgiving" mode, used by
src/main/org/nlogo/compiler/IdentifierParser.scala:53:    else if(ident == "RANDOM-OR-RANDOM-FLOAT")
src/main/org/nlogo/compiler/IdentifierParser.scala:103:      exception("Nothing named " + varName + " has been defined",
src/main/org/nlogo/compiler/IdentifierParser.scala:116:            "Cannot use " + procedure.name + " as a procedure name.  Conflicts with: " + newVal,
src/main/org/nlogo/compiler/IdentifierParser.scala:126:    "variables may not begin with a question mark unless they are the special variables ?, ?1, ?2, ..."
src/main/org/nlogo/compiler/IdentifierParser.scala:128:    "This code was written for an old version of NetLogo in which the RANDOM primitive sometimes reported " +
src/main/org/nlogo/compiler/IdentifierParser.scala:129:    "an integer (e.g. 4), other times a floating point number (e.g. 4.326), depending on its input. " +
src/main/org/nlogo/compiler/IdentifierParser.scala:130:    "That's no longer true in this version; instead, we now have two separate primitives. So you must " +
src/main/org/nlogo/compiler/IdentifierParser.scala:131:    "replace this with either RANDOM or RANDOM-FLOAT depending on whether you want an integer or " +
src/main/org/nlogo/compiler/IdentifierParser.scala:132:    "a floating point result."
src/main/org/nlogo/compiler/LambdaVisitor.scala:9:  val OutOfScope = "this special variable is not defined here"
src/main/org/nlogo/compiler/LocalsVisitor.scala:7: * This is an AstVisitor that optimizes "let" variables by converting them to "locals" variables
src/main/org/nlogo/compiler/LocalsVisitor.scala:9: * "Whenever possible" is "whenever it's not inside an ask". We must find and convert two prims:
src/main/org/nlogo/compiler/LocalsVisitor.scala:12: * We also do the same thing with "repeat", which by default uses the "let" mechanism, but must be
src/main/org/nlogo/compiler/LocalsVisitor.scala:13: * changed to use the "locals" mechanism when used outside "ask". - ST 11/10/05 */
src/main/org/nlogo/compiler/LocalsVisitor.scala:33:        val exempt = l.token.name.equalsIgnoreCase("__LET")
src/main/org/nlogo/compiler/LocalsVisitor.scala:53:          procedure.args.add("_repeatlocal:" + vn)
src/main/org/nlogo/compiler/LocalsVisitor.scala:69:                "Nothing named " + l.token.name + " has been defined",l.token)
src/main/org/nlogo/compiler/SetVisitor.scala:7: * "_set(var, value)" into more specific things like
src/main/org/nlogo/compiler/SetVisitor.scala:8: * "_setprocedurevariable(value)" or whatever, where the new set* command 
src/main/org/nlogo/compiler/SetVisitor.scala:12:  private val INVALID_SET = "This isn't something you can use \"set\" on"
src/main/org/nlogo/compiler/StructureParser.scala:64:    if(!subprogram) usingFiles += (("aggregate", null))
src/main/org/nlogo/compiler/StructureParser.scala:76:        if(token.tyype == TokenType.VARIABLE && token.value == "BREED") {
src/main/org/nlogo/compiler/StructureParser.scala:81:            if(java.lang.Boolean.getBoolean("org.nlogo.lang.requireSingularBreedArgument"))
src/main/org/nlogo/compiler/StructureParser.scala:83:                      "breed requires a singular form since org.nlogo.lang.requireSingularBreedArgument is true",
src/main/org/nlogo/compiler/StructureParser.scala:91:                            "breed only takes 1 or 2 inputs",token) }
src/main/org/nlogo/compiler/StructureParser.scala:99:          cAssert(token.tyype == TokenType.KEYWORD,"Expected keyword",token)
src/main/org/nlogo/compiler/StructureParser.scala:101:          if(keyword == "TO" || keyword == "TO-REPORT")
src/main/org/nlogo/compiler/StructureParser.scala:103:          else if(keyword == "DIRECTED-LINK-BREED" || keyword == "UNDIRECTED-LINK-BREED") {
src/main/org/nlogo/compiler/StructureParser.scala:107:            cAssert(breedList.size == 2,keyword + " only takes 2 inputs",token)
src/main/org/nlogo/compiler/StructureParser.scala:115:          else if(keyword == "TURTLES-OWN") {
src/main/org/nlogo/compiler/StructureParser.scala:116:            cAssert(!haveTurtlesOwn,"Redeclaration of TURTLES-OWN",token)
src/main/org/nlogo/compiler/StructureParser.scala:121:          else if(keyword == "LINKS-OWN") {
src/main/org/nlogo/compiler/StructureParser.scala:122:            cAssert(!haveLinksOwn,"Redeclaration of LINKS-OWN",token)
src/main/org/nlogo/compiler/StructureParser.scala:127:          else if(keyword == "PATCHES-OWN") {
src/main/org/nlogo/compiler/StructureParser.scala:128:            cAssert( !havePatchesOwn,"Redeclaration of PATCHES-OWN",token)
src/main/org/nlogo/compiler/StructureParser.scala:133:          else if(keyword == "GLOBALS") {
src/main/org/nlogo/compiler/StructureParser.scala:134:            cAssert(!haveGlobals,"Redeclaration of GLOBALS",token)
src/main/org/nlogo/compiler/StructureParser.scala:139:          else if(keyword.endsWith("-OWN")) {
src/main/org/nlogo/compiler/StructureParser.scala:142:                    "There is no breed named " + breedName,token)
src/main/org/nlogo/compiler/StructureParser.scala:147:                      "Redeclaration of " + keyword,token)
src/main/org/nlogo/compiler/StructureParser.scala:151:                      "Redeclaration of " + keyword,token)
src/main/org/nlogo/compiler/StructureParser.scala:164:          else if(keyword == "EXTENSIONS")
src/main/org/nlogo/compiler/StructureParser.scala:166:          else if(keyword == "__INCLUDES") {
src/main/org/nlogo/compiler/StructureParser.scala:167:            cAssert(!haveIncludes,"Redeclaration of __INCLUDES",token)
src/main/org/nlogo/compiler/StructureParser.scala:173:                    "Expected [",tokenBuffer.head)
src/main/org/nlogo/compiler/StructureParser.scala:178:                      "Expected string or ]",pathToken)
src/main/org/nlogo/compiler/StructureParser.scala:180:              cAssert(name.endsWith(".nls"),"Included files must end with .nls",pathToken)
src/main/org/nlogo/compiler/StructureParser.scala:194:          else exception("Expected procedure or variable declaration",token)
src/main/org/nlogo/compiler/StructureParser.scala:201:          catch{ case _:java.io.IOException => exception("Could not find " + fileName,usingFiles(index)._2) }
src/main/org/nlogo/compiler/StructureParser.scala:250:        val msg = "Last procedure doesn't end with END"
src/main/org/nlogo/compiler/StructureParser.scala:258:        cAssert(token.tyype == TokenType.KEYWORD,"Expected TO or TO-REPORT",token)
src/main/org/nlogo/compiler/StructureParser.scala:260:        if(keyword == "TO" || keyword == "TO-REPORT")
src/main/org/nlogo/compiler/StructureParser.scala:261:          isReporterProcedure = keyword == "TO-REPORT"
src/main/org/nlogo/compiler/StructureParser.scala:262:        else exception("Expected TO or TO-REPORT",token)
src/main/org/nlogo/compiler/StructureParser.scala:271:        cAssert(token.tyype == TokenType.IDENT,"You can't use " + token.name.toUpperCase + " to name a procedure", token)
src/main/org/nlogo/compiler/StructureParser.scala:278:        cAssert(newProcedures.get(procedure.name) == null,"Cannot redefine " + procedure.name,token)
src/main/org/nlogo/compiler/StructureParser.scala:292:          if(keyword == "END") {
src/main/org/nlogo/compiler/StructureParser.scala:299:          else exception("This doesn't make sense here",token)
src/main/org/nlogo/compiler/StructureParser.scala:311:          if(keyword == "END") {
src/main/org/nlogo/compiler/StructureParser.scala:318:          else exception("This doesn't make sense here",token)
src/main/org/nlogo/compiler/StructureParser.scala:328:    cAssert(token.tyype == TokenType.OPEN_BRACKET,"Expected [",token)
src/main/org/nlogo/compiler/StructureParser.scala:336:                "There is already a primitive with that name",token)
src/main/org/nlogo/compiler/StructureParser.scala:338:                "There is already a primitive with that name",token)
src/main/org/nlogo/compiler/StructureParser.scala:340:                "There is already a keyword with that name",token)
src/main/org/nlogo/compiler/StructureParser.scala:342:                "Expected name or ]",token)
src/main/org/nlogo/compiler/StructureParser.scala:344:                "There is already a procedure with that name",token)
src/main/org/nlogo/compiler/StructureParser.scala:346:                "The name " + token.value + " is already defined",token)
src/main/org/nlogo/compiler/StructureParser.scala:359:                "You already defined " + varName + " as a " + breedName + " variable",token)
src/main/org/nlogo/compiler/StructureParser.scala:368:                "You already defined " + varName + " as a " + breedName + " variable",token)
src/main/org/nlogo/compiler/StructureParser.scala:372:            "There is already a turtle variable called " + varName,token)
src/main/org/nlogo/compiler/StructureParser.scala:374:            "There is already a patch variable called " + varName,token)
src/main/org/nlogo/compiler/StructureParser.scala:376:            "There is already a global variable called " + varName,token)
src/main/org/nlogo/compiler/StructureParser.scala:378:            "There is already a breed called " + varName,token)
src/main/org/nlogo/compiler/StructureParser.scala:380:            "There is already a link breed called " + varName,token)
src/main/org/nlogo/compiler/StructureParser.scala:384:                "There is already a procedure with that name",token)
src/main/org/nlogo/compiler/StructureParser.scala:386:                "There is already a local variable called " + varName + " here",token)
src/main/org/nlogo/compiler/StructureParser.scala:393:    cAssert(!procedures.containsKey(varName),"There is already a procedure with that name",token)
src/main/org/nlogo/compiler/StructureParser.scala:399:                "There is already a local variable called " + varName + " in the " + proc.name + " procedure",token)
src/main/org/nlogo/compiler/StructureParser.scala:403:                  "There is already a local variable called " + varName + " in the " +
src/main/org/nlogo/compiler/StructureParser.scala:404:                  proc.name + " procedure",token)
src/main/org/nlogo/compiler/StructureParser.scala:409:   * parses the "import" special form
src/main/org/nlogo/compiler/StructureParser.scala:415:    cAssert(token.tyype == TokenType.OPEN_BRACKET,"Expected [",token)
src/main/org/nlogo/compiler/StructureParser.scala:422:        cAssert(token.tyype == TokenType.IDENT && token.name != null,"Expected identifier or ]",token)
src/main/org/nlogo/compiler/StructureParser.scala:432:    cAssert(nameToken.tyype == TokenType.IDENT,"Expected variable name here",nameToken)
src/main/org/nlogo/compiler/StructureParser.scala:436:            "There is already a local variable called " + name + " here",nameToken)
src/main/org/nlogo/compiler/StructureParser.scala:447:      if(!tokenBuffer.hasNext) exception("Expected ] or END",tokenBuffer.head)
src/main/org/nlogo/compiler/StructureParser.scala:465:        if(keyword != "END") exception("Expected ] or END",token)
src/main/org/nlogo/compiler/StructureParser.scala:478:   * position of the "to" or "to-report" keyword, the Integer position of the
src/main/org/nlogo/compiler/StructureParser.scala:479:   * procedure name, and the Integer position of the "end" keyword.
src/main/org/nlogo/compiler/StructureParser.scala:481:   * This data structure is used to populate the "procedures" menu in the
src/main/org/nlogo/compiler/StructureParser.scala:492:        if(keyword == "TO" || keyword == "TO-REPORT") {
src/main/org/nlogo/compiler/StructureParser.scala:504:              if(token.tyype == TokenType.KEYWORD && token.value == "END")
src/main/org/nlogo/compiler/StructureParser.scala:529:        if(keyword == "__INCLUDES") {
src/main/org/nlogo/compiler/TypeParser.scala:154:          exception("You can't use " + name + " in " + usableByToEnglish(usableBy,true) +
src/main/org/nlogo/compiler/TypeParser.scala:155:                    " context, because " + name + " is " + usableByToEnglish(instructionUsableBy,false) +
src/main/org/nlogo/compiler/TypeParser.scala:156:                    "-only.", instruction.tokenLimitingType)
src/main/org/nlogo/compiler/TypeParser.scala:171:      val abbreviations = Map('O' -> "observer", 'T' -> "turtle",
src/main/org/nlogo/compiler/TypeParser.scala:172:                              'P' -> "patch", 'L' -> "link")
src/main/org/nlogo/compiler/TypeParser.scala:175:      else if(english.charAt(0) == 'o') "an " + english
src/main/org/nlogo/editor/Actions.scala:31:  class TabKeyAction extends MyTextAction("tab-key", _.indentSelection() )
src/main/org/nlogo/editor/Actions.scala:32:  class ShiftTabKeyAction extends MyTextAction("shift-tab-key", e => { e.shiftLeft(); e.shiftLeft() })
src/main/org/nlogo/editor/Actions.scala:33:  class CommentAction extends MyTextAction("comment-line", _.insertBeforeEachSelectedLine(";"))
src/main/org/nlogo/editor/Actions.scala:34:  class UncommentAction extends MyTextAction("uncomment-line", _.uncomment())
src/main/org/nlogo/editor/Actions.scala:35:  class ShiftLeftAction extends MyTextAction("shift-line-left", _.shiftLeft() )
src/main/org/nlogo/editor/Actions.scala:36:  class ShiftRightAction extends MyTextAction("shift-line-right", _.insertBeforeEachSelectedLine(" ") )
src/main/org/nlogo/editor/Actions.scala:38:    new MyTextAction(i18n("tabs.code.rightclick.quickhelp"),
src/main/org/nlogo/editor/Actions.scala:41:    new MyTextAction(i18n("tabs.code.rightclick.quickhelp"),
src/main/org/nlogo/editor/BracketMatcher.java:11: * of the same type.  Two different colors are used to indicate "good"
src/main/org/nlogo/editor/BracketMatcher.java:12: * matches and "bad" matches (where bad means that the parentheses/brackets
src/main/org/nlogo/editor/EditorArea.java:130:      super("enter");
src/main/org/nlogo/editor/EditorArea.java:141:      super("close-bracket");
src/main/org/nlogo/editor/EditorArea.java:407:    Actions.COPY_ACTION().putValue(javax.swing.Action.NAME, i18n.apply("menu.edit.copy"));
src/main/org/nlogo/editor/EditorArea.java:409:    Actions.CUT_ACTION().putValue(javax.swing.Action.NAME, i18n.apply("menu.edit.cut"));
src/main/org/nlogo/editor/EditorArea.java:411:    Actions.PASTE_ACTION().putValue(javax.swing.Action.NAME, i18n.apply("menu.edit.paste"));
src/main/org/nlogo/editor/HighlightView.java:65:      System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/editor/HighlightView.java:101:      retrieveDefaultUIColor("textHighlight", java.awt.Color.BLUE);
src/main/org/nlogo/editor/HighlightView.java:103:      retrieveDefaultUIColor("textText", java.awt.Color.BLACK);
src/main/org/nlogo/editor/HighlightView.java:105:      retrieveDefaultUIColor("textHighlightText", java.awt.Color.WHITE);
src/main/org/nlogo/editor/UndoManager.java:132:      super("Undo");
src/main/org/nlogo/editor/UndoManager.java:148:        putValue(NAME, "Undo");
src/main/org/nlogo/editor/UndoManager.java:156:      super("Redo");
src/main/org/nlogo/editor/UndoManager.java:172:        putValue(NAME, "Redo");
src/main/org/nlogo/generator/BytecodeUtils.scala:19:        println("debug: not rejiggered: " + instr.getClass.getName)
src/main/org/nlogo/generator/BytecodeUtils.scala:24:    val name = i match { case _: Command => "perform"; case _: Reporter => "report" }
src/main/org/nlogo/generator/BytecodeUtils.scala:35:        allMethods.filter(m => m.getName.startsWith("profiling_report") ||
src/main/org/nlogo/generator/BytecodeUtils.scala:36:          m.getName.startsWith("profiling_perform"))
src/main/org/nlogo/generator/BytecodeUtils.scala:40:    else allMethods.filter(m => m.getName.startsWith("report_") ||
src/main/org/nlogo/generator/BytecodeUtils.scala:41:      m.getName.startsWith("perform_"))
src/main/org/nlogo/generator/CustomGenerator.scala:89:    mv.keepField("procedure", instr.procedure, thisInstrUID)
src/main/org/nlogo/generator/CustomGenerator.scala:90:    mv.visitTypeInsn(NEW, "org/nlogo/nvm/Activation")
src/main/org/nlogo/generator/CustomGenerator.scala:94:    mv.loadKeptField("procedure", thisInstrUID)
src/main/org/nlogo/generator/CustomGenerator.scala:98:    mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Context", "activation", "Lorg/nlogo/nvm/Activation;")
src/main/org/nlogo/generator/CustomGenerator.scala:102:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/nvm/Activation", "<init>", "(Lorg/nlogo/nvm/Procedure;Lorg/nlogo/nvm/Activation;I)V")
src/main/org/nlogo/generator/CustomGenerator.scala:107:      mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Activation", "args", "[Ljava/lang/Object;")
src/main/org/nlogo/generator/CustomGenerator.scala:120:    mv.visitFieldInsn(PUTFIELD, "org/nlogo/nvm/Context", "activation", "Lorg/nlogo/nvm/Activation;")
src/main/org/nlogo/generator/CustomGenerator.scala:125:    mv.visitFieldInsn(PUTFIELD, "org/nlogo/nvm/Context", "ip", "I")
src/main/org/nlogo/generator/CustomGenerator.scala:131:      mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Instruction", "workspace", "Lorg/nlogo/nvm/Workspace;")
src/main/org/nlogo/generator/CustomGenerator.scala:133:      mv.visitMethodInsn(INVOKEINTERFACE, "org/nlogo/nvm/Workspace", "profilingTracer", "()Lorg/nlogo/nvm/Tracer;")
src/main/org/nlogo/generator/CustomGenerator.scala:140:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/nvm/Tracer", "openCallRecord",
src/main/org/nlogo/generator/CustomGenerator.scala:141:        "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Activation;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:160:    mv.keepField("procedure", instr.procedure, thisInstrUID)
src/main/org/nlogo/generator/CustomGenerator.scala:161:    mv.visitTypeInsn(NEW, "org/nlogo/nvm/Activation")
src/main/org/nlogo/generator/CustomGenerator.scala:165:    mv.loadKeptField("procedure", thisInstrUID)
src/main/org/nlogo/generator/CustomGenerator.scala:169:    mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Context", "activation", "Lorg/nlogo/nvm/Activation;")
src/main/org/nlogo/generator/CustomGenerator.scala:173:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/nvm/Activation", "<init>", "(Lorg/nlogo/nvm/Procedure;Lorg/nlogo/nvm/Activation;I)V")
src/main/org/nlogo/generator/CustomGenerator.scala:178:      mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Activation", "args", "[Ljava/lang/Object;")
src/main/org/nlogo/generator/CustomGenerator.scala:193:      mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Instruction", "workspace", "Lorg/nlogo/nvm/Workspace;")
src/main/org/nlogo/generator/CustomGenerator.scala:195:      mv.visitMethodInsn(INVOKEINTERFACE, "org/nlogo/nvm/Workspace", "profilingTracer", "()Lorg/nlogo/nvm/Tracer;");
src/main/org/nlogo/generator/CustomGenerator.scala:202:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/nvm/Tracer", "openCallRecord",
src/main/org/nlogo/generator/CustomGenerator.scala:203:        "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Activation;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:208:    mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/nvm/Context", "callReporterProcedure",
src/main/org/nlogo/generator/CustomGenerator.scala:209:      "(Lorg/nlogo/nvm/Activation;)Ljava/lang/Object;")
src/main/org/nlogo/generator/CustomGenerator.scala:215:      mv.visitFieldInsn(GETFIELD, "org/nlogo/nvm/Instruction", "workspace", "Lorg/nlogo/nvm/Workspace;")
src/main/org/nlogo/generator/CustomGenerator.scala:217:      mv.visitMethodInsn(INVOKEINTERFACE, "org/nlogo/nvm/Workspace", "profilingTracer", "()Lorg/nlogo/nvm/Tracer;")
src/main/org/nlogo/generator/CustomGenerator.scala:224:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/nvm/Tracer", "closeCallRecord",
src/main/org/nlogo/generator/CustomGenerator.scala:225:        "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Activation;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:231:    mv.visitTypeInsn(NEW, "org/nlogo/nvm/EngineException")
src/main/org/nlogo/generator/CustomGenerator.scala:235:    mv.visitLdcInsn("the " + instr.procedure.name + " procedure failed to report a result")
src/main/org/nlogo/generator/CustomGenerator.scala:236:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/nvm/EngineException", "<init>",
src/main/org/nlogo/generator/CustomGenerator.scala:237:      "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Instruction;Ljava/lang/String;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:253:    mv.visitTypeInsn(NEW, "org/nlogo/api/LogoListBuilder")
src/main/org/nlogo/generator/CustomGenerator.scala:255:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/api/LogoListBuilder", "<init>", "()V")
src/main/org/nlogo/generator/CustomGenerator.scala:261:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/api/LogoListBuilder", "add", "(Ljava/lang/Object;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:263:    mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/api/LogoListBuilder", "toLogoList", "()Lorg/nlogo/api/LogoList;")
src/main/org/nlogo/generator/CustomGenerator.scala:286:    mv.visitTypeInsn(NEW, "org/nlogo/api/LogoListBuilder")
src/main/org/nlogo/generator/CustomGenerator.scala:290:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/api/LogoListBuilder", "<init>", "()V")
src/main/org/nlogo/generator/CustomGenerator.scala:299:      mv.visitTypeInsn(INSTANCEOF, "org/nlogo/api/LogoList")
src/main/org/nlogo/generator/CustomGenerator.scala:303:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/api/LogoListBuilder", "addAll", "(Ljava/lang/Iterable;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:309:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/api/LogoListBuilder", "add", "(Ljava/lang/Object;)V")
src/main/org/nlogo/generator/CustomGenerator.scala:313:    mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/api/LogoListBuilder", "toLogoList", "()Lorg/nlogo/api/LogoList;")
src/main/org/nlogo/generator/CustomGenerator.scala:328:    mv.visitTypeInsn(NEW, "java/lang/StringBuilder")
src/main/org/nlogo/generator/CustomGenerator.scala:330:    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V")
src/main/org/nlogo/generator/CustomGenerator.scala:335:      mv.visitMethodInsn(INVOKESTATIC, "org/nlogo/api/Dump", "logoObject",
src/main/org/nlogo/generator/CustomGenerator.scala:336:        "(Ljava/lang/Object;)Ljava/lang/String;")
src/main/org/nlogo/generator/CustomGenerator.scala:338:      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append",
src/main/org/nlogo/generator/CustomGenerator.scala:339:        "(Ljava/lang/String;)Ljava/lang/StringBuilder;")
src/main/org/nlogo/generator/CustomGenerator.scala:342:    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString",
src/main/org/nlogo/generator/CustomGenerator.scala:343:      "()Ljava/lang/String;")
src/main/org/nlogo/generator/GeneratedInstruction.scala:19:      if elem.getClassName.containsSlice("_asm_")
src/main/org/nlogo/generator/GeneratedInstruction.scala:33:    if (bytecode != "") buf ++= spaceString + disassembly.value.replaceAll("\n", "\n" + spaceString)
src/main/org/nlogo/generator/Generator.scala:6:  private[generator] val KEPT_INSTRUCTION_PREFIX = "keptinstr"
src/main/org/nlogo/generator/Generator.scala:54:      case _: Command => "org/nlogo/generator/GeneratedCommand"
src/main/org/nlogo/generator/Generator.scala:55:      case _: Reporter => "org/nlogo/generator/GeneratedReporter"
src/main/org/nlogo/generator/Generator.scala:64:      "_asm" + "_" + pName + cName.substring(cName.lastIndexOf('.') + 1) + "_" + nextCustomClassNumUID()
src/main/org/nlogo/generator/Generator.scala:66:    val fullClassName = "org/nlogo/prim/" + className
src/main/org/nlogo/generator/Generator.scala:72:        case _: Command => "perform"
src/main/org/nlogo/generator/Generator.scala:73:        case _: Reporter => "report"
src/main/org/nlogo/generator/Generator.scala:76:        case _: Command => "(Lorg/nlogo/nvm/Context;)V"
src/main/org/nlogo/generator/Generator.scala:77:        case _: Reporter => "(Lorg/nlogo/nvm/Context;)Ljava/lang/Object;"
src/main/org/nlogo/generator/Generator.scala:80:        null, Array("org/nlogo/api/LogoException"))
src/main/org/nlogo/generator/Generator.scala:97:      val constructor = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)
src/main/org/nlogo/generator/Generator.scala:100:      constructor.visitMethodInsn(INVOKESPECIAL, superClassFullName, "<init>", "()V")
src/main/org/nlogo/generator/Generator.scala:197:            "report", "(Lorg/nlogo/nvm/Context;)Ljava/lang/Object;")
src/main/org/nlogo/generator/Generator.scala:202:            "perform", "(Lorg/nlogo/nvm/Context;)V")
src/main/org/nlogo/generator/Generator.scala:208:     * We need the "init()" method of our GeneratedInstruction to call the init() method of the
src/main/org/nlogo/generator/Generator.scala:211:     * inlining of everything.  (Remember that any Instructions that are called "old-style" with
src/main/org/nlogo/generator/Generator.scala:215:      val mv = cw.visitMethod(ACC_PUBLIC, "init", "(Lorg/nlogo/nvm/Workspace;)V", null, null)
src/main/org/nlogo/generator/Generator.scala:220:      mv.visitMethodInsn(INVOKESPECIAL, superClassFullName, "init", "(Lorg/nlogo/nvm/Workspace;)V")
src/main/org/nlogo/generator/Generator.scala:229:      mv.visitMethodInsn(INVOKEVIRTUAL, "org/nlogo/nvm/Instruction", "init", "(Lorg/nlogo/nvm/Workspace;)V")
src/main/org/nlogo/generator/Generator.scala:249:        List("\\s*LINENUMBER.*", "\\s*MAXSTACK.*", "\\s*MAXLOCALS.*").exists(line.matches(_))
src/main/org/nlogo/generator/Generator.scala:255:          """(?s)public final strictfp (?:perform|report).*?\n(.*?)\n\s*\n""".r
src/main/org/nlogo/generator/Generator.scala:257:            .split("\n").filter(!isBoring(_)).mkString("\n")
src/main/org/nlogo/generator/Generator.scala:262:        System.err.println("WARNING: method size=" + debugEndOfMethodLabel.getOffset +
src/main/org/nlogo/generator/Generator.scala:263:          " for " + fullClassName)
src/main/org/nlogo/generator/Generator.scala:267:        new java.io.File("tmp").mkdir()
src/main/org/nlogo/generator/Generator.scala:268:        new java.io.File("tmp/Generator").mkdir()
src/main/org/nlogo/generator/Generator.scala:269:        val fout = new java.io.FileOutputStream("tmp/Generator/" + className + ".class")
src/main/org/nlogo/generator/Generator.scala:292:     * to be able to load it multiple times, then you should first call "keep" and save the index
src/main/org/nlogo/generator/Generator.scala:309:      "kept" + instrUID + "_" + originalName
src/main/org/nlogo/generator/Generator.scala:354:     * like "Turtle.class" ~Forrest (7/16/2006)
src/main/org/nlogo/generator/Generator.scala:361:      val mv = cw.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "class$",
src/main/org/nlogo/generator/Generator.scala:362:        "(Ljava/lang/String;)Ljava/lang/Class;", null, null)
src/main/org/nlogo/generator/Generator.scala:365:      mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassNotFoundException")
src/main/org/nlogo/generator/Generator.scala:368:      mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName",
src/main/org/nlogo/generator/Generator.scala:369:        "(Ljava/lang/String;)Ljava/lang/Class;")
src/main/org/nlogo/generator/Generator.scala:374:      mv.visitTypeInsn(NEW, "java/lang/NoClassDefFoundError")
src/main/org/nlogo/generator/Generator.scala:376:      mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NoClassDefFoundError", "<init>", "()V")
src/main/org/nlogo/generator/Generator.scala:378:      mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/NoClassDefFoundError", "initCause",
src/main/org/nlogo/generator/Generator.scala:379:        "(Ljava/lang/Throwable;)Ljava/lang/Throwable;")
src/main/org/nlogo/generator/GeneratorAdapter.scala:43:    throw new IllegalStateException("Don't write line numbers to the NetLogoGeneratorAdapter -- line number info " +
src/main/org/nlogo/generator/GeneratorAdapter.scala:44:      "is reserved for runtime error handling uses.")
src/main/org/nlogo/generator/GeneratorAdapter.scala:50:   * Note that using "push" can create more efficient code than using "visitLdcInsn()", because when
src/main/org/nlogo/generator/MethodRipper.scala:31:          if (List("workspace", "world").contains(name))
src/main/org/nlogo/generator/MethodRipper.scala:44:            case ex: NoSuchFieldException => errorLog.append("MethodRipper says: " + ex)
src/main/org/nlogo/generator/MethodRipper.scala:45:            case ex: IllegalAccessException => errorLog.append("MethodRipper says: " + ex)
src/main/org/nlogo/generator/MethodRipper.scala:53:          errorLog.append("MethodRipper says: Java class " + instr.getClass +
src/main/org/nlogo/generator/MethodRipper.scala:54:            " not allowed to set member fields in a report/perform method!")
src/main/org/nlogo/generator/MethodRipper.scala:67:            case ex: NoSuchFieldException => errorLog.append("MethodRipper says: " + ex)
src/main/org/nlogo/generator/MethodRipper.scala:68:            case ex: IllegalAccessException => errorLog.append("MethodRipper says: " + ex)
src/main/org/nlogo/generator/MethodRipper.scala:77:      if (name == "displayName") {
src/main/org/nlogo/generator/MethodRipper.scala:83:        if (name == "class$") {
src/main/org/nlogo/generator/MethodRipper.scala:84:          bgen.generateStaticClassMethod("class$")
src/main/org/nlogo/generator/MethodRipper.scala:89:          errorLog.append("debug: MethodRipper noticed that class " + instr.getClass() +
src/main/org/nlogo/generator/MethodRipper.scala:90:            " contained a static method invocation to method '" + name +
src/main/org/nlogo/generator/MethodRipper.scala:91:            "' in a report_X()/perform_X() method.\n")
src/main/org/nlogo/generator/MethodRipper.scala:100:        errorLog.append("MethodRipper says: Java class " + instr.getClass() +
src/main/org/nlogo/generator/MethodRipper.scala:101:          " not allowed to call method '" + name + "' in a report_X()/perform_X() method.\n")
src/main/org/nlogo/generator/PeepholeOptimizer2.scala:7: * types are involved.  e.g., the int "vn" field in _procedurevariable.
src/main/org/nlogo/generator/PeepholeOptimizer3.scala:17: * PeepholeSafeChecker checks for this.  If a report_* or perform_* method is "PeepholeSafe", then a
src/main/org/nlogo/generator/PrimitiveCache.scala:20:          .getResourceAsStream(c.getName.replace('.', '/') + ".class")
src/main/org/nlogo/generator/TypeConverter.scala:54:    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Double", "doubleValue", "()D")
src/main/org/nlogo/generator/TypeConverter.scala:60:    mv.visitTryCatchBlock(l0, l1, l1, "java/lang/ClassCastException")
src/main/org/nlogo/generator/TypeConverter.scala:63:    mv.visitTypeInsn(CHECKCAST, "java/lang/Double")
src/main/org/nlogo/generator/TypeConverter.scala:64:    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Double", "doubleValue", "()D")
src/main/org/nlogo/generator/TypeConverter.scala:69:    mv.visitTypeInsn(NEW, "org/nlogo/nvm/ArgumentTypeException")
src/main/org/nlogo/generator/TypeConverter.scala:76:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/nvm/ArgumentTypeException", "<init>",
src/main/org/nlogo/generator/TypeConverter.scala:77:      "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Instruction;IILjava/lang/Object;)V")
src/main/org/nlogo/generator/TypeConverter.scala:82:    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z")
src/main/org/nlogo/generator/TypeConverter.scala:88:    mv.visitTryCatchBlock(l0, l1, l1, "java/lang/ClassCastException")
src/main/org/nlogo/generator/TypeConverter.scala:91:    mv.visitTypeInsn(CHECKCAST, "java/lang/Boolean")
src/main/org/nlogo/generator/TypeConverter.scala:92:    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z")
src/main/org/nlogo/generator/TypeConverter.scala:97:    mv.visitTypeInsn(NEW, "org/nlogo/nvm/ArgumentTypeException")
src/main/org/nlogo/generator/TypeConverter.scala:104:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/nvm/ArgumentTypeException", "<init>",
src/main/org/nlogo/generator/TypeConverter.scala:105:      "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Instruction;IILjava/lang/Object;)V")
src/main/org/nlogo/generator/TypeConverter.scala:111:    mv.visitTypeInsn(NEW, "java/lang/Double")
src/main/org/nlogo/generator/TypeConverter.scala:114:    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Double", "<init>", "(D)V")
src/main/org/nlogo/generator/TypeConverter.scala:120:    mv.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;")
src/main/org/nlogo/generator/TypeConverter.scala:124:    mv.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;")
src/main/org/nlogo/generator/TypeConverter.scala:131:    mv.visitTryCatchBlock(l0, l1, l1, "java/lang/ClassCastException")
src/main/org/nlogo/generator/TypeConverter.scala:139:    mv.visitTypeInsn(NEW, "org/nlogo/nvm/ArgumentTypeException")
src/main/org/nlogo/generator/TypeConverter.scala:146:    mv.visitMethodInsn(INVOKESPECIAL, "org/nlogo/nvm/ArgumentTypeException", "<init>",
src/main/org/nlogo/generator/TypeConverter.scala:147:      "(Lorg/nlogo/nvm/Context;Lorg/nlogo/nvm/Instruction;IILjava/lang/Object;)V");
src/main/org/nlogo/gl/render/Builtins.scala:28:    shape("default") { default() }
src/main/org/nlogo/gl/render/Builtins.scala:29:    shape("car") { car() }
src/main/org/nlogo/gl/render/Builtins.scala:30:    shape("plane") { plane() }
src/main/org/nlogo/gl/render/Builtins.scala:31:    shape("stoplight") { stoplight() }
src/main/org/nlogo/gl/render/Builtins.scala:32:    shape("cylinder") { cylinder() }
src/main/org/nlogo/gl/render/Builtins.scala:33:    shape("cone") { cone() }
src/main/org/nlogo/gl/render/Builtins.scala:34:    shape("cube") {
src/main/org/nlogo/gl/render/Builtins.scala:37:    shape("sphere") {
src/main/org/nlogo/gl/render/Builtins.scala:40:    shape("dot") {
src/main/org/nlogo/gl/render/Builtins.scala:45:    shape("@@@CROSSHAIRS@@@") { crosshairs() }
src/main/org/nlogo/gl/render/Builtins.scala:46:    shape("@@@HALO@@@", rotatable = false) { halo() }
src/main/org/nlogo/gl/render/Builtins.scala:47:    shape("@@@PATCH@@@") {
src/main/org/nlogo/gl/render/Builtins.scala:51:    shape("@@@WIREFRAME@@@") {
src/main/org/nlogo/gl/render/Builtins.scala:56:    shapeMap.put("square", "cube")
src/main/org/nlogo/gl/render/Builtins.scala:57:    shapeMap.put("triangle", "cone")
src/main/org/nlogo/gl/render/Builtins.scala:58:    shapeMap.put("circle", "sphere")
src/main/org/nlogo/gl/render/JOGLLoader.scala:8:    "NetLogo found an old version of JOGL on your computer.\n"
src/main/org/nlogo/gl/render/JOGLLoader.scala:9:    "You will need to remove it. For instructions, see Library Conflicts\n" +
src/main/org/nlogo/gl/render/JOGLLoader.scala:10:    "in the System Requirements section of the NetLogo User Manual."
src/main/org/nlogo/gl/render/JOGLLoader.scala:31:    val isMac = System.getProperty("os.name").startsWith("Mac")
src/main/org/nlogo/gl/render/JOGLLoader.scala:37:          if(!e.getMessage.containsSlice("already loaded")) {
src/main/org/nlogo/gl/render/JOGLLoader.scala:39:              "NetLogo could not find the required JOGL libraries.\n" + 
src/main/org/nlogo/gl/render/JOGLLoader.scala:40:              "Please contact bugs@ccl.northwestern.edu for assistance."
src/main/org/nlogo/gl/render/JOGLLoader.scala:45:    val joglPath = libraryPath + System.getProperty("file.separator") + System.mapLibraryName("jogl")
src/main/org/nlogo/gl/render/JOGLLoader.scala:46:    val joglAwtPath = libraryPath + System.getProperty("file.separator") + System.mapLibraryName("jogl_awt")
src/main/org/nlogo/gl/render/JOGLLoader.scala:48:      withErrorReporting { System.loadLibrary("jawt") }
src/main/org/nlogo/gl/render/JOGLLoader.scala:56:      val osname = System.getProperty("os.name")
src/main/org/nlogo/gl/render/JOGLLoader.scala:58:        new java.io.File("lib").getAbsolutePath +
src/main/org/nlogo/gl/render/JOGLLoader.scala:59:        System.getProperty("file.separator") +
src/main/org/nlogo/gl/render/JOGLLoader.scala:60:        (if (osname == "Mac OS X")
src/main/org/nlogo/gl/render/JOGLLoader.scala:62:         else if(osname.startsWith("Windows"))
src/main/org/nlogo/gl/render/JOGLLoader.scala:63:           "Windows"
src/main/org/nlogo/gl/render/JOGLLoader.scala:65:           val arch = System.getProperty("os.arch")
src/main/org/nlogo/gl/render/JOGLLoader.scala:66:           if(arch.endsWith("86"))
src/main/org/nlogo/gl/render/JOGLLoader.scala:67:             "Linux-x86"
src/main/org/nlogo/gl/render/JOGLLoader.scala:69:             "Linux-" + arch
src/main/org/nlogo/gl/render/JOGLLoader.scala:77:          "NetLogo could not find the required JOGL libraries.\n"+ 
src/main/org/nlogo/gl/render/JOGLLoader.scala:78:          "Please contact bugs@ccl.northwestern.edu for assistance.", e)
src/main/org/nlogo/gl/render/JOGLLoader.scala:99:    val pkgName = "javax.media.opengl"
src/main/org/nlogo/gl/render/JOGLLoader.scala:100:    val className = "GL"
src/main/org/nlogo/gl/render/JOGLLoader.scala:105:        .getOrElse("not available")
src/main/org/nlogo/gl/render/JOGLLoader.scala:108:      case e: ClassNotFoundException => "not available"
src/main/org/nlogo/gl/render/JOGLLoader.scala:113:    val pkgName = "javax.media.opengl"
src/main/org/nlogo/gl/render/JOGLLoader.scala:114:    val className = "GL"
src/main/org/nlogo/gl/render/JOGLLoader.scala:125:          "NetLogo found JOGL Version: " + implVersion + ".\n" +
src/main/org/nlogo/gl/render/JOGLLoader.scala:126:          "Version: " + RecommendedVersion + " is recommended.\n" + 
src/main/org/nlogo/gl/render/JOGLLoader.scala:127:          "You may need to remove your existing\n" +
src/main/org/nlogo/gl/render/JOGLLoader.scala:128:          "JOGL installation.\n" + 
src/main/org/nlogo/gl/render/JOGLLoader.scala:129:          "For instructions, see the Library Conflicts section \n" +
src/main/org/nlogo/gl/render/JOGLLoader.scala:130:          "in the NetLogo User Manual.")
src/main/org/nlogo/gl/render/JOGLLoader.scala:136:          "NetLogo could not find the required JOGL libraries.\n\n"+ 
src/main/org/nlogo/gl/render/JOGLLoader.scala:137:          "Please contact bugs@ccl.northwestern.edu for assistance.", e)
src/main/org/nlogo/gl/render/JOGLLoader.scala:144:            if(Class.forName("sun.misc.InvalidJarIndexException").isAssignableFrom(e.getClass))
src/main/org/nlogo/gl/render/LinkRenderer.scala:150:    if(link.shape == "default")
src/main/org/nlogo/gl/render/PatchRenderer3D.scala:28:      val shape3D = shapeRenderer.getShape("@@@PATCH@@@")
src/main/org/nlogo/gl/render/PatchRenderer3D.scala:65:      val shape3D = shapeRenderer.getShape("@@@PATCH@@@")
src/main/org/nlogo/gl/render/PatchRenderer3D.scala:91:      gl, shapeRenderer.getShape("@@@PATCH@@@"),
src/main/org/nlogo/gl/render/PatchRenderer3D.scala:115:    val shape = shapeRenderer.getShape("@@@PATCH@@@")
src/main/org/nlogo/gl/render/Renderer.java:168:        ("JOGL: " + JOGLLoader.getVersion(classLoader));
src/main/org/nlogo/gl/render/Renderer.java:171:        "OpenGL graphics: " + gl.glGetString(GL.GL_RENDERER) + "\n"
src/main/org/nlogo/gl/render/Renderer.java:172:            + "OpenGL version: " + gl.glGetString(GL.GL_VERSION) + "\n"
src/main/org/nlogo/gl/render/Renderer.java:173:            + "OpenGL vendor: " + gl.glGetString(GL.GL_VENDOR)
src/main/org/nlogo/gl/render/Renderer.java:309:   * be regarded as "visible".
src/main/org/nlogo/gl/render/Renderer.java:335:      throw new IllegalStateException("Agent must be an instance of Turtle, Patch, or Link.");
src/main/org/nlogo/gl/render/ShapeManager.java:73:      return shapes.get("default");
src/main/org/nlogo/gl/render/ShapeManager.java:120:      while (!next.equals("end-shape")) {
src/main/org/nlogo/gl/render/ShapeManager.java:121:        if (next.equals("tris") ||
src/main/org/nlogo/gl/render/ShapeManager.java:122:            next.equals("quads") ||
src/main/org/nlogo/gl/render/ShapeManager.java:123:            next.equals("stop") ||
src/main/org/nlogo/gl/render/ShapeManager.java:124:            next.startsWith("normal:") ||
src/main/org/nlogo/gl/render/ShapeManager.java:504:        if (next.equals("tris")) {
src/main/org/nlogo/gl/render/ShapeManager.java:506:        } else if (next.equals("quads")) {
src/main/org/nlogo/gl/render/ShapeManager.java:508:        } else if (next.equals("stop")) {
src/main/org/nlogo/gl/render/ShapeManager.java:510:        } else if (next.startsWith("normal: ")) {
src/main/org/nlogo/gl/render/ShapeManager.java:531:      if (next.equals("tris")) {
src/main/org/nlogo/gl/render/ShapeManager.java:533:      } else if (next.equals("quads")) {
src/main/org/nlogo/gl/render/ShapeManager.java:535:      } else if (next.equals("stop")) {
src/main/org/nlogo/gl/render/ShapeManager.java:537:      } else if (next.startsWith("normal: ")) {
src/main/org/nlogo/gl/render/ShapeRenderer.scala:231:    val haloShape = shapeManager.getShape("@@@HALO@@@")
src/main/org/nlogo/gl/render/TextureUtils.scala:28:      if (glRendererName.startsWith("ATI RAGE"))
src/main/org/nlogo/gl/render/TextureUtils.scala:40:      else if (glRendererName.startsWith("ATI RADEON 7500"))
src/main/org/nlogo/gl/render/TextureUtils.scala:43:      else if (glRendererName.startsWith("ATI RADEON 9200"))
src/main/org/nlogo/gl/render/TurtleRenderer.scala:69:    if(turtle.shape == "default")
src/main/org/nlogo/gl/render/WorldRenderer.scala:85:      gl.glCallList(shapeManager.getShape("@@@CROSSHAIRS@@@").displayListIndex)
src/main/org/nlogo/gl/render/WorldRenderer.scala:130:    gl.glCallList(shapeManager.getShape("@@@WIREFRAME@@@").displayListIndex)
src/main/org/nlogo/gl/view/ObserverView.scala:6:extends View("3D View", viewManager, renderer) {
src/main/org/nlogo/gl/view/Picker.scala:17:    val editItem = new javax.swing.JMenuItem("Edit...")
src/main/org/nlogo/gl/view/Picker.scala:29:    val copyItem = new javax.swing.JMenuItem("Copy View")
src/main/org/nlogo/gl/view/Picker.scala:37:    val exportItem = new javax.swing.JMenuItem("Export View...")
src/main/org/nlogo/gl/view/Picker.scala:48:        "<html>" + colorize("reset-perspective", SyntaxColors.COMMAND_COLOR))
src/main/org/nlogo/gl/view/Picker.scala:57:      resetItem.setText("reset-perspective") 
src/main/org/nlogo/gl/view/Picker.scala:68:        submenu.add(new AgentMenuItem(agent, Inspect, "inspect"))
src/main/org/nlogo/gl/view/Picker.scala:70:        submenu.add(new AgentMenuItem(agent, Watch, "watch"))
src/main/org/nlogo/gl/view/Picker.scala:71:        submenu.add(new AgentMenuItem(agent, Follow, "follow"))
src/main/org/nlogo/gl/view/Picker.scala:72:        submenu.add(new AgentMenuItem(agent, Ride, "ride"))
src/main/org/nlogo/gl/view/Picker.scala:76:        menu.add(new AgentMenuItem(agent, Inspect, "inspect"))
src/main/org/nlogo/gl/view/Picker.scala:105:    "<html>" +
src/main/org/nlogo/gl/view/ViewControlStrip3D.scala:28:      "     " + workspace.viewWidget.tickCounterLabel + ": " + tickText)
src/main/org/nlogo/gl/view/ViewControlStrip3D.scala:40:        workspace.viewWidget.tickCounterLabel + ": 00000000")
src/main/org/nlogo/gl/view/ViewControlToolBar.scala:58:        val isWindows = System.getProperty("os.name").toLowerCase.startsWith("win")
src/main/org/nlogo/gl/view/ViewManager.scala:79:          "NetLogo could not load the JOGL native libraries on your computer.\n\n" +
src/main/org/nlogo/gl/view/ViewManager.scala:80:            "Write bugs@ccl.northwestern.edu for assistance.", e)
src/main/org/nlogo/gl/view/ViewManager.scala:95:        ("This graphics environment does not support full screen mode")
src/main/org/nlogo/headless/Checksummer.scala:10:    if(workspace.previewCommands.containsSlice("need-to-manually-make-preview-for-this-model"))
src/main/org/nlogo/headless/Checksummer.scala:12:    workspace.command("random-seed 0")
src/main/org/nlogo/headless/Checksummer.scala:29:    val digester = java.security.MessageDigest.getInstance("SHA")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:9:    List("Ants", "BZ", "CA1D", "Erosion", "Fire", "FireBig", "Flocking", "GasLabCirc", 
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:10:         "GasLabNew", "GasLabOld", "GridWalk", "Heatbugs", "Ising", "Life", "PrefAttach", 
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:11:         "Team", "Termites", "VirusNet", "Wealth", "Wolf", "ImportWorld")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:16:      (if(Version.is3D) Nil else allBenchmarks.map("test/models/benchmarks/" + _ + " Benchmark.nlogo")) ++
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:17:      ModelsLibrary.getModelPaths(true).filter(fn).map(p => p.substring(p.indexOf("models/"))).toList
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:20:      case Array("--checksum", path) => Checksums.update(List(path))
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:21:      case Array("--checksums")      => Checksums.update(paths(Checksums.okPath))
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:22:      case Array("--preview", path)  => Previews.remake(path)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:23:      case Array("--previews")       => paths(Previews.okPath).foreach(Previews.remake)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:25:    println("done")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:30:      List("HUBNET", "/GOGO/", "/CODE EXAMPLES/SOUND/")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:33:      val previewPath = path.replaceFirst("\\.nlogo$", ".png")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:38:        workspace.command("random-seed 0")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:40:        if(workspace.previewCommands.containsSlice("need-to-manually-make-preview-for-this-model"))
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:41:          println("skipping: " + path)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:43:          println("making preview for: " + path)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:45:          workspace.exportView(previewPath, "PNG")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:63:      !List("HUBNET", "/CURRICULAR MODELS/")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:65:        (if(List("/GAMES/FROGGER.NLOGO", "/ART/SOUND MACHINES.NLOGO", "/CODE EXAMPLES/SOUND/")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:67:          println("SKIPPING MODEL: " +  path)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:68:          println("  because it uses the sound extension")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:73:      val path = if(Version.is3D) "test/checksums3d.txt"
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:74:                 else "test/checksums.txt"
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:86:          println("Model does not exist, deleting checksum for: " + model)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:94:                println("SKIPPING MODEL: " + model + "\n  because of exception:")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:107:        if(!m.contains(model)) "* Added" 
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:108:        else if(oldEntry.get == newEntry) "Didn't change" 
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:109:        else if(oldEntry.get.equalsExceptRevision(newEntry)) "* Changed rev # only" 
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:110:        else "* Changed"
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:112:      if(action != "Didn't change")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:113:        println(action + ": \"" + model + "\t" + newCheckSum 
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:114:                + "\t" + newGraphicsChecksum + "\t" + revision + "\"")
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:122:            throw new IllegalStateException("bad line: " + line)
src/main/org/nlogo/headless/ChecksumsAndPreviews.scala:133:      val cmds = Array("git", "log", "--pretty=format:%h", modelPath)
src/main/org/nlogo/headless/HeadlessBenchmarker.scala:12:      case _ => throw new IllegalArgumentException("expected: name | name min | name min max")
src/main/org/nlogo/headless/HeadlessBenchmarker.scala:14:    println("@@@@@@ benchmarking " + Version.fullVersion)
src/main/org/nlogo/headless/HeadlessBenchmarker.scala:15:    println("@@@@@@ warmup " + minTime + " seconds, min " + minTime + " seconds, max " + maxTime + " seconds")
src/main/org/nlogo/headless/HeadlessBenchmarker.scala:18:      workspace.open("test/models/benchmarks/" + name + " Benchmark.nlogo")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:38:      throw new IllegalStateException("unknown NetLogo version: " + netLogoVersion)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:101:        case "SLIDER" =>
src/main/org/nlogo/headless/HeadlessModelOpener.scala:104:        case "CHOOSER" =>
src/main/org/nlogo/headless/HeadlessModelOpener.scala:108:          interfaceGlobalCommands.append("set " + vname + " " + defaultAsString + "\n")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:110:        case "SWITCH" => new BooleanConstraint(spec(1))
src/main/org/nlogo/headless/HeadlessModelOpener.scala:111:        case "INPUTBOX" =>
src/main/org/nlogo/headless/HeadlessModelOpener.scala:113:          if (spec(2) == "Number" || spec(2) == "Color")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:134:          println("compiling: \"" + File.stripLines(widgetSource) + "\"")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:157:        interfaceGlobalCommands.append("set " + widget(6) + " " + widget(9) + "\n")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:158:        constraints += widget(6) -> List("SLIDER", widget(7), widget(8), widget(10), widget(9))
src/main/org/nlogo/headless/HeadlessModelOpener.scala:164:        interfaceGlobalCommands.append("set " + widget(6) + " " + defaultAsString + "\n")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:165:        constraints += widget(6) -> List("SWITCH", defaultAsString)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:170:        val valSpec = "[" + widget(7) + "]"
src/main/org/nlogo/headless/HeadlessModelOpener.scala:171:        constraints += widget(6) -> List("CHOOSER", valSpec, widget(8))
src/main/org/nlogo/headless/HeadlessModelOpener.scala:177:        if (widget(9) == "Number" || widget(9) == "Color")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:178:          interfaceGlobalCommands.append("set " + widget(5) + " " + defaultVal + "\n")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:180:          interfaceGlobalCommands.append("set " + widget(5) + " \"" + defaultVal + "\"\n")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:181:        constraints += widget(5) -> List("INPUTBOX", defaultVal, widget(9))
src/main/org/nlogo/headless/HeadlessModelOpener.scala:193:          case "NIL" => ""
src/main/org/nlogo/headless/HeadlessModelOpener.scala:200:            case "OBSERVER" => buttonSource
src/main/org/nlogo/headless/HeadlessModelOpener.scala:206:        if (monitorSource != "NIL")
src/main/org/nlogo/headless/HeadlessModelOpener.scala:209:          monitors += "__ignore (" + File.restoreLines(monitorSource) + "\n)"
src/main/org/nlogo/headless/HeadlessModelOpener.scala:223:          case "SLIDER" => parseSlider(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:224:          case "SWITCH" => parseSwitch(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:225:          case "CHOICE" | "CHOOSER" => parseChoiceOrChooser(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:226:          case "INPUTBOX" => parseInputBox(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:227:          case "PLOT" => parsePlot(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:228:          case "BUTTON" if ws.isCompilerTestingMode => parseButton(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:229:          case "MONITOR" if ws.isCompilerTestingMode => parseMonitor(widget)
src/main/org/nlogo/headless/HeadlessModelOpener.scala:230:          case "GRAPHICS-WINDOW" => parseGraphicsWindow(widget)
src/main/org/nlogo/headless/HeadlessWorkspace.java:54: * <p>See the "Controlling" section of the NetLogo User Manual
src/main/org/nlogo/headless/HeadlessWorkspace.java:66:   * "headless", with no GUI.
src/main/org/nlogo/headless/HeadlessWorkspace.java:79:    pico.addScalaObject("org.nlogo.compiler.Compiler");
src/main/org/nlogo/headless/HeadlessWorkspace.java:80:    pico.add("org.nlogo.sdm.AggregateManagerLite");
src/main/org/nlogo/headless/HeadlessWorkspace.java:81:    pico.add("org.nlogo.render.Renderer");
src/main/org/nlogo/headless/HeadlessWorkspace.java:83:        "org.nlogo.hubnet.server.HeadlessHubNetManager",
src/main/org/nlogo/headless/HeadlessWorkspace.java:97:    pico.addScalaObject("org.nlogo.compiler.Compiler");
src/main/org/nlogo/headless/HeadlessWorkspace.java:98:    pico.add("org.nlogo.lab.Lab");
src/main/org/nlogo/headless/HeadlessWorkspace.java:99:    pico.add("org.nlogo.lab.ProtocolLoader");
src/main/org/nlogo/headless/HeadlessWorkspace.java:139:    defaultOwner = new SimpleJobOwner("HeadlessWorkspace", world.mainRNG, Observer.class);
src/main/org/nlogo/headless/HeadlessWorkspace.java:210:      "globals [glob1 glob2 glob3 ]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:211:          "breed [mice mouse]\n " +
src/main/org/nlogo/headless/HeadlessWorkspace.java:212:          "breed [frogs frog]\n " +
src/main/org/nlogo/headless/HeadlessWorkspace.java:213:          "breed [nodes node]\n " +
src/main/org/nlogo/headless/HeadlessWorkspace.java:214:          "directed-link-breed [directed-links directed-link]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:215:          "undirected-link-breed [undirected-links undirected-link]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:216:          "turtles-own [tvar]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:217:          "patches-own [pvar]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:218:          "mice-own [age fur]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:219:          "frogs-own [age spots]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:220:          "directed-links-own [lvar]\n" +
src/main/org/nlogo/headless/HeadlessWorkspace.java:221:          "undirected-links-own [weight]\n";
src/main/org/nlogo/headless/HeadlessWorkspace.java:273:    Plot plot1 = plotManager().newPlot("plot1");
src/main/org/nlogo/headless/HeadlessWorkspace.java:274:    plot1.createPlotPen("pen1", false);
src/main/org/nlogo/headless/HeadlessWorkspace.java:275:    plot1.createPlotPen("pen2", false);
src/main/org/nlogo/headless/HeadlessWorkspace.java:276:    Plot plot2 = plotManager().newPlot("plot2");
src/main/org/nlogo/headless/HeadlessWorkspace.java:277:    plot2.createPlotPen("pen1", false);
src/main/org/nlogo/headless/HeadlessWorkspace.java:278:    plot2.createPlotPen("pen2", false);
src/main/org/nlogo/headless/HeadlessWorkspace.java:347:    return "ticks";
src/main/org/nlogo/headless/HeadlessWorkspace.java:524:    writer.println(org.nlogo.api.Dump.csv.encode("OUTPUT"));
src/main/org/nlogo/headless/HeadlessWorkspace.java:542:          System.err.println("got a " + (fatalError ? "" : "non") +
src/main/org/nlogo/headless/HeadlessWorkspace.java:543:              "fatal error " + title + ": " + errorDetails);
src/main/org/nlogo/headless/HeadlessWorkspace.java:773:      System.err.println("owner: " + owner.displayName());
src/main/org/nlogo/headless/HeadlessWorkspace.java:795:          modelContents.startsWith(";; DOESN'T COMPILE IN CURRENT BUILD")) {
src/main/org/nlogo/headless/HeadlessWorkspace.java:796:        System.out.println("ignored compile error: " + path);
src/main/org/nlogo/headless/Main.scala:27:    val p = "java.awt.headless"
src/main/org/nlogo/headless/Main.scala:29:      System.setProperty(p, "true")
src/main/org/nlogo/headless/Main.scala:53:      if(arg == "--version")
src/main/org/nlogo/headless/Main.scala:55:      else if(arg == "--extension-api-version")
src/main/org/nlogo/headless/Main.scala:57:      else if(arg == "--builddate")
src/main/org/nlogo/headless/Main.scala:59:      else if(arg == "--fullversion")
src/main/org/nlogo/headless/Main.scala:61:      else if(arg == "--model")
src/main/org/nlogo/headless/Main.scala:63:      else if(arg == "--min-pxcor")
src/main/org/nlogo/headless/Main.scala:65:      else if(arg == "--max-pxcor")
src/main/org/nlogo/headless/Main.scala:67:      else if(arg == "--min-pycor")
src/main/org/nlogo/headless/Main.scala:69:      else if(arg == "--max-pycor")
src/main/org/nlogo/headless/Main.scala:71:      else if(arg == "--setup-file")
src/main/org/nlogo/headless/Main.scala:73:      else if(arg == "--experiment")
src/main/org/nlogo/headless/Main.scala:75:      else if(arg == "--table")
src/main/org/nlogo/headless/Main.scala:77:      else if(arg == "--spreadsheet")
src/main/org/nlogo/headless/Main.scala:79:      else if(arg == "--threads")
src/main/org/nlogo/headless/Main.scala:82:        die("unknown argument: " + arg)
src/main/org/nlogo/headless/Main.scala:85:      die("you must specify --model")
src/main/org/nlogo/headless/Main.scala:87:      die("you must specify either --setup-file or --experiment (or both)")
src/main/org/nlogo/headless/Main.scala:90:      die("if any of min/max-px/ycor are specified, all four must be specified")
src/main/org/nlogo/headless/package.html:5:<body bgcolor="white">
src/main/org/nlogo/headless/package.html:7:Provides classes associated with running NetLogo "headless", that is,
src/main/org/nlogo/headless/Shell.scala:31:        println("COMPILER ERROR: " + ex.getMessage)
src/main/org/nlogo/headless/Shell.scala:35:        println("RUNTIME ERROR: " + msg)
src/main/org/nlogo/headless/Shell.scala:38:        println("RUNTIME ERROR: " + ex.getMessage)
src/main/org/nlogo/hubnet/client/App.scala:18:                           "org.nlogo.compiler.Compiler"))
src/main/org/nlogo/hubnet/client/ClientApp.scala:23:      if (System.getProperty("os.name").startsWith("Mac"))
src/main/org/nlogo/hubnet/client/ClientApp.scala:34:        if (args(i).equalsIgnoreCase("--robo")) {
src/main/org/nlogo/hubnet/client/ClientApp.scala:44:        else if (args(i).equalsIgnoreCase("--id")) userid = args(i + 1)
src/main/org/nlogo/hubnet/client/ClientApp.scala:45:        else if (args(i).equalsIgnoreCase("--ip")) hostip = args(i + 1)
src/main/org/nlogo/hubnet/client/ClientApp.scala:46:        else if (args(i).equalsIgnoreCase("--port")) port = (i + 1).toInt
src/main/org/nlogo/hubnet/client/ClientApp.scala:55:class ClientApp extends JFrame("HubNet") with ErrorHandler with ClientAppInterface {
src/main/org/nlogo/hubnet/client/ClientApp.scala:77:      setIconImage(Utils.loadImageResource("/images/arrowhead.gif"))
src/main/org/nlogo/hubnet/client/ClientApp.scala:101:        login("Local " + localClientIndex, hostip, port)
src/main/org/nlogo/hubnet/client/ClientApp.scala:126:    new ModalProgressTask(Utils.getFrame(this), () => exs(0) = clientPanel.login(userid, hostip, port), "Entering...")
src/main/org/nlogo/hubnet/client/ClientApp.scala:136:    0 == org.nlogo.swing.OptionDialog.show(loginDialog, "Confirm " + title, message, buttons)
src/main/org/nlogo/hubnet/client/ClientApp.scala:144:        OptionDialog.show(this, "", "You have been disconnected from " + activityName + ".", Array("ok"))
src/main/org/nlogo/hubnet/client/ClientApplet.java:126:            }, "Entering...");
src/main/org/nlogo/hubnet/client/ClientApplet.java:162:                  "You have been disconnected from " + activityName + ".\nReason: " + reason, ok);
src/main/org/nlogo/hubnet/client/ClientApplet.java:183:    System.setProperty("apple.awt.graphics.UseQuartz", "true");
src/main/org/nlogo/hubnet/client/ClientApplet.java:184:    System.setProperty("apple.awt.showGrowBox", "true");
src/main/org/nlogo/hubnet/client/ClientApplet.java:190:            applet.appFrame = new javax.swing.JFrame("HubNet Client");
src/main/org/nlogo/hubnet/client/ClientGUI.scala:60:        case _ => throw new IllegalStateException("couldn't find widget " + name)
src/main/org/nlogo/hubnet/client/ClientGUI.scala:86:    private val List(username, server, port) = List("User name", "Server", "Port").map(new StatusField(_, ""))
src/main/org/nlogo/hubnet/client/ClientGUI.scala:94:      org.nlogo.awt.Utils.getFrame(ClientGUI.this).setTitle("HubNet: " + activity)
src/main/org/nlogo/hubnet/client/ClientPanel.scala:46:    sendDataAndWait(new ActivityCommand(if (down) "View" else "Mouse Up", coords))
src/main/org/nlogo/hubnet/client/ClientPanel.scala:89:      case PlotWidgetExportType.ALL => throw new UnsupportedOperationException("can't export all plots yet.")
src/main/org/nlogo/hubnet/client/ClientPanel.scala:96:          }.export("plot", "HubNet Client", "")
src/main/org/nlogo/hubnet/client/ClientPanel.scala:115:    if (widgetName == "VIEW") value match {
src/main/org/nlogo/hubnet/client/ClientPanel.scala:121:    else if (widgetName=="ALL PLOTS") {
src/main/org/nlogo/hubnet/client/ClientPanel.scala:232:    new LoadSectionEvent("HubNet", ModelSection.WIDGETS, widgets.toArray, widgets.mkString("\n")).raise(this)
src/main/org/nlogo/hubnet/client/ClientPanel.scala:263:          OptionDialog.show(getFrame(this), "User Message", content.toString,
src/main/org/nlogo/hubnet/client/ClientPanel.scala:309:      case e: NoRouteToHostException => "Login failed:\n" + hostip + " could not be reached."
src/main/org/nlogo/hubnet/client/ClientPanel.scala:310:      case e: UnknownHostException => "Login failed:\n" + hostip + " does not resolve to a valid IP address."
src/main/org/nlogo/hubnet/client/ClientPanel.scala:311:      case e: ConnectException => "Login failed:\n" + "There was no server running at " + hostip + " on port " + port
src/main/org/nlogo/hubnet/client/ClientPanel.scala:312:      case e: IOException => "Login failed:\nUnknown cause:\n" + org.nlogo.util.Utils.getStackTrace(e)
src/main/org/nlogo/hubnet/client/ClientPanel.scala:313:      case e: RuntimeException => "Login failed:\nUnknown cause:\n" + org.nlogo.util.Utils.getStackTrace(e)
src/main/org/nlogo/hubnet/client/ClientPanel.scala:337:      sendDataAndWait(ExitMessage("Client Exited"))
src/main/org/nlogo/hubnet/client/ClientPanel.scala:349:          extends AbstractConnection("Listener: " + userName, Streamable(socket)) {
src/main/org/nlogo/hubnet/client/ClientPanel.scala:405:    } else System.err.println("Attempted to send data on a shutdown listener, ignoring.")
src/main/org/nlogo/hubnet/client/ClientPanel.scala:415:        else handleLoginFailure("The version of the HubNet Client" +
src/main/org/nlogo/hubnet/client/ClientPanel.scala:416:                " you are using does not match the version of the " +
src/main/org/nlogo/hubnet/client/ClientPanel.scala:417:                "server. Please use the HubNet Client that comes with " + info)
src/main/org/nlogo/hubnet/client/LoginDialog.scala:14:        extends JDialog(parent, "HubNet", true)
src/main/org/nlogo/hubnet/client/LoginDialog.scala:28:  private val enterButton = new JButton("Enter") {addActionListener(LoginDialog.this)}
src/main/org/nlogo/hubnet/client/LoginDialog.scala:42:        addField("User name:", nameField)
src/main/org/nlogo/hubnet/client/LoginDialog.scala:45:          addField("Server:", serverField)
src/main/org/nlogo/hubnet/client/LoginDialog.scala:47:        addField("Port:", portField)
src/main/org/nlogo/hubnet/client/LoginDialog.scala:140:        JOptionPane.showMessageDialog(this, "Invalid port number", "Login Failed", JOptionPane.INFORMATION_MESSAGE)
src/main/org/nlogo/hubnet/client/RoboClientPanel.scala:26:  private class RoboWidgetControl extends Thread("RoboWidgetControl Thread") {
src/main/org/nlogo/hubnet/client/ServerTable.scala:15:  val COLUMN_NAMES = Array("Name", "Activity", "Server", "Port")
src/main/org/nlogo/hubnet/client/ServerTable.scala:50:    putClientProperty("Quaqua.Table.style", "striped")
src/main/org/nlogo/hubnet/client/ServerTable.scala:54:    getColumn("Port").setMaxWidth(50)
src/main/org/nlogo/hubnet/client/ServerTable.scala:55:    getColumn("Name").setPreferredWidth(50)
src/main/org/nlogo/hubnet/client/ServerTable.scala:56:    getColumn("Activity").setPreferredWidth(50)
src/main/org/nlogo/hubnet/client/ServerTable.scala:57:    getColumn("Server").setPreferredWidth(200)
src/main/org/nlogo/hubnet/client/ServerTable.scala:141:        case _ => throw new IndexOutOfBoundsException("column " + column)
src/main/org/nlogo/hubnet/client/TimedSet.java:192:          ("TimedSet does not contain " + o);
src/main/org/nlogo/hubnet/client/TimedSet.java:205:          ("TimedSet does not contain " + o);
src/main/org/nlogo/hubnet/connection/AbstractConnection.scala:45:    disconnect("Shutting down.")
src/main/org/nlogo/hubnet/connection/AbstractConnection.scala:74:      new Thread("SocketListener disconnect") {
src/main/org/nlogo/hubnet/connection/AbstractConnection.scala:114:  private class WritingThread(name: String) extends Thread("WritingThread:" + name) {
src/main/org/nlogo/hubnet/connection/ConnectionTypes.scala:4:  val COMP_CONNECTION = "COMPUTER"
src/main/org/nlogo/hubnet/connection/MessageEnvelope.scala:32:    @throws(classOf[HubNetException]) def getTag: String = if (kind == Normal) tag.get else throwError(kind, "-tag")
src/main/org/nlogo/hubnet/connection/MessageEnvelope.scala:36:        "hubnet-message" + messageSuffix + " cannot be used on an " + messageType.toString.toLowerCase + " message. " +
src/main/org/nlogo/hubnet/connection/MessageEnvelope.scala:37:                "Use hubnet-" + messageType.toString.toLowerCase + "-message? instead.")
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:159:        throw new AgentException("Cannot move turtle beyond the world's edge.");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:173:        throw new AgentException("Cannot move turtle beyond the world's edge.");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:225:      handleError("ERROR: received update for "
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:226:          + "non-existent patch (" + patch.stringRep() + ").");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:236:          ("ERROR: received incremental update for non-existent patch (" + patch.stringRep() + ").");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:251:        handleError("ERROR: received death message for "
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:252:            + "non-existent turtle (" + turtle.stringRep() + ").");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:284:        handleError("ERROR: received incremental update for non-existent turtle ("
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:310:            ("ERROR: received death message for non-existent link ( "
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:344:        handleError("ERROR: received incremental update for "
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:345:            + "non-existent turtle (" + link.stringRep() + ").");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:426:      System.err.println("@ " + new java.util.Date() + " : ");
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:651:      return "(" + who + " " + breedIndex + ")";
src/main/org/nlogo/hubnet/mirroring/ClientWorld.java:691:      return "(" + id + " " + breedIndex + ")";
src/main/org/nlogo/hubnet/mirroring/DiffBuffer.java:169:      javax.imageio.ImageIO.write(drawing, "PNG", os);
src/main/org/nlogo/hubnet/mirroring/HubNetLinkStamp.java:44:    return x1 + " " + y1 + " " + x2 + " " + y2 + " " + color + " "
src/main/org/nlogo/hubnet/mirroring/HubNetLinkStamp.java:45:        + shape + " " + hidden + " " + lineThickness + " " + erase;
src/main/org/nlogo/hubnet/mirroring/HubNetPlotPoint.java:50:    return "plot-point@" + xcor + "," + ycor;
src/main/org/nlogo/hubnet/mirroring/LinkData.java:68:    return "link " + id + " " + breedIndex;
src/main/org/nlogo/hubnet/mirroring/LinkData.java:305:      {"COLOR", "LABEL", "LABEL-COLOR", "LINE-THICKNESS", "HIDDEN?", "SHAPE"};
src/main/org/nlogo/hubnet/mirroring/LinkData.java:307:      {"color", "labelString", "labelColor", "lineThickness", "hidden", "shape"};
src/main/org/nlogo/hubnet/mirroring/LinkData.java:358:      return "Link " + id + " (" + x1 + ", " + y1 + ", " + x2 + ", " + y2 + ", "
src/main/org/nlogo/hubnet/mirroring/LinkData.java:359:          + shape + ", " + org.nlogo.api.Color.getARGBIntByRGBAList(color) + ", " + ", " + hidden + ", "
src/main/org/nlogo/hubnet/mirroring/LinkData.java:360:          + label + ", " + org.nlogo.api.Color.getARGBIntByRGBAList(labelColor) + ", " + lineThickness + ")";
src/main/org/nlogo/hubnet/mirroring/LinkData.java:363:      return "Link " + id + " (dead)";
src/main/org/nlogo/hubnet/mirroring/LinkData.java:365:    return "Link " + id + " update (mask " + Integer.toBinaryString(mask) + ")";
src/main/org/nlogo/hubnet/mirroring/LinkData.java:386:      System.err.println("@ " + new java.util.Date() + " : ");
src/main/org/nlogo/hubnet/mirroring/LinkData.java:387:      System.err.println("ERROR: attempting incremental update of a "
src/main/org/nlogo/hubnet/mirroring/LinkData.java:388:          + "dead link (" + stringRep() + ").");
src/main/org/nlogo/hubnet/mirroring/OverrideList.java:17:      throw new OverrideException("you cannot override " + varName);
src/main/org/nlogo/hubnet/mirroring/PatchData.java:217:  private static final String[] OVERRIDE_VARIABLES = new String[]{"PCOLOR", "PLABEL", "PLABEL-COLOR"};
src/main/org/nlogo/hubnet/mirroring/PatchData.java:218:  private static final String[] OVERRIDE_METHODS = new String[]{"pcolor", "plabel", "plabelColor"};
src/main/org/nlogo/hubnet/mirroring/PatchData.java:253:    return "Patch " + pxcor + " " + pycor + " (" + org.nlogo.api.Color.getARGBIntByRGBAList(pcolor)
src/main/org/nlogo/hubnet/mirroring/PatchData.java:254:        + ", " + plabel + ", " + org.nlogo.api.Color.getARGBIntByRGBAList(plabelColor) + ")";
src/main/org/nlogo/hubnet/mirroring/ServerWorld.java:343:      javax.imageio.ImageIO.write(drawing, "PNG", os);
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:260:      {"COLOR", "LABEL", "LABEL-COLOR", "LINE-THICKNESS", "HIDDEN?", "HEADING", "SHAPE", "SIZE"};
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:262:      {"color", "label", "labelColor", "lineThickness", "hidden", "heading", "shape", "size"};
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:285:      return "Turtle " + who + " (" + xcor + ", " + ycor + ", "
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:286:          + shape + ", " + org.nlogo.api.Color.getARGBIntByRGBAList(color) + ", " + heading + ", " + size
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:287:          + ", " + hidden + ", " + label + ", " + org.nlogo.api.Color.getARGBIntByRGBAList(labelColor)
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:288:          + ", " + breedIndex + ", " + lineThickness + ")";
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:291:      return "Turtle " + who + " (dead)";
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:293:    return "Turtle " + who + " update (mask "
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:315:      System.err.println("@ " + new java.util.Date() + " : ");
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:316:      System.err.println("ERROR: attempting incremental update of a "
src/main/org/nlogo/hubnet/mirroring/TurtleData.java:317:          + "dead turtle (" + stringRep() + ").");
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:27:      "ALL PLOTS" :: widgets.map{ widget =>
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:28:        if (widget(0) == "VIEW") "VIEW"
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:31:          if (widget(0) == "CHOOSER")
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:32:            chooserChoices(tag) = compiler.readFromString("[ " + widget(7) + " ]").asInstanceOf[LogoList]
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:50:  def containsViewWidget = widgets != null && widgets.exists(w => w(0) == "VIEW")
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:53:    "ClientInterface(\n\t" + "TURTLE SHAPES = " + turtleShapes + "\n\t" +
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:54:    "LINK SHAPES = " + linkShapes + "\n\t" +
src/main/org/nlogo/hubnet/protocol/ClientInterface.scala:55:    "WIDGETS = " + widgetDescriptions + ")"
src/main/org/nlogo/hubnet/protocol/Messages.scala:98:      throw new IOException("Cannot deserialize DiscoveryMessage: version mismatch")
src/main/org/nlogo/hubnet/protocol/TestClient.scala:19:case class TestClient(userId: String, clientType: String="COMPUTER", ip:String="127.0.0.1", port:Int=9173,
src/main/org/nlogo/hubnet/protocol/TestClient.scala:58:        case r => throw new IllegalStateException(userId + " handshake failed. response:" + r)
src/main/org/nlogo/hubnet/protocol/TestClient.scala:62:      case e:Exception => throw new IllegalStateException("dead client: " + userId)
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:42:    "You can only send strings, booleans (true or false), numbers, and lists of these types."
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:107:      if (portToTry > Ports.MAX_PORT_NUMBER) throw new BindException("port: " + portToTry)
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:121:      nodeThread = new Thread(this) {setName("org.nlogo.hubnet.server.ConnectionManager")}
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:127:        val message = "Could not start the HubNet server. No ports are available."
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:149:        for (conn <- clients.values) {disconnectClient(conn, true, "Shutting Down.")}
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:265:    if (!isValidTag(tag)) throw new HubNetException(tag + " is not a valid tag on the client.")
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:277:    if (!isValidTag(tag)) throw new HubNetException(tag + " is not a valid tag on the client.")
src/main/org/nlogo/hubnet/server/ConnectionManager.scala:326:        disconnectClient(conn, true, "Kicked from Control Center.")
src/main/org/nlogo/hubnet/server/DiscoveryAnnouncer.scala:25:      System.err.println("@ " + new java.util.Date() + " : ")
src/main/org/nlogo/hubnet/server/DiscoveryAnnouncer.scala:26:      System.err.println("Error: " + err + "\n\t" + ex)
src/main/org/nlogo/hubnet/server/DiscoveryAnnouncer.scala:31:        dump("could not map the multicast group " + SERVER_DISCOVERY_MULTICAST_GROUP + " to an InetAddress", uhe)
src/main/org/nlogo/hubnet/server/DiscoveryAnnouncer.scala:37:        dump("Error creating multicast socket to port " + SERVER_DISCOVERY_MULTICAST_PORT, ioe)
src/main/org/nlogo/hubnet/server/DiscoveryAnnouncer.scala:46:      catch {case ioe: IOException => dump("Could not transmit multicast announcement.", ioe)}
src/main/org/nlogo/hubnet/server/DiscoveryAnnouncer.scala:48:      catch { case ie: InterruptedException => dump("Multicast announcement thread interrupted.\n\t", ie) }
src/main/org/nlogo/hubnet/server/gui/ControlCenter.scala:90:      putClientProperty("Quaqua.List.style", "striped")
src/main/org/nlogo/hubnet/server/gui/ControlCenter.scala:194:        logMessage("<Leader> " + message + "\n")
src/main/org/nlogo/hubnet/server/gui/ControlCenter.scala:196:        broadcastMessage("" + currentTime + "   <Leader> " + message)
src/main/org/nlogo/hubnet/server/gui/ControlCenter.scala:206:      val newMessage = "" + currentTime + "   " + message
src/main/org/nlogo/hubnet/server/gui/ControlCenter.scala:209:        messageTextArea.getText() + (if (newMessage.endsWith("\n")) newMessage else newMessage) + "\n")
src/main/org/nlogo/hubnet/server/gui/GUIHubNetManager.scala:24:  private var serverName: String = System.getProperty("org.nlogo.hubnet.server.name")
src/main/org/nlogo/hubnet/server/gui/GUIHubNetManager.scala:46:    val clientApp = Femto.get(classOf[ClientAppInterface], "org.nlogo.hubnet.client.ClientApp", Array[AnyRef]())
src/main/org/nlogo/hubnet/server/gui/GUIHubNetManager.scala:128:    Some("unimplemented")
src/main/org/nlogo/hubnet/server/gui/HubNetClientEditor.scala:26:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/hubnet/server/gui/HubNetClientEditor.scala:77:    val t = if (!System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/hubnet/server/gui/HubNetClientEditor.scala:85:    if (mt == ModelType.NORMAL) t + " {" + directory + "}" else t
src/main/org/nlogo/hubnet/server/gui/StartupDialog.scala:11:    setText(System.getProperty("user.name", ""))
src/main/org/nlogo/hubnet/server/gui/StartupDialog.scala:13:  private val discoveryCheckBox = new JCheckBox("Broadcast server location") {
src/main/org/nlogo/hubnet/server/gui/StartupDialog.scala:21:    val okButton = new JButton("Start"){ addActionListener(() => StartupDialog.this.setVisible(false)) }
src/main/org/nlogo/hubnet/server/gui/StartupDialog.scala:28:      add(new TextFieldBox(){addField("Session name:", nameField)})
src/main/org/nlogo/hubnet/server/gui/StartupDialog.scala:40:    setTitle("Start HubNet Activity")
src/main/org/nlogo/hubnet/server/HeadlessHubNetManager.scala:57:    var serverName: String = System.getProperty("org.nlogo.hubnet.server.name")
src/main/org/nlogo/hubnet/server/HeadlessHubNetManager.scala:58:    if(serverName == null || serverName.trim == "") serverName = System.getProperty("user.name", "")
src/main/org/nlogo/hubnet/server/HeadlessHubNetManager.scala:88:          new TestClient(userId="Local " + clientIds.next(), port=connectionManager.port)
src/main/org/nlogo/hubnet/server/HeadlessHubNetManager.scala:103:      case _ => Some("client not found: " + clientName)
src/main/org/nlogo/hubnet/server/HubNetManager.scala:19:    "There is no data waiting.  Always check for data using " +
src/main/org/nlogo/hubnet/server/HubNetManager.scala:20:            "HUBNET-MESSAGE-WAITING? before fetching data with " +
src/main/org/nlogo/hubnet/server/HubNetManager.scala:21:            "HUBNET-FETCH-MESSAGE."
src/main/org/nlogo/hubnet/server/HubNetManager.scala:23:    "The data has not been fetched.  Always fetch the data " +
src/main/org/nlogo/hubnet/server/HubNetManager.scala:24:            "with HUBNET-FETCH-MESSAGE before you try to access the data with " +
src/main/org/nlogo/hubnet/server/HubNetManager.scala:25:            "HUBNET-MESSAGE or HUBNET-MESSAGE-SOURCE or HUBNET-MESSAGE-TAG"
src/main/org/nlogo/hubnet/server/HubNetManager.scala:27:  val NOT_LOGGED_IN = "Not logged in.  Please use the hubnet-reset command."
src/main/org/nlogo/hubnet/server/HubNetManager.scala:182:    if (connectionManager.isRunning && someNodesHaveView) broadcast("VIEW", obj)
src/main/org/nlogo/hubnet/server/HubNetManager.scala:216:  def kick(userId:String){ connectionManager.removeClient(userId, true, "Kicked out.") }
src/main/org/nlogo/hubnet/server/HubNetManager.scala:251:    throw new IllegalStateException("unreachable")
src/main/org/nlogo/hubnet/server/HubNetUtils.scala:36:      println("deflated: " + message + deflatedBytesOutput.size + " bytes")
src/main/org/nlogo/hubnet/server/HubNetUtils.scala:37:      println(message + byteOutput.size + " bytes")
src/main/org/nlogo/hubnet/server/HubNetUtils.scala:40:          println("choked: ")
src/main/org/nlogo/hubnet/server/ServerPlotManager.scala:68:  def clearAll() { broadcastToClients('a', "ALL PLOTS") }
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:28:        extends AbstractConnection("ServerSideConnection", connectionStreams) {
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:47:          dieHard(reason="Received message out of order: " + a)
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:51:      case _ => dieHard(reason="Unknown message type: " + a.getClass)
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:72:          sendData(new LoginFailure("The version of the HubNet Client you are using does not "
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:73:                  + "match the version of the server. Please use the HubNet Client that comes with " + Version.version))
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:76:          sendData(new LoginFailure("The HubNet model you are connected to does not support your client type: " + clientType))
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:89:            sendData(new LoginFailure("\"" + clientId + "\" is already taken by another user. Please choose another name."))
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:118:        dieHard(reason="Unknown message type: " + message.getClass)
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:160:          "An incompatible version of the HubNet Client tried logging in. " +
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:161:          "Please ensure that everyone is using the version of the HubNet Client that  came with this release. " +
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:168:          System.err.println("@ " + new Date() + " : ")
src/main/org/nlogo/hubnet/server/ServerSideConnection.scala:169:          System.err.println( "sending exception:\n" + e )
src/main/org/nlogo/job/JobManager.scala:89:        println("erowiejrwoeijrwoeijr wtf")
src/main/org/nlogo/job/JobThread.java:32:    super("JobThread");
src/main/org/nlogo/lab/Exporter.scala:22:        "BehaviorSpace results (" + Version.version + ")"))
src/main/org/nlogo/lab/Exporter.scala:29:        new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss:SSS Z")
src/main/org/nlogo/lab/Exporter.scala:33:        Array("min-pxcor", "max-pxcor", "min-pycor", "max-pycor")))
src/main/org/nlogo/lab/gui/ManagerDialog.scala:36:    jlist.putClientProperty("Quaqua.List.style", "striped")
src/main/org/nlogo/lab/gui/ManagerDialog.scala:98:        "experiment", "setup", "go", "", 1, true, 0, "", List("count turtles"),
src/main/org/nlogo/lab/gui/ManagerDialog.scala:122:    val message = "Are you sure you want to delete " +
src/main/org/nlogo/lab/gui/ManagerDialog.scala:123:      (if(selected.length > 1) "these " + selected.length + " experiments?"
src/main/org/nlogo/lab/gui/ManagerDialog.scala:124:       else "\"" + listModel.getElementAt(selected(0)).asInstanceOf[Protocol].name + "\"?")
src/main/org/nlogo/lab/gui/ManagerDialog.scala:125:    if(JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, message, "Delete", JOptionPane.YES_NO_OPTION)) {
src/main/org/nlogo/lab/gui/ProgressDialog.scala:27:  private var elapsed = "0:00:00"
src/main/org/nlogo/lab/gui/ProgressDialog.scala:44:      val plotWidget = PlotWidget("Behavior Plot", new DummyPlotManager)
src/main/org/nlogo/lab/gui/ProgressDialog.scala:50:      plotWidget.xLabel("Time")
src/main/org/nlogo/lab/gui/ProgressDialog.scala:51:      plotWidget.yLabel("Behavior")
src/main/org/nlogo/lab/gui/ProgressDialog.scala:65:    setTitle("Running Experiment: " + protocol.name)
src/main/org/nlogo/lab/gui/ProgressDialog.scala:126:  lazy val abortAction = PimpedAction("Abort") { _ =>
src/main/org/nlogo/lab/gui/ProgressDialog.scala:130:  lazy val periodicUpdateAction = PimpedAction("update elapsed time") { _ =>
src/main/org/nlogo/lab/gui/ProgressDialog.scala:134:  lazy val displaySwitchAction = PimpedAction("Update view") { e =>
src/main/org/nlogo/lab/gui/ProgressDialog.scala:137:  lazy val plotsAndMonitorsSwitchAction = PimpedAction("Update plots and monitors") { e =>
src/main/org/nlogo/lab/gui/ProgressDialog.scala:162:      for ((name, value) <- settings) settingsString += name + " = " + Dump.logoObject(value) + "\n"
src/main/org/nlogo/lab/gui/ProgressDialog.scala:222:    val newElapsed = hours + ":" + minutes + ":" + seconds
src/main/org/nlogo/lab/gui/ProgressDialog.scala:227:          progressArea.setText("Run #" + runCount + " of " + totalRuns + ", " +
src/main/org/nlogo/lab/gui/ProgressDialog.scala:228:                  "step #" + steps + "\n" +
src/main/org/nlogo/lab/gui/ProgressDialog.scala:229:                  "Total elapsed time: " + elapsed + "\n" + settingsString)
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:18:  val classDisplayName = "Experiment"
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:29:           Property("valueSets", Property.ReporterOrEmpty,
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:33:           Property("metrics", Property.ReporterOrEmpty,
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:61:      "[\"" + valueSet.variableName + "\" " +
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:75:        window, "Invalid spec for varying variables. Error:\n" + message,
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:76:       "Invalid", javax.swing.JOptionPane.ERROR_MESSAGE)
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:86:            compiler.readFromString("[" + valueSets + "]").asInstanceOf[LogoList]
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:102:                  complain("Expected three numbers here: " + Dump.list(more)); return None
src/main/org/nlogo/lab/gui/ProtocolEditable.scala:107:              complain("Invalid format"); return None
src/main/org/nlogo/lab/gui/RunOptionsDialog.scala:24:    val classDisplayName = "Run options"
src/main/org/nlogo/lab/gui/RunOptionsDialog.scala:27:        Property("spreadsheet", Property.Boolean, "Spreadsheet output"),
src/main/org/nlogo/lab/gui/RunOptionsDialog.scala:28:        Property("table", Property.Boolean, "Table output"),
src/main/org/nlogo/lab/gui/RunOptionsDialog.scala:29:        Property("threadCount", Property.Integer, "Simultaneous runs in parallel",
src/main/org/nlogo/lab/gui/RunOptionsDialog.scala:30:                 "<html>If more than one, some runs happen invisibly in the background." +
src/main/org/nlogo/lab/gui/RunOptionsDialog.scala:31:                 "<br>Defaults to one per processor core.</html>"))
src/main/org/nlogo/lab/gui/Supervisor.scala:20:  extends Thread("BehaviorSpace Supervisor")
src/main/org/nlogo/lab/gui/Supervisor.scala:34:            System.err.println("Run #" + runNumber + ", RUNTIME ERROR: " + msg)
src/main/org/nlogo/lab/gui/Supervisor.scala:37:            System.err.println("Run #" + runNumber + ", RUNTIME ERROR: " + le.getMessage)
src/main/org/nlogo/lab/gui/Supervisor.scala:40:            System.err.println("Run #" + runNumber + ", JAVA EXCEPTION: " + e.getMessage)
src/main/org/nlogo/lab/gui/Supervisor.scala:50:  private val workerThread  = new Thread(runnable, "BehaviorSpace Worker")
src/main/org/nlogo/lab/gui/Supervisor.scala:72:        workspace.getFrame, "Exporting as spreadsheet", java.awt.FileDialog.SAVE,
src/main/org/nlogo/lab/gui/Supervisor.scala:73:        workspace.guessExportName(worker.protocol.name + "-spreadsheet.csv"))
src/main/org/nlogo/lab/gui/Supervisor.scala:82:        workspace.getFrame, "Exporting as table", java.awt.FileDialog.SAVE,
src/main/org/nlogo/lab/gui/Supervisor.scala:83:        workspace.guessExportName(worker.protocol.name + "-table.csv"))
src/main/org/nlogo/lab/gui/Supervisor.scala:140:          workspace.getFrame, "Error During Experiment",
src/main/org/nlogo/lab/gui/Supervisor.scala:141:          "Experiment aborted due to syntax error:\n" + ex.getMessage,
src/main/org/nlogo/lab/gui/Supervisor.scala:145:          workspace.getFrame, "Error During Experiment",
src/main/org/nlogo/lab/gui/Supervisor.scala:146:          "Experiment aborted due to runtime error:\n" + ex.getMessage,
src/main/org/nlogo/lab/gui/Supervisor.scala:150:          workspace.getFrame, "Error During Experiment",
src/main/org/nlogo/lab/gui/Supervisor.scala:151:          "Experiment aborted due to I/O error:\n" + ex.getMessage,
src/main/org/nlogo/lab/Lab.scala:22:          "experiment '" + protocolName + "' not found")
src/main/org/nlogo/lab/Lab.scala:59:                System.err.println("Run #" + runNumber + ", RUNTIME ERROR: " + msg)
src/main/org/nlogo/lab/Lab.scala:62:                System.err.println("Run #" + runNumber + ", RUNTIME ERROR: " + t.getMessage)
src/main/org/nlogo/lab/Lab.scala:65:                System.err.println("Run #" + runNumber + ", JAVA EXCEPTION: " + t.getMessage)
src/main/org/nlogo/lab/package.html:5:<body bgcolor="white">
src/main/org/nlogo/lab/package.html:15:Protocol.  In the GUI, this is called an "experiment setup".
src/main/org/nlogo/lab/Protocol.scala:19:    name + " (" + countRuns + " run" + (if(countRuns != 1) "s" else "") + ")"
src/main/org/nlogo/lab/ProtocolLoader.scala:11:  val DOCTYPE = "<!DOCTYPE experiments SYSTEM \"behaviorspace.dtd\">"
src/main/org/nlogo/lab/ProtocolLoader.scala:23:        "no experiment named \"" + name + "\""))
src/main/org/nlogo/lab/ProtocolLoader.scala:27:        "no experiment named \"" + name + "\""))
src/main/org/nlogo/lab/ProtocolLoader.scala:34:    str.replaceAll("runMetricsEveryTick=\"", "runMetricsEveryStep=\"")
src/main/org/nlogo/lab/ProtocolLoader.scala:35:       .replaceAll("<timeLimit ticks=\"", "<timeLimit steps=\"")
src/main/org/nlogo/lab/ProtocolLoader.scala:52:      inputSource.setSystemId(getClass.getResource("/system/").toString)
src/main/org/nlogo/lab/ProtocolLoader.scala:62:        .getElementsByTagName("experiment")
src/main/org/nlogo/lab/ProtocolLoader.scala:77:          new SteppedValueSet(e.getAttribute("variable"),parse("first"),
src/main/org/nlogo/lab/ProtocolLoader.scala:78:                              parse("step"),parse("last"))
src/main/org/nlogo/lab/ProtocolLoader.scala:81:          new EnumeratedValueSet(e.getAttribute("variable"),
src/main/org/nlogo/lab/ProtocolLoader.scala:82:                                 e.getElementsByTagName("value")
src/main/org/nlogo/lab/ProtocolLoader.scala:84:                                   services.readFromString(e.getAttribute("value"))))
src/main/org/nlogo/lab/ProtocolLoader.scala:87:              case "steppedValueSet" => Some(readSteppedValueSetElement(e))
src/main/org/nlogo/lab/ProtocolLoader.scala:88:              case "enumeratedValueSet" => Some(readEnumeratedValueSetElement(e))
src/main/org/nlogo/lab/ProtocolLoader.scala:93:        element.getAttribute("name"),
src/main/org/nlogo/lab/ProtocolLoader.scala:94:        readOptional("setup"),
src/main/org/nlogo/lab/ProtocolLoader.scala:95:        readOptional("go"),
src/main/org/nlogo/lab/ProtocolLoader.scala:96:        readOptional("final"),
src/main/org/nlogo/lab/ProtocolLoader.scala:97:        element.getAttribute("repetitions").toInt,
src/main/org/nlogo/lab/ProtocolLoader.scala:98:        element.getAttribute("runMetricsEveryStep") == "true",
src/main/org/nlogo/lab/ProtocolLoader.scala:99:        if(!exists("timeLimit")) 0 else readOneAttribute("timeLimit","steps").toInt,
src/main/org/nlogo/lab/ProtocolLoader.scala:100:        if(!exists("exitCondition")) "" else readOptional("exitCondition"),
src/main/org/nlogo/lab/ProtocolLoader.scala:101:        readAll("metric"),
src/main/org/nlogo/lab/ProtocolSaver.scala:29:    tf.setAttribute("indent-number", 2)
src/main/org/nlogo/lab/ProtocolSaver.scala:32:    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes")
src/main/org/nlogo/lab/ProtocolSaver.scala:33:    transformer.setOutputProperty(OutputKeys.INDENT, "yes")
src/main/org/nlogo/lab/ProtocolSaver.scala:36:    hd.startElement("", "", "experiments", attributes())
src/main/org/nlogo/lab/ProtocolSaver.scala:38:    hd.endElement("", "", "experiments")
src/main/org/nlogo/lab/ProtocolSaver.scala:45:      result.addAttribute("", "", name, "CDATA", value)
src/main/org/nlogo/lab/ProtocolSaver.scala:58:    hd.startElement("", "", "experiment",
src/main/org/nlogo/lab/ProtocolSaver.scala:59:                    attributes(("name", protocol.name),
src/main/org/nlogo/lab/ProtocolSaver.scala:60:                               ("repetitions", protocol.repetitions.toString),
src/main/org/nlogo/lab/ProtocolSaver.scala:61:                               ("runMetricsEveryStep", protocol.runMetricsEveryStep.toString)))
src/main/org/nlogo/lab/ProtocolSaver.scala:63:      element("setup", protocol.setupCommands)
src/main/org/nlogo/lab/ProtocolSaver.scala:65:      element("go", protocol.goCommands)
src/main/org/nlogo/lab/ProtocolSaver.scala:67:      element("final", protocol.finalCommands)
src/main/org/nlogo/lab/ProtocolSaver.scala:69:      elementWithAttributes("timeLimit",
src/main/org/nlogo/lab/ProtocolSaver.scala:70:                            attributes(("steps",protocol.timeLimit.toString)))
src/main/org/nlogo/lab/ProtocolSaver.scala:72:      element("exitCondition", protocol.exitCondition)
src/main/org/nlogo/lab/ProtocolSaver.scala:74:      element("metric", metric)
src/main/org/nlogo/lab/ProtocolSaver.scala:79:            "steppedValueSet",
src/main/org/nlogo/lab/ProtocolSaver.scala:80:            attributes(("variable", valueSet.variableName),
src/main/org/nlogo/lab/ProtocolSaver.scala:81:                       ("first", Dump.number(steppedValueSet.firstValue)),
src/main/org/nlogo/lab/ProtocolSaver.scala:82:                       ("step", Dump.number(steppedValueSet.step)),
src/main/org/nlogo/lab/ProtocolSaver.scala:83:                       ("last", Dump.number(steppedValueSet.lastValue))))
src/main/org/nlogo/lab/ProtocolSaver.scala:85:          hd.startElement("", "", "enumeratedValueSet",
src/main/org/nlogo/lab/ProtocolSaver.scala:86:                          attributes(("variable", valueSet.variableName)))
src/main/org/nlogo/lab/ProtocolSaver.scala:88:            elementWithAttributes("value",
src/main/org/nlogo/lab/ProtocolSaver.scala:89:                                  attributes(("value", Dump.logoObject(value,true,false))))
src/main/org/nlogo/lab/ProtocolSaver.scala:90:          hd.endElement("", "", "enumeratedValueSet")
src/main/org/nlogo/lab/ProtocolSaver.scala:92:    hd.endElement("", "", "experiment")
src/main/org/nlogo/lab/SpreadsheetExporter.scala:61:    out.print(Dump.csv.header("[run number]"))
src/main/org/nlogo/lab/SpreadsheetExporter.scala:85:      out.print(Dump.csv.header("[reporter]"))
src/main/org/nlogo/lab/SpreadsheetExporter.scala:89:      out.print(Dump.csv.header("[final]") + ",")
src/main/org/nlogo/lab/SpreadsheetExporter.scala:92:      out.print(Dump.csv.header("[min]") + ",")
src/main/org/nlogo/lab/SpreadsheetExporter.scala:95:      out.print(Dump.csv.header("[max]") + ",")
src/main/org/nlogo/lab/SpreadsheetExporter.scala:98:      out.print(Dump.csv.header("[mean]") + ",")
src/main/org/nlogo/lab/SpreadsheetExporter.scala:102:    out.print(Dump.csv.header("[steps]") + ",")
src/main/org/nlogo/lab/SpreadsheetExporter.scala:115:    out.print(Dump.csv.header(if(protocol.runMetricsEveryStep) "[all run data]"
src/main/org/nlogo/lab/SpreadsheetExporter.scala:116:                              else "[initial & final values]"))
src/main/org/nlogo/lab/TableExporter.scala:44:      "[run number]" :: protocol.valueSets.map(_.variableName) :::
src/main/org/nlogo/lab/TableExporter.scala:45:      "[step]" :: protocol.metrics
src/main/org/nlogo/lab/Worker.scala:66:                                                + "__experimentstepend")
src/main/org/nlogo/lab/Worker.scala:78:      new SimpleJobOwner("BehaviorSpace", rng, classOf[Observer])
src/main/org/nlogo/lab/Worker.scala:114:                throw new FailedException("You cannot set " + name + " to " + v)
src/main/org/nlogo/lab/Worker.scala:117:          else if(name.equalsIgnoreCase("RANDOM-SEED"))
src/main/org/nlogo/lab/Worker.scala:122:          if(!world.isDimensionVariable(name) && !name.equalsIgnoreCase("RANDOM-SEED"))
src/main/org/nlogo/lab/Worker.scala:126:                  "Global variable does not exist:\n" + name)
src/main/org/nlogo/lab/Worker.scala:141:                  "Stopping condition failed to report a result:\n" +
src/main/org/nlogo/lab/Worker.scala:145:                  "Stopping condition should report true or false, but instead reported the " +
src/main/org/nlogo/lab/Worker.scala:154:              "Reporter for measuring runs failed to report a result:\n" + result)
src/main/org/nlogo/lex/Tokenizer.scala:44:    val eof = new Token("", TokenType.EOF, "")(0, 0, "")
src/main/org/nlogo/lex/TokenLexer.java:20:@SuppressWarnings({"unused","fallthrough"})
src/main/org/nlogo/lex/TokenLexer.java:56:    "\10\0\2\5\1\6\2\0\1\4\22\0\1\5\1\3\1\2\5\3"+
src/main/org/nlogo/lex/TokenLexer.java:57:    "\1\15\1\16\2\3\1\12\1\20\1\21\1\3\12\22\1\3\1\17"+
src/main/org/nlogo/lex/TokenLexer.java:58:    "\4\3\1\0\32\3\1\13\1\1\1\14\1\3\1\7\1\0\15\3"+
src/main/org/nlogo/lex/TokenLexer.java:59:    "\1\3\3\3\1\3\1\3\1\3\6\3\1\10\1\0\1\11\54\0"+
src/main/org/nlogo/lex/TokenLexer.java:60:    "\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:61:    "\u013f\3\31\0\162\3\4\0\14\3\16\0\5\3\11\0\1\3\213\0"+
src/main/org/nlogo/lex/TokenLexer.java:62:    "\1\3\13\0\1\3\1\0\3\3\1\0\1\3\1\0\24\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:63:    "\54\3\1\0\46\3\1\0\5\3\4\0\202\3\10\0\105\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:64:    "\46\3\2\0\2\3\6\0\20\3\41\0\46\3\2\0\1\3\7\0"+
src/main/org/nlogo/lex/TokenLexer.java:65:    "\47\3\110\0\33\3\5\0\3\3\56\0\32\3\5\0\13\3\25\0"+
src/main/org/nlogo/lex/TokenLexer.java:66:    "\12\3\4\0\2\3\1\0\143\3\1\0\1\3\17\0\2\3\7\0"+
src/main/org/nlogo/lex/TokenLexer.java:67:    "\2\3\12\3\3\3\2\0\1\3\20\0\1\3\1\0\36\3\35\0"+
src/main/org/nlogo/lex/TokenLexer.java:68:    "\3\3\60\0\46\3\13\0\1\3\u0152\0\66\3\3\0\1\3\22\0"+
src/main/org/nlogo/lex/TokenLexer.java:69:    "\1\3\7\0\12\3\4\0\12\3\25\0\10\3\2\0\2\3\2\0"+
src/main/org/nlogo/lex/TokenLexer.java:70:    "\26\3\1\0\7\3\1\0\1\3\3\0\4\3\3\0\1\3\36\0"+
src/main/org/nlogo/lex/TokenLexer.java:71:    "\2\3\1\0\3\3\4\0\12\3\2\3\23\0\6\3\4\0\2\3"+
src/main/org/nlogo/lex/TokenLexer.java:72:    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\2\3\1\0\2\3"+
src/main/org/nlogo/lex/TokenLexer.java:73:    "\37\0\4\3\1\0\1\3\7\0\12\3\2\0\3\3\20\0\11\3"+
src/main/org/nlogo/lex/TokenLexer.java:74:    "\1\0\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3"+
src/main/org/nlogo/lex/TokenLexer.java:75:    "\3\0\1\3\22\0\1\3\17\0\2\3\4\0\12\3\25\0\10\3"+
src/main/org/nlogo/lex/TokenLexer.java:76:    "\2\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3"+
src/main/org/nlogo/lex/TokenLexer.java:77:    "\3\0\1\3\36\0\2\3\1\0\3\3\4\0\12\3\1\0\1\3"+
src/main/org/nlogo/lex/TokenLexer.java:78:    "\21\0\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3"+
src/main/org/nlogo/lex/TokenLexer.java:79:    "\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\10\3"+
src/main/org/nlogo/lex/TokenLexer.java:80:    "\1\0\3\3\55\0\11\3\25\0\10\3\1\0\3\3\1\0\27\3"+
src/main/org/nlogo/lex/TokenLexer.java:81:    "\1\0\12\3\1\0\5\3\46\0\2\3\4\0\12\3\25\0\10\3"+
src/main/org/nlogo/lex/TokenLexer.java:82:    "\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0\1\3"+
src/main/org/nlogo/lex/TokenLexer.java:83:    "\40\0\1\3\1\0\2\3\4\0\12\3\25\0\10\3\1\0\3\3"+
src/main/org/nlogo/lex/TokenLexer.java:84:    "\1\0\27\3\1\0\20\3\46\0\2\3\4\0\12\3\25\0\22\3"+
src/main/org/nlogo/lex/TokenLexer.java:85:    "\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3\72\0\60\3"+
src/main/org/nlogo/lex/TokenLexer.java:86:    "\1\0\2\3\14\0\7\3\11\0\12\3\47\0\2\3\1\0\1\3"+
src/main/org/nlogo/lex/TokenLexer.java:89:    "\1\0\2\3\11\0\1\3\2\0\5\3\1\0\1\3\11\0\12\3"+
src/main/org/nlogo/lex/TokenLexer.java:90:    "\2\0\2\3\42\0\1\3\37\0\12\3\26\0\10\3\1\0\42\3"+
src/main/org/nlogo/lex/TokenLexer.java:91:    "\35\0\4\3\164\0\42\3\1\0\5\3\1\0\2\3\25\0\12\3"+
src/main/org/nlogo/lex/TokenLexer.java:92:    "\6\0\6\3\112\0\46\3\12\0\51\3\7\0\132\3\5\0\104\3"+
src/main/org/nlogo/lex/TokenLexer.java:93:    "\5\0\122\3\6\0\7\3\1\0\77\3\1\0\1\3\1\0\4\3"+
src/main/org/nlogo/lex/TokenLexer.java:94:    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\47\3\1\0\1\3"+
src/main/org/nlogo/lex/TokenLexer.java:95:    "\1\0\4\3\2\0\37\3\1\0\1\3\1\0\4\3\2\0\7\3"+
src/main/org/nlogo/lex/TokenLexer.java:96:    "\1\0\1\3\1\0\4\3\2\0\7\3\1\0\7\3\1\0\27\3"+
src/main/org/nlogo/lex/TokenLexer.java:97:    "\1\0\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0\47\3"+
src/main/org/nlogo/lex/TokenLexer.java:98:    "\1\0\23\3\16\0\11\3\56\0\125\3\14\0\u026c\3\2\0\10\3"+
src/main/org/nlogo/lex/TokenLexer.java:99:    "\12\0\32\3\5\0\113\3\25\0\15\3\1\0\4\3\16\0\22\3"+
src/main/org/nlogo/lex/TokenLexer.java:100:    "\16\0\22\3\16\0\15\3\1\0\3\3\17\0\64\3\43\0\1\3"+
src/main/org/nlogo/lex/TokenLexer.java:101:    "\4\0\1\3\3\0\12\3\46\0\12\3\6\0\130\3\10\0\51\3"+
src/main/org/nlogo/lex/TokenLexer.java:102:    "\127\0\35\3\51\0\12\3\36\3\2\0\5\3\u038b\0\154\3\224\0"+
src/main/org/nlogo/lex/TokenLexer.java:103:    "\234\3\4\0\132\3\6\0\26\3\2\0\6\3\2\0\46\3\2\0"+
src/main/org/nlogo/lex/TokenLexer.java:104:    "\6\3\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:105:    "\37\3\2\0\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:106:    "\7\3\3\0\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:107:    "\7\3\164\0\1\3\15\0\1\3\202\0\1\3\4\0\1\3\2\0"+
src/main/org/nlogo/lex/TokenLexer.java:108:    "\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:110:    "\5\3\u0ebb\0\2\3\52\0\5\3\5\0\2\3\4\0\126\3\6\0"+
src/main/org/nlogo/lex/TokenLexer.java:111:    "\3\3\1\0\132\3\1\0\4\3\5\0\50\3\4\0\136\3\21\0"+
src/main/org/nlogo/lex/TokenLexer.java:112:    "\30\3\70\0\20\3\u0200\0\u19b6\3\112\0\u51a6\3\132\0\u048d\3\u0773\0"+
src/main/org/nlogo/lex/TokenLexer.java:113:    "\u2ba4\3\u215c\0\u012e\3\2\0\73\3\225\0\7\3\14\0\5\3\5\0"+
src/main/org/nlogo/lex/TokenLexer.java:114:    "\1\3\1\0\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:115:    "\2\3\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0"+
src/main/org/nlogo/lex/TokenLexer.java:116:    "\66\3\50\0\14\3\164\0\5\3\1\0\207\3\23\0\12\3\7\0"+
src/main/org/nlogo/lex/TokenLexer.java:117:    "\32\3\6\0\32\3\13\0\131\3\3\0\6\3\2\0\6\3\2\0"+
src/main/org/nlogo/lex/TokenLexer.java:118:    "\6\3\2\0\3\3\43\0";
src/main/org/nlogo/lex/TokenLexer.java:132:    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
src/main/org/nlogo/lex/TokenLexer.java:133:    "\2\4\1\16\1\1\1\17\1\20\1\21\2\20\1\0"+
src/main/org/nlogo/lex/TokenLexer.java:134:    "\1\22\1\0\1\23\1\24\1\25\1\26";
src/main/org/nlogo/lex/TokenLexer.java:163:    "Unkown internal scanner error",
src/main/org/nlogo/lex/TokenLexer.java:164:    "Error: could not match input",
src/main/org/nlogo/lex/TokenLexer.java:165:    "Error: pushback value was too large"
src/main/org/nlogo/lex/TokenLexer.java:475:   * will only be called with things that "Can't Possibly Happen".
src/main/org/nlogo/lex/TokenLexer.java:763:	return new Token( text , TokenType.BAD , "Closing double quote is missing" , 
src/main/org/nlogo/lex/TokenLexer.java:769:	return new Token( "" , TokenType.BAD , "End of line reached unexpectedly" ,
src/main/org/nlogo/lex/TokenLexer.java:795:	org.nlogo.api.TokenHolder cmd = tokenMapper.getCommand( "__magic-open" ) ;
src/main/org/nlogo/lex/TokenLexer.java:796:	Token token = new Token( "__magic-open" , TokenType.COMMAND , cmd , yychar , yychar + 3 , fileName ) ;
src/main/org/nlogo/lex/TokenLexer.java:807:	return new Token( text , TokenType.BAD , "This non-standard character is not allowed." ,
src/main/org/nlogo/lex/TokenLexer.java:828:		return new Token( text , TokenType.BAD , "Illegal character after backslash" , 
src/main/org/nlogo/lex/TokenLexer.java:837:		( "\"" + text + "\"" , TokenType.CONSTANT , text ,
src/main/org/nlogo/lex/TokenLexer.java:892:	return new Token( "" , TokenType.BAD , "End of file reached unexpectedly" ,
src/main/org/nlogo/lex/TokenMapper.scala:14:  def isKeyword(s: String) = keywords.contains(s.toUpperCase) || s.toUpperCase.endsWith("-OWN")
src/main/org/nlogo/lex/TokenMapper.scala:28:    "FALSE" -> false, "TRUE" -> true, "NOBODY" -> Nobody.NOBODY,
src/main/org/nlogo/lex/TokenMapper.scala:29:    "E" -> StrictMath.E, "PI" -> StrictMath.PI) ++
src/main/org/nlogo/lex/TokenMapper.scala:31:    ("GREY" -> Color.getColorNumberByIndex(Color.getColorNamesArray.indexOf("gray")))
src/main/org/nlogo/lex/TokenMapper.scala:33:    "TO", "TO-REPORT", "END", "GLOBALS", "TURTLES-OWN", "LINKS-OWN",
src/main/org/nlogo/lex/TokenMapper.scala:34:    "PATCHES-OWN", "EXTENSIONS", "__INCLUDES", "DIRECTED-LINK-BREED",
src/main/org/nlogo/lex/TokenMapper.scala:38:      line <- Utils.getResourceLines("/system/tokens.txt")
src/main/org/nlogo/lex/TokenMapper.scala:45:      if is3D || !className.startsWith("threed.")
src/main/org/nlogo/lex/TokenMapper.scala:46:    } yield primName.toUpperCase -> ("org.nlogo.prim." + className)
src/main/org/nlogo/lex/TokenMapper.scala:51:      (primName, className) <- commands ++ reporters if className.startsWith("org.nlogo.prim.dead.")
src/main/org/nlogo/lite/Applet.scala:45:        var name = getParameter("DefaultModel")
src/main/org/nlogo/lite/Applet.scala:46:        if(getCodeBase.toString.startsWith("file:") &&
src/main/org/nlogo/lite/Applet.scala:47:           System.getProperty("os.name").startsWith("Windows"))
src/main/org/nlogo/lite/Applet.scala:74:        Option(e.sourceOwner).map(o => o.classDisplayName + ": ").getOrElse("")
src/main/org/nlogo/lite/Applet.scala:85:    val message = "Model file not found:\n" + name + "\n\n" +
src/main/org/nlogo/lite/Applet.scala:86:      "The model should be in the same directory as the HTML\n" +
src/main/org/nlogo/lite/Applet.scala:87:      "file containing the applet.  (Or, you can modify the defaultModel\n" +
src/main/org/nlogo/lite/Applet.scala:88:      "attribute of the APPLET tag to point to a different location.)\n"
src/main/org/nlogo/lite/Applet.scala:90:    val dialog = pane.createDialog(new JFrame, "Model File Not Found")
src/main/org/nlogo/lite/Applet.scala:95:    val message = "The file is not a valid NetLogo model file."
src/main/org/nlogo/lite/Applet.scala:97:    val dialog = pane.createDialog(new JFrame, "Model File Not Found")
src/main/org/nlogo/lite/AppletPanel.java:29: * <p>See the "Controlling" section of the NetLogo User Manual
src/main/org/nlogo/lite/AppletPanel.java:86:    defaultOwner = new SimpleJobOwner("AppletPanel", workspace.world.mainRNG, Observer.class);
src/main/org/nlogo/lite/AppletPanel.java:147:              RuntimeErrorDialog.show("Runtime Error", null, null,
src/main/org/nlogo/lite/InterfaceComponent.java:23: * <p>See the "Controlling" section of the NetLogo User Manual
src/main/org/nlogo/lite/InterfaceComponent.java:88:   * uses the "display name" to identify the widget. Display names are not
src/main/org/nlogo/lite/InterfaceComponent.java:104:   * <code>hideWidget()</code>. This method uses the "display name" to identify the
src/main/org/nlogo/lite/InterfaceComponent.java:128:      throw new IllegalStateException("couldn't open: '" + path + "'");
src/main/org/nlogo/lite/InterfaceComponent.java:167:   * had pressed the button.  If the button is a "once" button, this method
src/main/org/nlogo/lite/InterfaceComponent.java:168:   * does not return until the button has popped back up.  (For "forever"
src/main/org/nlogo/lite/InterfaceComponent.java:187:    throw new IllegalArgumentException("widget \"" + name + "\" not found");
src/main/org/nlogo/lite/InterfaceComponent.java:232:    new Thread("reportAndCallback") {
src/main/org/nlogo/lite/LiteWorkspace.scala:13:    classOf[CompilerInterface], "org.nlogo.compiler.Compiler")
src/main/org/nlogo/lite/LiteWorkspace.scala:22:              "org.nlogo.sdm.AggregateManagerLite", Array())
src/main/org/nlogo/lite/LiteWorkspace.scala:39:    classOf[RendererInterface], "org.nlogo.render.Renderer", Array(world))
src/main/org/nlogo/lite/ProceduresLite.scala:14:  override def classDisplayName = "Code"
src/main/org/nlogo/log/Logger.java:22:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".BUTTONS");
src/main/org/nlogo/log/Logger.java:24:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".GREENS");
src/main/org/nlogo/log/Logger.java:26:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".CODE");
src/main/org/nlogo/log/Logger.java:28:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".WIDGETS");
src/main/org/nlogo/log/Logger.java:30:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".GLOBALS");
src/main/org/nlogo/log/Logger.java:32:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".SPEED");
src/main/org/nlogo/log/Logger.java:34:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".TURTLES");
src/main/org/nlogo/log/Logger.java:36:      org.apache.log4j.Logger.getLogger(Logger.class.getName() + ".LINKS");
src/main/org/nlogo/log/Logger.java:43:    logDirectory = System.getProperty("java.io.tmpdir");
src/main/org/nlogo/log/Logger.java:57:            System.getProperty("user.home")
src/main/org/nlogo/log/Logger.java:58:                + java.io.File.separatorChar + "dummy.txt";
src/main/org/nlogo/log/Logger.java:100:          xappender.setUsername(System.getProperty("user.name"));
src/main/org/nlogo/log/Logger.java:102:          xappender.setModelName(name == null ? "new model" : name);
src/main/org/nlogo/log/Logger.java:130:    widgetMsg.updateWidgetMessage(type.toLowerCase(), name, "added");
src/main/org/nlogo/log/Logger.java:135:    widgetMsg.updateWidgetMessage(type.toLowerCase(), name, "removed");
src/main/org/nlogo/log/Logger.java:146:  private static LogMessage tickMsg = LogMessage.createGlobalMessage("ticks");
src/main/org/nlogo/log/Logger.java:149:    tickMsg.updateGlobalMessage("ticks", Double.toString(ticks));
src/main/org/nlogo/log/Logger.java:160:    mortalityMsg.updateAgentMessage("turtle", name, "born", breed);
src/main/org/nlogo/log/Logger.java:165:    mortalityMsg.updateAgentMessage("turtle", name, "died", breed);
src/main/org/nlogo/log/Logger.java:174:          (name, "released", (onceButton ? "once" : (stopping ? "user" : "code")));
src/main/org/nlogo/log/Logger.java:180:    buttonMsg.updateButtonMessage(name, "pressed", "user");
src/main/org/nlogo/log/Logger.java:205:  private static LogMessage switchMsg = LogMessage.createGlobalMessage("switch");
src/main/org/nlogo/log/Logger.java:214:  private static LogMessage chooserMsg = LogMessage.createGlobalMessage("chooser");
src/main/org/nlogo/log/Logger.java:223:  private static LogMessage inputBoxMsg = LogMessage.createGlobalMessage("input box");
src/main/org/nlogo/log/Logger.java:237:          (owner.toLowerCase(), "compiled", text, Character.toString(agentType), "success", 0, 0);
src/main/org/nlogo/log/Logger.java:240:          (owner.toLowerCase(), "compiled", text, Character.toString(agentType),
src/main/org/nlogo/log/Logger.java:243:    if (owner.equals("Code")) {
src/main/org/nlogo/log/Logger.java:245:    } else if (!owner.startsWith("Slider")) {
src/main/org/nlogo/log/Logger.java:250:  private static LogMessage globalMsg = LogMessage.createGlobalMessage("globals");
src/main/org/nlogo/log/Logger.java:265:      return "unknown";
src/main/org/nlogo/log/Logger.java:270:      new java.text.SimpleDateFormat("yyyy-MM-dd.HH_mm_ss_SS", java.util.Locale.US);
src/main/org/nlogo/log/Logger.java:274:        + System.getProperty("file.separator") + "logfile_" + appender + "_"
src/main/org/nlogo/log/Logger.java:275:        + dateFormat.format(new java.util.Date()) + ".xml";
src/main/org/nlogo/log/Logger.java:291:            return name.startsWith("logfile_") && name.endsWith(".xml");
src/main/org/nlogo/log/Logger.java:297:          (path + System.getProperty("file.separator") + files[i]);
src/main/org/nlogo/log/Logger.java:312:            return name.startsWith("logfile_") && name.endsWith(".xml");
src/main/org/nlogo/log/Logger.java:327:            return name.startsWith("logfile_") && name.endsWith(".xml");
src/main/org/nlogo/log/Logger.java:336:          String file = path + System.getProperty("file.separator") + files[i];
src/main/org/nlogo/log/Logger.java:364:  @SuppressWarnings("deprecation")
src/main/org/nlogo/log/LogMessage.scala:5:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:6:    msg.attributes = Array(Array("type", tyype))
src/main/org/nlogo/log/LogMessage.scala:7:    msg.elements = Array(new LogMessage("name"),
src/main/org/nlogo/log/LogMessage.scala:8:                         new LogMessage("value"))
src/main/org/nlogo/log/LogMessage.scala:12:    val msg = new LogMessage("parameters")
src/main/org/nlogo/log/LogMessage.scala:13:    msg.elements = Array(new LogMessage("min"),
src/main/org/nlogo/log/LogMessage.scala:14:                         new LogMessage("max"),
src/main/org/nlogo/log/LogMessage.scala:15:                         new LogMessage("inc"))
src/main/org/nlogo/log/LogMessage.scala:19:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:20:    msg.attributes = Array(Array("type", "slider"))
src/main/org/nlogo/log/LogMessage.scala:21:    msg.elements = Array(new LogMessage("action"),
src/main/org/nlogo/log/LogMessage.scala:22:                         new LogMessage("name"),
src/main/org/nlogo/log/LogMessage.scala:23:                         new LogMessage("value"),
src/main/org/nlogo/log/LogMessage.scala:25:    msg.elements(0).data = "changed"
src/main/org/nlogo/log/LogMessage.scala:29:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:30:    msg.attributes = Array(Array("type", "button"))
src/main/org/nlogo/log/LogMessage.scala:31:    msg.elements = Array(new LogMessage("name"),
src/main/org/nlogo/log/LogMessage.scala:32:                         new LogMessage("action"),
src/main/org/nlogo/log/LogMessage.scala:33:                         new LogMessage("releaseType"))
src/main/org/nlogo/log/LogMessage.scala:37:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:38:    msg.attributes = Array(Array("type", null))
src/main/org/nlogo/log/LogMessage.scala:39:    msg.elements = Array(new LogMessage("name"),
src/main/org/nlogo/log/LogMessage.scala:40:                         new LogMessage("action"))
src/main/org/nlogo/log/LogMessage.scala:44:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:45:    msg.attributes = Array(Array("type", null))
src/main/org/nlogo/log/LogMessage.scala:46:    msg.elements = Array(new LogMessage("action"),
src/main/org/nlogo/log/LogMessage.scala:47:                         new LogMessage("code"),
src/main/org/nlogo/log/LogMessage.scala:48:                         new LogMessage("agentType"),
src/main/org/nlogo/log/LogMessage.scala:49:                         new LogMessage("errorMessage"))
src/main/org/nlogo/log/LogMessage.scala:50:    msg.elements(3).attributes = Array(Array("startPos", null),
src/main/org/nlogo/log/LogMessage.scala:51:                                       Array("endPos", null))
src/main/org/nlogo/log/LogMessage.scala:55:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:56:    msg.attributes = Array(Array("type", "speed"))
src/main/org/nlogo/log/LogMessage.scala:57:    msg.elements = Array(new LogMessage("value"))
src/main/org/nlogo/log/LogMessage.scala:61:    val msg = new LogMessage("event")
src/main/org/nlogo/log/LogMessage.scala:62:    msg.attributes = Array(Array("type", null))
src/main/org/nlogo/log/LogMessage.scala:63:    msg.elements = Array(new LogMessage("name"),
src/main/org/nlogo/log/LogMessage.scala:64:                         new LogMessage("action"),
src/main/org/nlogo/log/LogMessage.scala:65:                         new LogMessage("breed"))
src/main/org/nlogo/log/XMLFileAppender.scala:31:      tf.setAttribute("indent-number", 2: java.lang.Integer)
src/main/org/nlogo/log/XMLFileAppender.scala:35:    transformer.setOutputProperty(OutputKeys.INDENT, "yes")
src/main/org/nlogo/log/XMLFileAppender.scala:38:    hd.startDTD("eventSet", "netlogo_logging.dtd", fileName)
src/main/org/nlogo/log/XMLFileAppender.scala:41:    attributes.addAttribute("", "", "username", "CDATA", username) 
src/main/org/nlogo/log/XMLFileAppender.scala:42:    attributes.addAttribute("", "", "name", "CDATA", studentName) 
src/main/org/nlogo/log/XMLFileAppender.scala:43:    attributes.addAttribute("", "", "ipaddress", "CDATA", iPAddress) 
src/main/org/nlogo/log/XMLFileAppender.scala:44:    attributes.addAttribute("", "", "modelName", "CDATA", modelName) 
src/main/org/nlogo/log/XMLFileAppender.scala:45:    attributes.addAttribute("", "", "version", "CDATA", version) 
src/main/org/nlogo/log/XMLFileAppender.scala:46:    hd.startElement("", "", "eventSet", attributes)
src/main/org/nlogo/log/XMLFileAppender.scala:55:      hd.endElement("", "", "eventSet")
src/main/org/nlogo/log/XMLLayout.scala:25:      case _ => "log"
src/main/org/nlogo/log/XMLLayout.scala:27:    attributes.addAttribute("", "", "logger", "CDATA", event.getLoggerName)
src/main/org/nlogo/log/XMLLayout.scala:28:    attributes.addAttribute("", "", "timestamp", "CDATA", event.timeStamp.toString)
src/main/org/nlogo/log/XMLLayout.scala:29:    attributes.addAttribute("", "", "level", "CDATA", event.getLevel.toString)
src/main/org/nlogo/log/XMLLayout.scala:30:    attributes.addAttribute("", "", "type", "CDATA", tyype)
src/main/org/nlogo/log/XMLLayout.scala:31:    hd.startElement("", "", "event", attributes)
src/main/org/nlogo/log/XMLLayout.scala:37:        hd.startElement("", "", "message", attributes)
src/main/org/nlogo/log/XMLLayout.scala:40:        hd.endElement("", "", "message")
src/main/org/nlogo/log/XMLLayout.scala:42:    hd.endElement("", "", "event")
src/main/org/nlogo/log/XMLLayout.scala:49:      attributes.addAttribute("", "", attr(0), "CDATA", attr(1))
src/main/org/nlogo/nvm/Activation.java:32:    result += ":" + procedure.name + "(" + args.length + " args";
src/main/org/nlogo/nvm/Activation.java:33:    result += ", return address = " + returnAddress + ")\n";
src/main/org/nlogo/nvm/Activation.java:35:      result += "  arg " + i + " = " + args[i] + "\n";
src/main/org/nlogo/nvm/Argument.java:166:    String result = "Expected this input to be "
src/main/org/nlogo/nvm/Argument.java:167:        + org.nlogo.nvm.Syntax.aTypeName(wantedType) + " but got "
src/main/org/nlogo/nvm/Argument.java:169:        ? "NOBODY"
src/main/org/nlogo/nvm/Argument.java:170:        : "the " + org.nlogo.nvm.Syntax.typeName(badValue)
src/main/org/nlogo/nvm/Argument.java:172:        + " instead.";
src/main/org/nlogo/nvm/ArgumentTypeException.java:18:    super(context, problemInstr, "message will be built later.");
src/main/org/nlogo/nvm/ArgumentTypeException.java:35:    result += " expected input to be " + Syntax.aTypeName(wantedType);
src/main/org/nlogo/nvm/ArgumentTypeException.java:41:      result += " but got " + Syntax.aTypeName(Syntax.getTypeConstant((Class<?>) badValue)) + " instead";
src/main/org/nlogo/nvm/ArgumentTypeException.java:45:      result += " but got " + (badValue instanceof org.nlogo.api.Nobody
src/main/org/nlogo/nvm/ArgumentTypeException.java:46:          ? "NOBODY"
src/main/org/nlogo/nvm/ArgumentTypeException.java:47:          : "the " + Syntax.typeName(badValue) + " " + badValueStr)
src/main/org/nlogo/nvm/ArgumentTypeException.java:48:          + " instead";
src/main/org/nlogo/nvm/Context.java:30:   * in a forever button's code exits via "stop", then the forever button
src/main/org/nlogo/nvm/Context.java:99:          (this, "stack overflow (recursion too deep)");
src/main/org/nlogo/nvm/Context.java:137:        throw new IllegalStateException("null parent context");
src/main/org/nlogo/nvm/EngineException.java:69:      throw new IllegalStateException("An EngineException must only be 'resolved' once!");
src/main/org/nlogo/nvm/HaltException.scala:6:  extends LogoException("model halted by user")
src/main/org/nlogo/nvm/Instruction.java:238:              breed.printName() + " is a directed breed.");
src/main/org/nlogo/nvm/Instruction.java:247:              breed.printName() + " is an undirected breed.");
src/main/org/nlogo/nvm/Instruction.java:267:              d + " is too large to be represented exactly as an integer in NetLogo");
src/main/org/nlogo/nvm/Instruction.java:304:            "math operation produced "
src/main/org/nlogo/nvm/Instruction.java:306:                ? "a number too large for NetLogo"
src/main/org/nlogo/nvm/Instruction.java:307:                : "a non-number"));
src/main/org/nlogo/nvm/Instruction.java:328:          (context, this, "this code can't be run by "
src/main/org/nlogo/nvm/Instruction.java:330:              ", only " + agentClassDescription(allowedAgentClasses.get(0)));
src/main/org/nlogo/nvm/Instruction.java:333:          (context, this, "this code can't be run by "
src/main/org/nlogo/nvm/Instruction.java:340:      return "the observer";
src/main/org/nlogo/nvm/Instruction.java:342:      return "a turtle";
src/main/org/nlogo/nvm/Instruction.java:344:      return "a patch";
src/main/org/nlogo/nvm/Instruction.java:346:      return "a link";
src/main/org/nlogo/nvm/Job.java:63:    buf.append("(owner: {" + owner + "}, state:");
src/main/org/nlogo/nvm/Job.java:66:        buf.append("running");
src/main/org/nlogo/nvm/Job.java:69:        buf.append("done");
src/main/org/nlogo/nvm/Job.java:72:        buf.append("removed");
src/main/org/nlogo/nvm/Job.java:76:            ("unknown state: " + state);
src/main/org/nlogo/nvm/Lambda.scala:33:    "task expected " + formals.size + " input" + plural + ", but only got " + n
src/main/org/nlogo/nvm/Lambda.scala:41:  override def toString = "(reporter task)"
src/main/org/nlogo/nvm/Procedure.java:72:        "(command task from: " + parent.displayName + ")" :
src/main/org/nlogo/nvm/Procedure.java:73:        (displayName.isDefined() ? displayName.get() : ("procedure " + getNameAndFile()));
src/main/org/nlogo/nvm/Procedure.java:80:    return name + " (" + fileName + ")";
src/main/org/nlogo/nvm/Procedure.java:101:        "[" + name + ":" + Dump.list(args) + ":" + usableBy + "]";
src/main/org/nlogo/nvm/Procedure.java:114:    buf.append(":" + Dump.list(args) + "{" + usableBy + "}:\n");
src/main/org/nlogo/nvm/Pure.java:16: * that are entirely pure.  A reporter is "entirely pure" if it implements Pure,
src/main/org/nlogo/nvm/Pure.java:17: * and all of it's children are "entirely pure".  Entirely pure reporters get
src/main/org/nlogo/nvm/Pure.java:20: * "Pure" reporters *must* not depend on "context", "workspace", "world", etc
src/main/org/nlogo/nvm/StackTraceBuilder.scala:21: * - "plot 'plot 1' setup code" is an anonymous procedure in a plot
src/main/org/nlogo/nvm/StackTraceBuilder.scala:22: * - "RESET-TICKS" is not a procedure, but a command that can trigger
src/main/org/nlogo/nvm/StackTraceBuilder.scala:24: * - "SETUP" is an ordinary procedure
src/main/org/nlogo/nvm/StackTraceBuilder.scala:25: * - "Command Center" is the display name of the dummy top level procedure
src/main/org/nlogo/nvm/StackTraceBuilder.scala:36:      case l: LogoException => l.getMessage + "\nerror while "
src/main/org/nlogo/nvm/StackTraceBuilder.scala:37:      case _ => "error (" + e.getClass.getSimpleName + ")\n while "
src/main/org/nlogo/nvm/StackTraceBuilder.scala:39:    errorMessage.getOrElse("") + agent + " running " + instruction.displayName + "\n" +
src/main/org/nlogo/nvm/StackTraceBuilder.scala:40:      entries(act).map("  called by " + _).mkString("\n")
src/main/org/nlogo/nvm/Syntax.java:303:        return "first";
src/main/org/nlogo/nvm/Syntax.java:305:        return "second";
src/main/org/nlogo/nvm/Syntax.java:307:        return "third";
src/main/org/nlogo/nvm/Syntax.java:309:        return "fourth";
src/main/org/nlogo/nvm/Syntax.java:311:        return "fifth";
src/main/org/nlogo/nvm/Syntax.java:313:        return "sixth";
src/main/org/nlogo/nvm/Syntax.java:315:        return "seventh";
src/main/org/nlogo/nvm/Syntax.java:317:        return "eighth";
src/main/org/nlogo/nvm/Syntax.java:319:        return "ninth";
src/main/org/nlogo/nvm/Syntax.java:321:        return "tenth";
src/main/org/nlogo/nvm/Syntax.java:323:        return "eleventh";
src/main/org/nlogo/nvm/Syntax.java:325:        return "twelfth";
src/main/org/nlogo/nvm/Syntax.java:329:            return num + "st";
src/main/org/nlogo/nvm/Syntax.java:331:            return num + "nd";
src/main/org/nlogo/nvm/Syntax.java:333:            return num + "rd";
src/main/org/nlogo/nvm/Syntax.java:335:            return num + "th";
src/main/org/nlogo/nvm/Syntax.java:344:   * (e.g. "the second input", "the first argument on the right", etc)
src/main/org/nlogo/nvm/Syntax.java:357:        return "the input on the left";
src/main/org/nlogo/nvm/Syntax.java:359:        return "the " + getOrdinalNumberText(argIndex) + " input on the right";
src/main/org/nlogo/nvm/Syntax.java:362:      return "the " + getOrdinalNumberText(argIndex + 1) + " input";
src/main/org/nlogo/nvm/Syntax.java:416:      return "null";
src/main/org/nlogo/nvm/Syntax.java:424:    if (result.equals("NOBODY")) {
src/main/org/nlogo/nvm/Syntax.java:425:      return "NOBODY";
src/main/org/nlogo/nvm/Syntax.java:426:    } else if (result.equals("anything")) {
src/main/org/nlogo/nvm/Syntax.java:434:    String result = "(none)";
src/main/org/nlogo/nvm/Syntax.java:439:      return "variable";
src/main/org/nlogo/nvm/Syntax.java:441:      result = "list or block";
src/main/org/nlogo/nvm/Syntax.java:444:      result = "anything";
src/main/org/nlogo/nvm/Syntax.java:447:      result = "agent";
src/main/org/nlogo/nvm/Syntax.java:450:      result = "number";
src/main/org/nlogo/nvm/Syntax.java:453:      result = "TRUE/FALSE";
src/main/org/nlogo/nvm/Syntax.java:456:      result = "string";
src/main/org/nlogo/nvm/Syntax.java:459:      result = "list";
src/main/org/nlogo/nvm/Syntax.java:462:      result = "agentset";
src/main/org/nlogo/nvm/Syntax.java:465:      result = "turtle agentset";
src/main/org/nlogo/nvm/Syntax.java:468:      result = "patch agentset";
src/main/org/nlogo/nvm/Syntax.java:471:      result = "link agentset";
src/main/org/nlogo/nvm/Syntax.java:474:      result = "turtle";
src/main/org/nlogo/nvm/Syntax.java:477:      result = "patch";
src/main/org/nlogo/nvm/Syntax.java:480:      result = "link";
src/main/org/nlogo/nvm/Syntax.java:483:      result = "reporter task";
src/main/org/nlogo/nvm/Syntax.java:486:      result = "command task";
src/main/org/nlogo/nvm/Syntax.java:489:      result = "NOBODY";
src/main/org/nlogo/nvm/Syntax.java:492:      result = "command block";
src/main/org/nlogo/nvm/Syntax.java:495:      result = "reporter block";
src/main/org/nlogo/nvm/Syntax.java:498:      result = "different kind of block";
src/main/org/nlogo/nvm/Syntax.java:501:      result = "TRUE/FALSE block";
src/main/org/nlogo/nvm/Syntax.java:504:      result = "number block";
src/main/org/nlogo/nvm/Syntax.java:510:      return result + " (optional)";
src/main/org/nlogo/nvm/Syntax.java:512:      return result + " or " + typeName(mask);
src/main/org/nlogo/nvm/Syntax.java:544:        ("There was no Syntax type constant found for this class " + typeC);
src/main/org/nlogo/nvm/Syntax.java:555:        return "an " + str;
src/main/org/nlogo/nvm/Syntax.java:592:      buf.append(" [RIGHT ASSOCIATIVE]");
src/main/org/nlogo/plot/package.html:5:<body bgcolor="white">
src/main/org/nlogo/plot/package.html:26:max, y min and max).  "Auto plot" (whether the range expands
src/main/org/nlogo/plot/Plot.scala:17:  override def toString = "Plot(" + name + ")"
src/main/org/nlogo/plot/Plot.scala:26:    if(plotListener == null) sys.error("null plotListener")
src/main/org/nlogo/plot/Plot.scala:51:  def currentPenOrBust: PlotPen = currentPen.getOrElse(throw new PlotException("Plot '"+name+"' has no pens!"))
src/main/org/nlogo/plot/Plot.scala:144:    "\"" + escapeString(setupCode) + "\"" + " " + "\"" + escapeString(updateCode) + "\""
src/main/org/nlogo/plot/Plot.scala:218:      throw new PlotException("You cannot histogram with a plot-pen-interval of 0.")
src/main/org/nlogo/plot/Plot.scala:226:      throw new PlotException("You cannot histogram with a plot-pen-interval of 0.")
src/main/org/nlogo/plot/PlotExporter.scala:16:      "x min", "x max", "y min", "y max",
src/main/org/nlogo/plot/PlotExporter.scala:17:      "autoplot?", "current pen",
src/main/org/nlogo/plot/PlotExporter.scala:18:      "legend open?",
src/main/org/nlogo/plot/PlotExporter.scala:19:      "number of pens")))
src/main/org/nlogo/plot/PlotExporter.scala:35:      "pen name", "pen down?", "mode", "interval",
src/main/org/nlogo/plot/PlotExporter.scala:36:      "color", "x")))
src/main/org/nlogo/plot/PlotExporter.scala:62:      pointHeaders += ("x", "y", "color", "pen down?")
src/main/org/nlogo/plot/PlotLoader.scala:9:    val (plotLines, penLines) = widget.toList.span(_ != "PENS")
src/main/org/nlogo/plot/PlotLoader.scala:30:          sys.error("Plot '" + plot.name + "' contains invalid setup and/or update code: " + plotLines(14))
src/main/org/nlogo/plot/PlotLoader.scala:37:      case "PENS" :: xs => xs
src/main/org/nlogo/plot/PlotLoader.scala:67:    spanPlusOne(tokens)(tok => !tok.endsWith("\"") || tok.endsWith("\\\""))
src/main/org/nlogo/plot/PlotLoader.scala:77:          sys.error(mode + " is not a valid plot pen mode")
src/main/org/nlogo/plot/PlotLoader.scala:80:        sys.error("bad line: \"" + s + "\"")
src/main/org/nlogo/plot/PlotLoader.scala:102:      tok.endsWith("\"") && !tok.endsWith("\\\"")
src/main/org/nlogo/plot/PlotManager.scala:46:  def nextName = Stream.from(1).map("plot " + _).find(getPlot(_) == null).get
src/main/org/nlogo/plot/PlotManager.scala:87:      "plot '" + plot.name + "' " + (pen.map("pen '" + _.name + "' ").getOrElse("")) +
src/main/org/nlogo/plot/PlotManager.scala:88:              (if(setup) "setup code" else "update code") 
src/main/org/nlogo/plot/PlotManager.scala:165:  object Update extends CodeType("update"){
src/main/org/nlogo/plot/PlotManager.scala:168:  object Setup extends CodeType("setup"){
src/main/org/nlogo/plot/PlotManagerInterface.scala:18:  private val names = Iterator.from(1).map("plot " + _)
src/main/org/nlogo/plot/PlotPen.scala:47:  override def toString = "PlotPen("+name+", "+plot+")"
src/main/org/nlogo/plot/PlotPen.scala:90:    "\"" + escapeString(setupCode) + "\"" + " " + "\"" + escapeString(updateCode) + "\""
src/main/org/nlogo/prim/_breedsingular.java:42:          (context, this, idDouble + " is not an integer");
src/main/org/nlogo/prim/_breedsingular.java:52:              turtle + " is not a " + world.getBreedSingular(breed));
src/main/org/nlogo/prim/_callreport.java:47:          (context, this, "the " + procedure.name + " procedure failed to report a result");
src/main/org/nlogo/prim/_conststring.java:22:    return super.toString() + ":\"" + value + "\"";
src/main/org/nlogo/prim/_createlinkfrom.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createlinksfrom.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createlinksto.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createlinkswith.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createlinkto.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createlinkwith.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createorderedturtles.java:35:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_createturtles.java:33:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_extern.java:58:              (context, this, "Extension exception: " + ex.getMessage());
src/main/org/nlogo/prim/_externreport.java:54:          new EngineException(context, this, "Extension exception: "
src/main/org/nlogo/prim/_hatch.java:33:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_letvariable.java:25:    return super.toString() + "(" + name + ")";
src/main/org/nlogo/prim/_reference.java:24:    return super.toString() + ":" + reference.agentClass().getSimpleName() + "," + reference.vn();
src/main/org/nlogo/prim/_repeatlocal.java:26:    return super.toString() + ":" + vn + ",+" + offset;
src/main/org/nlogo/prim/_repeatlocalinternal.java:23:    return super.toString() + ":" + offset + "," + vn;
src/main/org/nlogo/prim/_sprout.java:36:    return super.toString() + ":" + breedName + ",+" + offset;
src/main/org/nlogo/prim/_turtle.java:29:          (context, this, idDouble + " is not an integer");
src/main/org/nlogo/prim/dead/_randomorrandomfloat.scala:6: * This primitive never existed; we convert "random" (in very, very old models) or
src/main/org/nlogo/prim/dead/_randomorrandomfloat.scala:7: * "random-int-or-float" (in more recent models) to this to force the user to change it; we need to
src/main/org/nlogo/prim/etc/_boom.java:23:    throw new EngineException(context, this, "boom!");
src/main/org/nlogo/prim/etc/_createnetworkpreferential.java:37:      throw new EngineException(context, "This command only supports undirected link breeds.");
src/main/org/nlogo/prim/etc/_createnetworkpreferential.java:40:      throw new EngineException(context, "The number of neighbors to link to in each step must be at least 1.");
src/main/org/nlogo/prim/etc/_createnetworkpreferential.java:46:      throw new EngineException(context, "This agentset has only " + numNodes + " members, so it is impossible to attach any turtle to " + mEdges + " neighbors!");
src/main/org/nlogo/prim/etc/_createnetworkpreferential.java:58:            (context, "You can only create links between turtles!");
src/main/org/nlogo/prim/etc/_diffuse.java:47:              ex.patch() + " should contain a number in the " + world.patchesOwnNameAt(reference.vn()) +
src/main/org/nlogo/prim/etc/_diffuse.java:48:                  " variable, but contains " +
src/main/org/nlogo/prim/etc/_diffuse.java:50:                      ? "NOBODY"
src/main/org/nlogo/prim/etc/_diffuse.java:51:                      : "the " + Syntax.typeName(value) + " " + Dump.logoObject(value)) +
src/main/org/nlogo/prim/etc/_diffuse.java:52:                  " instead");
src/main/org/nlogo/prim/etc/_diffuse4.java:43:      throw new EngineException(context, this, "Diffuse4 is not supported in 3D");
src/main/org/nlogo/prim/etc/_diffuse4.java:47:          (context, this, e.patch() + " should contain a number in the " +
src/main/org/nlogo/prim/etc/_diffuse4.java:49:              " variable, but contains " +
src/main/org/nlogo/prim/etc/_diffuse4.java:51:                  ? "NOBODY"
src/main/org/nlogo/prim/etc/_diffuse4.java:52:                  : "the " + Syntax.typeName(value) + " " + Dump.logoObject(value)) +
src/main/org/nlogo/prim/etc/_diffuse4.java:53:              " instead");
src/main/org/nlogo/prim/etc/_edit.java:30:        ("Now editing: " + path,
src/main/org/nlogo/prim/etc/_exportdrawing.java:19:                      "png");
src/main/org/nlogo/prim/etc/_exportview.java:19:                      "png");
src/main/org/nlogo/prim/etc/_extracthsb.java:29:            (context, this, displayName() + " an rgb list must have 3 elements");
src/main/org/nlogo/prim/etc/_extracthsb.java:43:            (context, this, displayName() + " an rgb list must contain only numbers");
src/main/org/nlogo/prim/etc/_extracthsb.java:76:          (context, this, displayName() + " an rgb list must have 3 elements");
src/main/org/nlogo/prim/etc/_extracthsb.java:90:          (context, this, displayName() + " an rgb list must contain only numbers");
src/main/org/nlogo/prim/etc/_filedelete.java:22:              argEvalString(context, 0) + " is not a valid path name: " + ex.getMessage());
src/main/org/nlogo/prim/etc/_fileexists.java:22:              argEvalString(context, 0) + " is not a valid path name: " + ex.getMessage());
src/main/org/nlogo/prim/etc/_fileread.java:26:      throw new EngineException(context, this, "The end of file has been reached");
src/main/org/nlogo/prim/etc/_filereadchars.java:17:      throw new EngineException(context, this, "The end of file has been reached");
src/main/org/nlogo/prim/etc/_filereadline.java:15:      throw new EngineException(context, this, "The end of file has been reached");
src/main/org/nlogo/prim/etc/_git.java:22:    if (!System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/prim/etc/_git.java:24:          (context, this, "at present, only works on Macs");
src/main/org/nlogo/prim/etc/_git.java:29:          (context, this, "must save model first");
src/main/org/nlogo/prim/etc/_git.java:32:      java.io.File git = new java.io.File(".git");
src/main/org/nlogo/prim/etc/_git.java:35:            (context, this, "no .git directory found");
src/main/org/nlogo/prim/etc/_git.java:39:              {"osascript",
src/main/org/nlogo/prim/etc/_git.java:40:                  "-e", "tell application \"Terminal\"",
src/main/org/nlogo/prim/etc/_git.java:41:                  "-e", "activate",
src/main/org/nlogo/prim/etc/_git.java:43:                  "-e", "do script with command \"cd \\\"" + dir + "\\\" > /dev/null ; " +
src/main/org/nlogo/prim/etc/_git.java:44:                  "git " + command + " \\\"" + workspace.getModelFileName() + "\\\" ; exit\"",
src/main/org/nlogo/prim/etc/_git.java:45:                  "-e", "end tell"});
src/main/org/nlogo/prim/etc/_innetworkradius.java:42:          (context, this, "expected last input to be a link breed.");
src/main/org/nlogo/prim/etc/_innetworkradius.java:46:          (context, this, displayName() + " should not be given a negative radius");
src/main/org/nlogo/prim/etc/_life.java:36:            [world.program().globals.indexOf("FGCOLOR")])
src/main/org/nlogo/prim/etc/_life.java:40:            [world.program().globals.indexOf("BGCOLOR")])
src/main/org/nlogo/prim/etc/_linkheading.java:28:              "there is no heading of a link whose endpoints are in the same position");
src/main/org/nlogo/prim/etc/_makepreview.java:22:      String previewPath = modelPath.substring(0, modelPath.lastIndexOf(".nlogo")) + ".png";
src/main/org/nlogo/prim/etc/_makepreview.java:26:              ("random-seed 0 " + workspace.previewCommands() +
src/main/org/nlogo/prim/etc/_makepreview.java:27:                  "\nexport-view \"" + escaped + "\"" +
src/main/org/nlogo/prim/etc/_makepreview.java:28:                  "\nprint \"GENERATED: " + escaped + "\"",
src/main/org/nlogo/prim/etc/_makepreview.java:37:          (context, this, "syntax error: " + error.getMessage());
src/main/org/nlogo/prim/etc/_map.scala:32:        throw new EngineException(context, this, "All the list arguments to MAP must be the same length.")
src/main/org/nlogo/prim/etc/_moveto.java:29:      throw new EngineException(context, this, "you can't move-to a link");
src/main/org/nlogo/prim/etc/_pwd.java:23:      path = "no model loaded!";
src/main/org/nlogo/prim/etc/_run.scala:19:            token.name + " doesn't accept further inputs if the first is a string")
src/main/org/nlogo/prim/etc/_runresult.scala:20:            token.name + " doesn't accept further inputs if the first is a string")
src/main/org/nlogo/prim/etc/_runresult.scala:29:            throw new EngineException(context, this, "failed to report a result")
src/main/org/nlogo/prim/etc/_setdefaultshape.java:30:          (context, this, "cannot set the default shape of the observer, because the observer does not have a shape");
src/main/org/nlogo/prim/etc/_sorton.scala:48:              "SORT-ON works on numbers, strings, or agents of the same type, " +
src/main/org/nlogo/prim/etc/_sorton.scala:49:              "but not on " + Syntax.aTypeName(o1) + " and " + Syntax.aTypeName(o2))
src/main/org/nlogo/prim/etc/_time.java:19:    return new java.text.SimpleDateFormat("hh:mm:ss.SSS a dd-MMM-yyyy")
src/main/org/nlogo/prim/gui/_bench.scala:15:    new Thread("__bench") {
src/main/org/nlogo/prim/gui/_exportinterface.scala:30:          context, this, token.name + " can only be used in the GUI")
src/main/org/nlogo/prim/gui/_inspectwithradius.scala:18:        context, this, "the radius must be between 0 and " + limit)
src/main/org/nlogo/prim/gui/_load3Dshapes.scala:19:            throw new EngineException(context, this, "Invalid shape file")
src/main/org/nlogo/prim/gui/_moviecancel.java:20:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_movieclose.java:20:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_movieclose.java:28:                      "Must call MOVIE-START first");
src/main/org/nlogo/prim/gui/_movieclose.java:40:                    "Exporting movie...");
src/main/org/nlogo/prim/gui/_moviegrabinterface.java:20:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_moviegrabinterface.java:25:          token().name() + " is not supported in NetLogo 3D");
src/main/org/nlogo/prim/gui/_moviegrabinterface.java:35:                        "Must call MOVIE-START first");
src/main/org/nlogo/prim/gui/_moviegrabview.java:20:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_moviegrabview.java:29:                        "Must call MOVIE-START first");
src/main/org/nlogo/prim/gui/_moviesetframerate.java:22:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_moviesetframerate.java:34:                        "Must call MOVIE-START first");
src/main/org/nlogo/prim/gui/_moviesetframerate.java:39:                        "Can't change frame rate after frames have been grabbed");
src/main/org/nlogo/prim/gui/_moviestart.java:21:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_moviestart.java:31:              argEvalString(context, 0) + " is not a valid path name: " + ex.getMessage());
src/main/org/nlogo/prim/gui/_moviestart.java:43:                      "There is already a movie being made. Must call MOVIE-CLOSE or MOVIE-CANCEL");
src/main/org/nlogo/prim/gui/_moviestatus.java:19:          context, this, token().name() + " can only be used in the GUI");
src/main/org/nlogo/prim/gui/_moviestatus.java:25:      return "No movie.";
src/main/org/nlogo/prim/gui/_moviestatus.java:27:    String status = "" + encoder.getNumFrames() + " frames"
src/main/org/nlogo/prim/gui/_moviestatus.java:28:        + "; frame rate = " + encoder.getFrameRate();
src/main/org/nlogo/prim/gui/_moviestatus.java:32:      status += "; size = " + size.width + "x" + size.height;
src/main/org/nlogo/prim/gui/_reload.scala:16:          context, this, token.name + " can only be used in the GUI")
src/main/org/nlogo/prim/gui/_userdirectory.scala:18:        context, this, "You cannot choose a directory from an applet.")
src/main/org/nlogo/prim/gui/_userdirectory.scala:29:                FileDialog.show(gw.getFrame, "Choose Directory", java.awt.FileDialog.LOAD,
src/main/org/nlogo/prim/gui/_userdirectory.scala:39:          context, this, "You can't get user input headless.")
src/main/org/nlogo/prim/gui/_userdirectory.scala:49:            context, this, "This directory doesn't exist")
src/main/org/nlogo/prim/gui/_userfile.scala:18:        context, this, "You cannot choose a file from an applet.")
src/main/org/nlogo/prim/gui/_userfile.scala:29:                FileDialog.show(gw.getFrame, "Choose File", java.awt.FileDialog.LOAD)
src/main/org/nlogo/prim/gui/_userfile.scala:37:          context, this, "You can't get user input headless.")
src/main/org/nlogo/prim/gui/_userfile.scala:47:            context, this, "This file doesn't exist")
src/main/org/nlogo/prim/gui/_userinput.scala:23:                gw.getFrame, "User Input", Dump.logoObject(inputMessage),
src/main/org/nlogo/prim/gui/_userinput.scala:30:          context, this, "You can't get user input headless.")
src/main/org/nlogo/prim/gui/_usermessage.scala:23:                OptionDialog.show(gw.getFrame, "User Message", message,
src/main/org/nlogo/prim/gui/_usernewfile.scala:18:        context, this, "You cannot choose a file from an applet.")
src/main/org/nlogo/prim/gui/_usernewfile.scala:29:                FileDialog.show(gw.getFrame, "Choose File", java.awt.FileDialog.SAVE)
src/main/org/nlogo/prim/gui/_usernewfile.scala:37:          context, this, "You can't get user input headless.")
src/main/org/nlogo/prim/gui/_useroneof.scala:25:                  gw.getFrame, "User One Of", Dump.logoObject(choiceMessage),
src/main/org/nlogo/prim/gui/_useroneof.scala:35:          context, this, "You can't get user input headless.")
src/main/org/nlogo/prim/gui/_useryesorno.scala:22:                gw.getFrame, "User Yes or No",
src/main/org/nlogo/prim/gui/_useryesorno.scala:36:          context, this, "You can't get user input headless.")
src/main/org/nlogo/prim/hubnet/_hubnetmakeplotnarrowcast.java:27:                      "no such plot: \"" + name + "\"");
src/main/org/nlogo/prim/hubnet/_hubnetprims.scala:109:        "waited " + timeout + "ms for " + numClients +
src/main/org/nlogo/prim/hubnet/_hubnetprims.scala:110:                " clients, but only got " + numConnected)
src/main/org/nlogo/prim/hubnet/_hubnetprims.scala:127:        "waited " + timeout + "ms for " + numMessages +
src/main/org/nlogo/prim/hubnet/_hubnetprims.scala:128:                " messages, but only got " + numReceived)
src/main/org/nlogo/prim/hubnet/_hubnetsend.java:31:              (context, this, "HUBNET-SEND expected "
src/main/org/nlogo/prim/hubnet/_hubnetsend.java:33:                  + " of strings as the first input, but one item is the "
src/main/org/nlogo/prim/hubnet/_hubnetsend.java:36:                  + " instead");
src/main/org/nlogo/prim/hubnet/_hubnetsendclearoutput.java:25:              (context, this, "HUBNET-SEND expected "
src/main/org/nlogo/prim/hubnet/_hubnetsendclearoutput.java:27:                  + " of strings as the first input, but one item is the "
src/main/org/nlogo/prim/hubnet/_hubnetsendclearoutput.java:30:                  + " instead");
src/main/org/nlogo/prim/hubnet/_hubnetsendmessage.java:26:              (context, this, "HUBNET-SEND expected "
src/main/org/nlogo/prim/hubnet/_hubnetsendmessage.java:28:                  + " of strings as the first input, but one item is the "
src/main/org/nlogo/prim/hubnet/_hubnetsendmessage.java:31:                  + " instead");
src/main/org/nlogo/prim/hubnet/_hubnetsendoverride.scala:26:      case _ => throw new IllegalStateException("cant happen...")
src/main/org/nlogo/prim/hubnet/_hubnetsendusermessage.java:26:              (context, this, "HUBNET-SEND expected "
src/main/org/nlogo/prim/hubnet/_hubnetsendusermessage.java:28:                  + " of strings as the first input, but one item is the "
src/main/org/nlogo/prim/hubnet/_hubnetsendusermessage.java:31:                  + " instead");
src/main/org/nlogo/prim/hubnet/_hubnetsetplotpenmode.java:20:                      + " is not a valid plot pen mode "
src/main/org/nlogo/prim/hubnet/_hubnetsetplotpenmode.java:21:                      + "(valid modes are 0, 1, and 2)");
src/main/org/nlogo/prim/plot/_plotprims.scala:24:    if (plot == null) { throw new EngineException(context, this, "no such plot: \"" + name + "\"") }
src/main/org/nlogo/prim/plot/_plotprims.scala:61:        "the minimum must be less than the maximum, but " +  min + " is greater than or equal to " + max)
src/main/org/nlogo/prim/plot/_plotprims.scala:75:        "the minimum must be less than the maximum, but " +  min + " is greater than or equal to " + max)
src/main/org/nlogo/prim/plot/_plotprims.scala:107:      throw new EngineException(context, this, "You cannot make a histogram with " + numBars + " bars.")
src/main/org/nlogo/prim/plot/_plotprims.scala:118:      throw new EngineException(context, this, "no such plot: \"" + name + "\"")
src/main/org/nlogo/prim/plot/_plotprims.scala:140:      throw new EngineException(context, this, "there are no plots to export")
src/main/org/nlogo/prim/plot/_plotprims.scala:195:      throw new EngineException(c, this, mode + " is not a valid plot pen mode (valid modes are 0, 1, and 2)")
src/main/org/nlogo/prim/plot/_plotprims.scala:212:        c, this, "There is no pen named \"" + penName + "\" in the current plot"))
src/main/org/nlogo/prim/threed/_layoutsphere.java:31:              "Patches are immovable.");
src/main/org/nlogo/prim/threed/_linkpitch.java:29:              "there is no pitch of a link whose endpoints are in the same position");
src/main/org/nlogo/prim/threed/_resizeworld.java:39:          (context, this, "You must include the point (0, 0, 0) in the world.");
src/main/org/nlogo/prim/threed/_setxyz.java:46:                "The point [ "
src/main/org/nlogo/prim/threed/_setxyz.java:50:                    + "is outside of the boundaries of the world "
src/main/org/nlogo/prim/threed/_setxyz.java:51:                    + "and wrapping is not permitted in one or both directions.");
src/main/org/nlogo/properties/CodeEditor.scala:27:    val accessor = new PropertyAccessor[String](new Dummy, displayName, "dummy"){
src/main/org/nlogo/properties/ColorEditor.scala:15:  private val colorButton = new JButton("0 (black)", colorIcon)
src/main/org/nlogo/properties/ColorEditor.scala:29:      case 0 => "0 (black)"
src/main/org/nlogo/properties/ColorEditor.scala:30:      case 9.9 => "9.9 (white)"
src/main/org/nlogo/properties/EditPanel.scala:130:          "Invalid Entry", "Invalid value for " + editor.accessor.displayName,
src/main/org/nlogo/properties/InputBoxEditor.scala:16:  private val multiline: JCheckBox = new JCheckBox("Multi-Line")
src/main/org/nlogo/properties/PlotPensEditor.scala:49:    if((names.toSet - "").size  < (names.toList.filterNot(_ == "")).size){
src/main/org/nlogo/properties/PlotPensEditor.scala:50:      org.nlogo.swing.OptionDialog.show(frame, "Invalid Entry", "Pens list contains duplicate names.",
src/main/org/nlogo/properties/PlotPensEditor.scala:88:    override def toString = "Pen(" + name + ", " + updateCode + "," + color + ")"
src/main/org/nlogo/properties/PlotPensEditor.scala:120:    val ButtonsColumnName = "Buttons"
src/main/org/nlogo/properties/PlotPensEditor.scala:164:      val nextName = "pen-" + model.pens.size
src/main/org/nlogo/properties/PlotPensEditor.scala:234:      val editButton = PimpedJButton(new javax.swing.ImageIcon(getClass.getResource("/images/edit.gif"))) {
src/main/org/nlogo/properties/PlotPensEditor.scala:237:      val deleteButton = PimpedJButton(new javax.swing.ImageIcon(getClass.getResource("/images/delete.gif"))) {
src/main/org/nlogo/properties/PlotPensEditor.scala:243:      editButton.putClientProperty("JComponent.sizeVariant", "small")
src/main/org/nlogo/properties/PlotPensEditor.scala:244:      deleteButton.putClientProperty("JComponent.sizeVariant", "small")
src/main/org/nlogo/properties/PropertyAccessor.scala:19:        target.getClass.getMethod(accessString + "_$eq", erasure)
src/main/org/nlogo/properties/WorldEditPanel.scala:118:      if(field == "max-pxcor") editors(0).set(0 - v)
src/main/org/nlogo/properties/WorldEditPanel.scala:119:      else if(field == "max-pycor") editors(2).set(0 - v)
src/main/org/nlogo/properties/WorldEditPanel.scala:120:      else if(field == "max-pzcor") editors(4).set(0 - v)
src/main/org/nlogo/properties/WorldPreview.scala:11:  private val shapeLabel = new javax.swing.JLabel("Torus")
src/main/org/nlogo/properties/WorldPreview.scala:89:    if(field == "World wraps horizontally" || field.startsWith("World wraps X")) {
src/main/org/nlogo/properties/WorldPreview.scala:93:    else if(field == "World wraps vertically" || field.startsWith("World wraps Y")) {
src/main/org/nlogo/properties/WorldPreview.scala:97:    else if(field == "min-pxcor") {
src/main/org/nlogo/properties/WorldPreview.scala:101:    else if(field == "max-pxcor") {
src/main/org/nlogo/properties/WorldPreview.scala:105:    else if(field == "min-pycor") {
src/main/org/nlogo/properties/WorldPreview.scala:109:    else if(field == "max-pycor") {
src/main/org/nlogo/properties/WorldPreview.scala:117:      case (true, true) => "Torus"
src/main/org/nlogo/properties/WorldPreview.scala:118:      case (true, false) => "Vertical Cylinder"
src/main/org/nlogo/properties/WorldPreview.scala:119:      case (false, true) => "Horizontal Cylinder"
src/main/org/nlogo/properties/WorldPreview.scala:120:      case (false, false) => "Box"
src/main/org/nlogo/properties/WorldPreview.scala:122:    shapeLabel.setText(text + ": " + (maxx - minx + 1)  + " x " + (maxy - miny + 1))
src/main/org/nlogo/properties/WorldPreview.scala:150:        case "min-pxcor" => minPxcor = asInt
src/main/org/nlogo/properties/WorldPreview.scala:151:        case "max-pxcor" => maxPxcor = asInt
src/main/org/nlogo/properties/WorldPreview.scala:152:        case "min-pycor" => minPycor = asInt
src/main/org/nlogo/properties/WorldPreview.scala:153:        case "max-pycor" => maxPycor = asInt
src/main/org/nlogo/properties/WorldPreview.scala:162:                   "Invalid world dimensions. " + 
src/main/org/nlogo/properties/WorldPreview.scala:163:                   "The origin (0,0) must be inside the dimensions of the world.")
src/main/org/nlogo/properties/WorldPreview.scala:251:        label = "(" + minPxcor + "," + maxPycor + ")"
src/main/org/nlogo/properties/WorldPreview.scala:256:        label = "(" + maxPxcor + "," + maxPycor + ")"
src/main/org/nlogo/properties/WorldPreview.scala:261:        label = "(" + maxPxcor + "," + minPycor + ")"
src/main/org/nlogo/properties/WorldPreview.scala:266:        label = "(" + minPxcor + "," + minPycor + ")"
src/main/org/nlogo/properties/WorldPreview.scala:291:        if(field == "World wraps horizontally" || field.startsWith("World wraps X"))
src/main/org/nlogo/properties/WorldPreview.scala:293:        else if(field == "World wraps vertically" || field.startsWith("World wraps Y"))
src/main/org/nlogo/render/AbstractRenderer.java:111:      System.getProperty("os.name").startsWith("Windows");
src/main/org/nlogo/render/TrailDrawer.java:164:        throw new javax.imageio.IIOException("The following file is not in a supported image format: " +
src/main/org/nlogo/render/TrailDrawer.java:211:      writer.println(Dump.csv.encode("DRAWING"));
src/main/org/nlogo/render/TrailDrawer.java:287:      if (penMode.equals("erase")) {
src/main/org/nlogo/render/TurtleShapeManager.java:53:    return "shapes " + shapeCache.size() + " pixels " + pixelCount + " angleStep " + angleStep;
src/main/org/nlogo/sdm/AggregateManagerLite.scala:9:    "MODEL"            -> "org.nlogo.sdm.gui.AggregateDrawing",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:10:    "STOCK"            -> "org.nlogo.sdm.gui.WrappedStock",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:11:    "RATE"             -> "org.nlogo.sdm.gui.WrappedRate",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:12:    "CONVERTER"        -> "org.nlogo.sdm.gui.WrappedConverter",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:13:    "RESERVOIR_FIGURE" -> "org.nlogo.sdm.gui.ReservoirFigure",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:14:    "STOCK_FIGURE"     -> "org.nlogo.sdm.gui.StockFigure",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:15:    "RATE_CONN"        -> "org.nlogo.sdm.gui.RateConnection",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:16:    "CHOP_DIAMOND"     -> "org.jhotdraw.contrib.ChopDiamondConnector",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:17:    "CHOP_BOX"         -> "org.jhotdraw.standard.ChopBoxConnector",  
src/main/org/nlogo/sdm/AggregateManagerLite.scala:18:    "RESERVOIR"        -> "org.nlogo.sdm.gui.WrappedReservoir", 
src/main/org/nlogo/sdm/AggregateManagerLite.scala:19:    "CONVERTER_FIGURE" -> "org.nlogo.sdm.gui.ConverterFigure",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:20:    "BINDING_CONN"     -> "org.nlogo.sdm.gui.BindingConnection",
src/main/org/nlogo/sdm/AggregateManagerLite.scala:21:    "CHOP_ELLIPSE"     -> "org.jhotdraw.figures.ChopEllipseConnector",  
src/main/org/nlogo/sdm/AggregateManagerLite.scala:22:    "CHOP_RATE"        -> "org.nlogo.sdm.gui.ChopRateConnector"
src/main/org/nlogo/sdm/AggregateManagerLite.scala:31:  def classDisplayName = "System Dynamics"
src/main/org/nlogo/sdm/AggregateManagerLite.scala:72:          "org.nlogo.aggregate.gui", "org.nlogo.sdm.gui")
src/main/org/nlogo/sdm/AggregateManagerLite.scala:75:            "invalid token: \"" + tokenizer.sval + "\"")
src/main/org/nlogo/sdm/AggregateManagerLite.scala:106:    else if(st.sval == validTokens("STOCK")) {
src/main/org/nlogo/sdm/AggregateManagerLite.scala:113:    else if(st.sval == validTokens("RATE")) {
src/main/org/nlogo/sdm/AggregateManagerLite.scala:119:    else if(st.sval == validTokens("CONVERTER")) {
src/main/org/nlogo/sdm/AggregateManagerLite.scala:125:    else if(st.sval == validTokens("MODEL"))
src/main/org/nlogo/sdm/AggregateManagerLite.scala:126:      new Model("Test Model", 1)
src/main/org/nlogo/sdm/AggregateManagerLite.scala:131:    if(st.nextToken() == StreamTokenizer.TT_WORD && st.sval.equals("REF")) {
src/main/org/nlogo/sdm/AggregateManagerLite.scala:134:        if(st.nextToken() == StreamTokenizer.TT_WORD && st.sval.equals("REF"))
src/main/org/nlogo/sdm/AggregateManagerLite.scala:165:      throw new java.io.IOException("expected string token")
src/main/org/nlogo/sdm/AggregateManagerLite.scala:170:      throw new java.io.IOException("expected integer (boolean)")
src/main/org/nlogo/sdm/AggregateManagerLite.scala:175:      throw new java.io.IOException("expected integer")
src/main/org/nlogo/sdm/gui/AggregateDrawing.java:10:  private final Model model = new Model("default", 1);
src/main/org/nlogo/sdm/gui/AggregateModelEditor.java:202:    boolean isOSX = System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:27:    val stockButton = makeButton("Stock", "/images/stock.gif", new StockFigureCreationTool(editor))
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:28:    val variablButton = makeButton("Variable", "/images/converter.gif", new ConverterFigureCreationTool(editor))
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:29:    val flowButton = makeButton("Flow", "/images/rate.gif", new RateConnectionTool(editor, new RateConnection()))
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:30:    val linkButton = makeButton("Link", "/images/connector.gif", new AggregateConnectionTool(editor, new BindingConnection()))
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:40:    dtLabel = new JLabel("dt = " + editor.getModel.getDt){ setOpaque(false) }
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:84:  val compileAction = new MyAction("Check", "/images/check.gif", enableMe = true) {
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:87:  val editAction = new MyAction("Edit", "/images/edit.gif", enableMe = false) {
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:90:  val deleteAction = new MyAction("Delete", "/images/delete.gif", enableMe = false) {
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:99:      val newDt = JOptionPane.showInputDialog(editor, "dt", editor.getModel.getDt)
src/main/org/nlogo/sdm/gui/AggregateModelEditorToolBar.scala:102:        dtLabel.setText("dt = " + editor.getModel.getDt)
src/main/org/nlogo/sdm/gui/ConverterFigure.java:114:    return "Variable";
src/main/org/nlogo/sdm/gui/GUIAggregateManager.java:142:    return "Aggregate";
src/main/org/nlogo/sdm/gui/Properties.scala:11:    P("nameWrapper", P.Identifier, "Name"),
src/main/org/nlogo/sdm/gui/Properties.scala:12:    P("expressionWrapper", P.Reporter, "Expression")
src/main/org/nlogo/sdm/gui/Properties.scala:15:    P("nameWrapper", P.Identifier, "Name"),
src/main/org/nlogo/sdm/gui/Properties.scala:16:    P("initialValueExpressionWrapper", P.Reporter, "Initial value"),
src/main/org/nlogo/sdm/gui/Properties.scala:17:    P("allowNegative", P.Boolean, "Allow negative values")
src/main/org/nlogo/sdm/gui/Properties.scala:20:    P("nameWrapper", P.Identifier, "Name"),
src/main/org/nlogo/sdm/gui/Properties.scala:21:    P("expressionWrapper", P.Reporter, "Expression")
src/main/org/nlogo/sdm/gui/RateConnection.java:324:    return "Flow";
src/main/org/nlogo/sdm/gui/ReservoirFigure.java:36:  @SuppressWarnings("unchecked")
src/main/org/nlogo/sdm/gui/StockFigure.java:133:    return "Stock";
src/main/org/nlogo/sdm/Model.scala:13:    text.replaceAll(" *org.nlogo.sdm.Stock ",
src/main/org/nlogo/sdm/Model.scala:14:                    "org.nlogo.sdm.gui.WrappedStock ")
src/main/org/nlogo/sdm/Model.scala:15:        .replaceAll(" *org.nlogo.sdm.Rate ",
src/main/org/nlogo/sdm/Model.scala:16:                    "org.nlogo.sdm.gui.WrappedRate ")
src/main/org/nlogo/sdm/Model.scala:17:        .replaceAll(" *org.nlogo.sdm.Reservoir ",
src/main/org/nlogo/sdm/Model.scala:18:                    "org.nlogo.sdm.gui.WrappedReservoir")
src/main/org/nlogo/sdm/Model.scala:19:        .replaceAll(" *org.nlogo.sdm.Converter ",
src/main/org/nlogo/sdm/Model.scala:20:                    "org.nlogo.sdm.gui.WrappedConverter")
src/main/org/nlogo/sdm/Model.scala:30:      throw new Model.ModelException("dt cannot be less than or equal to 0.")
src/main/org/nlogo/sdm/Model.scala:39:      throw new Model.ModelException("Already element with named " + element.name)
src/main/org/nlogo/sdm/Translator.scala:31:    globals += ";; System dynamics model globals\nglobals [\n"
src/main/org/nlogo/sdm/Translator.scala:32:    procedures += ";; Initializes the system dynamics model.\n;; Call this in your model's SETUP procedure.\n"
src/main/org/nlogo/sdm/Translator.scala:33:    procedures += "to system-dynamics-setup \n  reset-ticks\n  set " + "dt " + dt + "\n"
src/main/org/nlogo/sdm/Translator.scala:35:      globals += "  ;; constants\n"
src/main/org/nlogo/sdm/Translator.scala:36:      procedures += "  ;; initialize constant values\n"
src/main/org/nlogo/sdm/Translator.scala:38:        globals += "  " + cc.name + "\n"
src/main/org/nlogo/sdm/Translator.scala:43:      globals += "  ;; stock values\n"
src/main/org/nlogo/sdm/Translator.scala:44:      procedures += "  ;; initialize stock values\n"
src/main/org/nlogo/sdm/Translator.scala:46:        globals += "  " + s.name + "\n"
src/main/org/nlogo/sdm/Translator.scala:51:    globals += "  ;; size of each step, see SYSTEM-DYNAMICS-GO\n" + "  " + "dt\n"
src/main/org/nlogo/sdm/Translator.scala:53:    procedures += "end\n\n"
src/main/org/nlogo/sdm/Translator.scala:54:    procedures += ";; Step through the system dynamics model by performing next iteration of Euler's method.\n"
src/main/org/nlogo/sdm/Translator.scala:55:    procedures += ";; Call this in your model's GO procedure.\n"
src/main/org/nlogo/sdm/Translator.scala:56:    procedures += "to system-dynamics-go\n"
src/main/org/nlogo/sdm/Translator.scala:57:    plots += ";; Plot the current state of the system dynamics model's stocks\n"
src/main/org/nlogo/sdm/Translator.scala:58:    plots += ";; Call this procedure in your model's GO procedure.\n"
src/main/org/nlogo/sdm/Translator.scala:59:    plots += "to system-dynamics-do-plot\n"
src/main/org/nlogo/sdm/Translator.scala:61:      procedures += "\n  ;; compute variable and flow values once per step\n"
src/main/org/nlogo/sdm/Translator.scala:63:        procedures += "  let local-" + c.name + " " + c.name + "\n"
src/main/org/nlogo/sdm/Translator.scala:65:        procedures += "  let local-" + r.name + " " + r.name + "\n" 
src/main/org/nlogo/sdm/Translator.scala:68:      procedures += "\n  ;; update stock values\n" +
src/main/org/nlogo/sdm/Translator.scala:69:        "  ;; use temporary variables so order of computation doesn't affect result.\n"
src/main/org/nlogo/sdm/Translator.scala:72:        plots += "  if plot-pen-exists? \"" + s.name + "\" [\n"
src/main/org/nlogo/sdm/Translator.scala:73:        plots += "    set-current-plot-pen \"" + s.name + "\"\n"
src/main/org/nlogo/sdm/Translator.scala:74:        plots += "    plotxy ticks " + s.name + "\n"
src/main/org/nlogo/sdm/Translator.scala:78:        procedures += "  set " + s.name + " new-" + s.name + "\n"
src/main/org/nlogo/sdm/Translator.scala:80:    procedures += "\n  tick-advance dt\nend\n\n"
src/main/org/nlogo/sdm/Translator.scala:81:    plots += "end\n\n"
src/main/org/nlogo/sdm/Translator.scala:90:    ";; Report value of flow\n" +
src/main/org/nlogo/sdm/Translator.scala:91:      "to-report " + r.name + "\n" + "  report ( " +
src/main/org/nlogo/sdm/Translator.scala:93:      "\n  ) * " + "dt" + "\n" +
src/main/org/nlogo/sdm/Translator.scala:94:      "end\n\n"
src/main/org/nlogo/sdm/Translator.scala:96:    ";; Report value of variable\n" +
src/main/org/nlogo/sdm/Translator.scala:97:    "to-report " + c.name + "\n" + "  report " +
src/main/org/nlogo/sdm/Translator.scala:99:    "\n" + "end\n\n"
src/main/org/nlogo/sdm/Translator.scala:101:    "  set " + s.name + " " +
src/main/org/nlogo/sdm/Translator.scala:105:    "  set " + c.name + " " +
src/main/org/nlogo/sdm/Translator.scala:110:    var expr = "  let new-" + s.name +
src/main/org/nlogo/sdm/Translator.scala:111:      (if(s.nonNegative) " max( list 0 ( " else " ( ") +
src/main/org/nlogo/sdm/Translator.scala:115:        expr += "- " + "local-" + r.name + " "
src/main/org/nlogo/sdm/Translator.scala:117:        expr += "+ " + "local-" + r.name + " "
src/main/org/nlogo/shape/Circle.java:143:    return "Type: Circle, color: " + c + ",\n bounds: " + getBounds();
src/main/org/nlogo/shape/Circle.java:149:    return "Circle " + c.getRGB() + " " + filled + " " + marked + " " + x + " " + y + " " + xDiameter;
src/main/org/nlogo/shape/Circle.java:158:    boolean b1 = tokenizer.nextToken().equals("true");
src/main/org/nlogo/shape/Circle.java:159:    boolean b2 = tokenizer.nextToken().equals("true");
src/main/org/nlogo/shape/Curve.java:166:    return "Type: Curve, color: " + c + ",\n bounds: " + getBounds();
src/main/org/nlogo/shape/editor/ColorCellRenderer.java:12:      {"Gray", "Red", "Orange", "Brown", "Yellow", "Green",
src/main/org/nlogo/shape/editor/ColorCellRenderer.java:13:          "Lime", "Turquoise", "Cyan", "Sky", "Blue", "Violet",
src/main/org/nlogo/shape/editor/ColorCellRenderer.java:14:          "Magenta", "Pink", "Black", "White"};
src/main/org/nlogo/shape/editor/DrawableList.java:24:    putClientProperty("Quaqua.List.style", "striped");
src/main/org/nlogo/shape/editor/DrawableList.java:112:          (parent, "Are you sure you want to delete these "
src/main/org/nlogo/shape/editor/DrawableList.java:113:              + selected.length + " shapes?", "Delete", javax.swing.JOptionPane.YES_NO_OPTION);
src/main/org/nlogo/shape/editor/DrawableList.java:115:      delete = javax.swing.JOptionPane.showConfirmDialog(parent, "Are you sure you want to delete this shape?",
src/main/org/nlogo/shape/editor/DrawableList.java:116:          "Delete", javax.swing.JOptionPane.YES_NO_OPTION);
src/main/org/nlogo/shape/editor/EditorDialog.java:85:                        "You may lose changes made to this shape. Do you want to cancel anyway?",
src/main/org/nlogo/shape/editor/EditorDialog.java:86:                        "Confirm Cancel", javax.swing.JOptionPane.YES_NO_OPTION)) {
src/main/org/nlogo/shape/editor/EditorDialog.java:116:                ("/images/shapes-editor/arrow.gif")), false);
src/main/org/nlogo/shape/editor/EditorDialog.java:119:        ("Quaqua.Button.style", "square");
src/main/org/nlogo/shape/editor/EditorDialog.java:120:    editElements.setToolTipText("Select");
src/main/org/nlogo/shape/editor/EditorDialog.java:146:    deleteSelected = new javax.swing.JButton("Delete");
src/main/org/nlogo/shape/editor/EditorDialog.java:169:    duplicateSelected = new javax.swing.JButton("Duplicate");
src/main/org/nlogo/shape/editor/EditorDialog.java:184:    bringToFront = new javax.swing.JButton("Bring to front");
src/main/org/nlogo/shape/editor/EditorDialog.java:199:    sendToBack = new javax.swing.JButton("Send to back");
src/main/org/nlogo/shape/editor/EditorDialog.java:215:    undoButton = new javax.swing.JButton("Undo");
src/main/org/nlogo/shape/editor/EditorDialog.java:229:            new CreateAction("line", Line.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:230:                "Draw line", false));
src/main/org/nlogo/shape/editor/EditorDialog.java:234:            new CreateAction("rectangle-filled", Rectangle.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:235:                "Draw filled rectangle", true));
src/main/org/nlogo/shape/editor/EditorDialog.java:239:            new CreateAction("rectangle", Rectangle.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:240:                "Draw rectangle", false));
src/main/org/nlogo/shape/editor/EditorDialog.java:244:            new CreateAction("circle-filled", Circle.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:245:                "Draw filled circle", true));
src/main/org/nlogo/shape/editor/EditorDialog.java:249:            new CreateAction("circle", Circle.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:250:                "Draw circle", false));
src/main/org/nlogo/shape/editor/EditorDialog.java:254:            new CreateAction("polygon-filled", Polygon.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:255:                "Draw filled polygon", true));
src/main/org/nlogo/shape/editor/EditorDialog.java:259:            new CreateAction("polygon", Polygon.class,
src/main/org/nlogo/shape/editor/EditorDialog.java:260:                "Draw polygon", false));
src/main/org/nlogo/shape/editor/EditorDialog.java:277:          "Draw in " + org.nlogo.api.Color.getColorNameByIndex(icolor);
src/main/org/nlogo/shape/editor/EditorDialog.java:304:        new javax.swing.JCheckBox("Snap to grid", true);
src/main/org/nlogo/shape/editor/EditorDialog.java:314:        new javax.swing.JCheckBox("Rotatable", true);
src/main/org/nlogo/shape/editor/EditorDialog.java:328:    javax.swing.JButton rotateLeftButton = new javax.swing.JButton("Rotate Left");
src/main/org/nlogo/shape/editor/EditorDialog.java:348:    javax.swing.JButton rotateRightButton = new javax.swing.JButton("Rotate Right");
src/main/org/nlogo/shape/editor/EditorDialog.java:368:    javax.swing.JButton flipHorizontalButton = new javax.swing.JButton("Flip Horizontal");
src/main/org/nlogo/shape/editor/EditorDialog.java:388:    javax.swing.JButton flipVerticalButton = new javax.swing.JButton("Flip Vertical");
src/main/org/nlogo/shape/editor/EditorDialog.java:412:    leftPanel.add(new javax.swing.JLabel("Color that changes:"));
src/main/org/nlogo/shape/editor/EditorDialog.java:504:    javax.swing.JLabel nameLabel = new javax.swing.JLabel("Name");
src/main/org/nlogo/shape/editor/EditorDialog.java:543:    setTitle("Shape");
src/main/org/nlogo/shape/editor/EditorDialog.java:631:              (this, "Name:", "Name Shape", javax.swing.JOptionPane.PLAIN_MESSAGE);
src/main/org/nlogo/shape/editor/EditorDialog.java:651:          (this, "A shape with this name already exists. Do you want to replace it?",
src/main/org/nlogo/shape/editor/EditorDialog.java:652:              "Confirm Overwrite", javax.swing.JOptionPane.YES_NO_OPTION);
src/main/org/nlogo/shape/editor/EditorDialog.java:702:        ("Quaqua.Button.style", "square");
src/main/org/nlogo/shape/editor/EditorDialog.java:758:                  ("/images/shapes-editor/" + name + ".gif")));
src/main/org/nlogo/shape/editor/ImportDialog.java:25:    super(frame, "Library", true);
src/main/org/nlogo/shape/editor/ImportDialog.java:51:        new javax.swing.JButton("Import");
src/main/org/nlogo/shape/editor/ImportDialog.java:125:                "A shape with the name \"" + shape.getName() + "\" already exists in this model.\n" +
src/main/org/nlogo/shape/editor/ImportDialog.java:126:                    "Do you want to replace the existing shape or rename the imported one?",
src/main/org/nlogo/shape/editor/ImportDialog.java:127:                "Import",
src/main/org/nlogo/shape/editor/ImportDialog.java:139:              (this, "Import shape as:", "Import Shapes", javax.swing.JOptionPane.PLAIN_MESSAGE);
src/main/org/nlogo/shape/editor/ImportDialog.java:158:    manager.shapesList().selectShapeName("default");
src/main/org/nlogo/shape/editor/ImportDialog.java:165:        (this, message, "Import", javax.swing.JOptionPane.WARNING_MESSAGE);
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:50:                        "You may lose changes made to this shape. Do you want to cancel anyway?",
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:51:                        "Confirm Cancel", javax.swing.JOptionPane.YES_NO_OPTION)) {
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:62:    javax.swing.JLabel label = new javax.swing.JLabel("name: ");
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:70:    label = new javax.swing.JLabel("direction indicator: ");
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:73:    javax.swing.JButton diButton = new javax.swing.JButton("Edit");
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:84:    label = new javax.swing.JLabel("curviness: ");
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:97:    add(new javax.swing.JLabel("left line"), c);
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:102:    add(new javax.swing.JLabel("middle line"), c);
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:107:    add(new javax.swing.JLabel("right line"), c);
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:136:    setTitle("Link Shape");
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:158:              (this, "Name:", "Name Shape", javax.swing.JOptionPane.PLAIN_MESSAGE);
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:176:        (this, "A shape with this name already exists. Do you want to replace it?",
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:177:            "Confirm Overwrite", javax.swing.JOptionPane.YES_NO_OPTION)) {
src/main/org/nlogo/shape/editor/LinkEditorDialog.java:191:                (this, "Curviness:", "Enter a number", javax.swing.JOptionPane.PLAIN_MESSAGE);
src/main/org/nlogo/shape/editor/ManagerDialog.scala:109:    shapesList.selectShapeName("default")
src/main/org/nlogo/shape/editor/ManagerDialog.scala:116:    shapesList.selectShapeName("default")
src/main/org/nlogo/shape/editor/ManagerDialog.scala:121:    val defaultShapes = org.nlogo.util.Utils.getResourceAsStringArray("/system/defaultShapes.txt")
src/main/org/nlogo/shape/editor/ManagerDialog.scala:122:    val libraryShapes = org.nlogo.util.Utils.getResourceAsStringArray("/system/libraryShapes.txt")
src/main/org/nlogo/shape/editor/ShapeCellRenderer.java:14:      new javax.swing.JLabel("blah", javax.swing.SwingConstants.LEFT);
src/main/org/nlogo/shape/editor/ShapeView.java:37:      System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/shape/Line.java:57:    if (modifiedPoint.equals("start")) {
src/main/org/nlogo/shape/Line.java:60:    if (modifiedPoint.equals("end")) {
src/main/org/nlogo/shape/Line.java:123:    return "Line " + c.getRGB() + " " + marked + " " + start.x + " " + start.y + " " + end.x + " " + end.y;
src/main/org/nlogo/shape/Line.java:128:    return "Line with color " + c + " and bounds " + getBounds();
src/main/org/nlogo/shape/Line.java:159:      modifiedPoint = "start";
src/main/org/nlogo/shape/Line.java:161:      modifiedPoint = "end";
src/main/org/nlogo/shape/LinkLine.java:122:    return xcor + " " + (isVisible ? "1" : "0") + " " + dashinessString();
src/main/org/nlogo/shape/LinkLine.java:126:    return "Link Line with xcor = " + xcor + " " + isVisible + " " + dashinessString();
src/main/org/nlogo/shape/LinkShape.java:296:    String str = name + "\n" + curviness + "\n";
src/main/org/nlogo/shape/LinkShape.java:347:    result.setName("default");
src/main/org/nlogo/shape/LinkShape.java:354:    result.setName("link direction");
src/main/org/nlogo/shape/LinkShape.java:358:        ("Line -7500403 true 150 150 90 180");
src/main/org/nlogo/shape/LinkShape.java:360:        ("Line -7500403 true 150 150 210 180");
src/main/org/nlogo/shape/Polygon.java:75:    System.out.println("Max ycoord: " + max(yArray) + ", Min ycoord: " + min(yArray));
src/main/org/nlogo/shape/Polygon.java:203:    return "Polygon - color: " + c + ",\n          bounds: " + getBounds();
src/main/org/nlogo/shape/Polygon.java:217:    ret += "Polygon " + c.getRGB() + " " + filled + " " + marked;
src/main/org/nlogo/shape/Polygon.java:221:      ret += " " + getElt(i, xcoords) + " " + getElt(i, ycoords);
src/main/org/nlogo/shape/Polygon.java:239:    boolean b1 = tokenizer.nextToken().equals("true");
src/main/org/nlogo/shape/Polygon.java:240:    boolean b2 = tokenizer.nextToken().equals("true");
src/main/org/nlogo/shape/Rectangle.java:70:    if (modifiedPoint.equals("upperLeft")) {
src/main/org/nlogo/shape/Rectangle.java:75:    if (modifiedPoint.equals("upperRight")) {
src/main/org/nlogo/shape/Rectangle.java:80:    if (modifiedPoint.equals("lowerRight")) {
src/main/org/nlogo/shape/Rectangle.java:85:    if (modifiedPoint.equals("lowerLeft")) {
src/main/org/nlogo/shape/Rectangle.java:222:    return "Type: Rectangle, color: " + c + ",\n bounds: " + getBounds();
src/main/org/nlogo/shape/Rectangle.java:228:    return "Rectangle " + c.getRGB() + " " + filled + " " + marked + " " + upperLeft.x + " " + upperLeft.y
src/main/org/nlogo/shape/Rectangle.java:229:        + " " + lowerRight.x + " " + lowerRight.y;
src/main/org/nlogo/shape/Rectangle.java:238:    boolean b1 = tokenizer.nextToken().equals("true");
src/main/org/nlogo/shape/Rectangle.java:239:    boolean b2 = tokenizer.nextToken().equals("true");
src/main/org/nlogo/shape/Rectangle.java:263:      modifiedPoint = "upperLeft";
src/main/org/nlogo/shape/Rectangle.java:265:      modifiedPoint = "upperRight";
src/main/org/nlogo/shape/Rectangle.java:267:      modifiedPoint = "lowerRight";
src/main/org/nlogo/shape/Rectangle.java:269:      modifiedPoint = "lowerLeft";
src/main/org/nlogo/shape/VectorShape.java:270:    String ret = "Shape " + name + ":\n";
src/main/org/nlogo/shape/VectorShape.java:282:    String ret = name + "\n" + rotatable + "\n" + editableColorIndex;
src/main/org/nlogo/shape/VectorShape.java:301:    } else if (line.startsWith("Rectangle")) {
src/main/org/nlogo/shape/VectorShape.java:303:    } else if (line.startsWith("Circle")) {
src/main/org/nlogo/shape/VectorShape.java:305:    } else if (line.startsWith("Polygon")) {
src/main/org/nlogo/shape/VectorShape.java:315:          ("Invalid shape format in file: " + line);
src/main/org/nlogo/shape/VectorShape.java:360:    if (shape.getName().indexOf("StarLogoT") != -1) {
src/main/org/nlogo/shape/VectorShape.java:363:      throw new IllegalStateException("found StarLogoT version instead of shape");
src/main/org/nlogo/shape/VectorShape.java:366:    shape.setRotatable(getString(shapes, index++).equals("true"));
src/main/org/nlogo/shape/VectorShape.java:402:        ("Polygon -7500403 true true 150 5 40 250 150 205 260 250");
src/main/org/nlogo/swing/BrowserLauncher.java:37:      return new java.net.URI("file", filePath, null).toURL().toString();
src/main/org/nlogo/swing/BrowserLauncher.java:47:    String osName = System.getProperty("os.name");
src/main/org/nlogo/swing/BrowserLauncher.java:49:    if (osName.startsWith("Mac")) {
src/main/org/nlogo/swing/BrowserLauncher.java:54:        Class<?> desktopClass = Class.forName("java.awt.Desktop");
src/main/org/nlogo/swing/BrowserLauncher.java:55:        Object result = desktopClass.getMethod("isDesktopSupported").invoke(null);
src/main/org/nlogo/swing/BrowserLauncher.java:57:          Object desktop = desktopClass.getMethod("getDesktop").invoke(null);
src/main/org/nlogo/swing/BrowserLauncher.java:58:          desktopClass.getMethod("browse", java.net.URI.class).invoke(desktop, new java.net.URI(url));
src/main/org/nlogo/swing/BrowserLauncher.java:63:      if (osName.startsWith("Windows")) {
src/main/org/nlogo/swing/BrowserLauncher.java:65:            new String[]{"cmd.exe", "/c", "start", "\"\"", '"' + url + '"'});
src/main/org/nlogo/swing/BrowserLauncher.java:69:              "firefox", "-remote", "'openURL(", url + ")'"});
src/main/org/nlogo/swing/BrowserLauncher.java:72:            Runtime.getRuntime().exec(new String[]{"firefox", url});
src/main/org/nlogo/swing/BrowserLauncher.java:78:              "NetLogo could not find and execute a web browser named \'firefox\'." +
src/main/org/nlogo/swing/BrowserLauncher.java:79:                  "Please install Firefox and ensure that the \'firefox\' command " +
src/main/org/nlogo/swing/BrowserLauncher.java:80:                  "is in your executable PATH.  Firefox is available here:\n " +
src/main/org/nlogo/swing/BrowserLauncher.java:82:                  "The full error message was:\n " + ex.getLocalizedMessage()
src/main/org/nlogo/swing/ButtonPanel.scala:12:  val MAC = System.getProperty("os.name").startsWith("Mac")
src/main/org/nlogo/swing/CollapsiblePane.java:15:            (CollapsiblePane.class.getResource("/images/popup.gif")));
src/main/org/nlogo/swing/CollapsiblePane.java:18:            (CollapsiblePane.class.getResource("/images/closedarrow.gif")));
src/main/org/nlogo/swing/FileDialog.java:19:  private static String currentDirectory = System.getProperty("user.home");
src/main/org/nlogo/swing/FileDialog.java:56:      System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/swing/FileDialog.java:58:      System.getProperty("os.name").startsWith("Linux");
src/main/org/nlogo/swing/MessageDialog.java:61:        new javax.swing.AbstractAction("Dismiss") {
src/main/org/nlogo/swing/ModalProgressTask.java:44:    super("ModalProgressTask boss");
src/main/org/nlogo/swing/Popup.scala:18:    PimpedJButton(i18n("common.buttons.ok")){ if(ok) die() },
src/main/org/nlogo/swing/Popup.scala:19:    PimpedJButton(i18n("common.buttons.cancel")){ cancel; die() }),
src/main/org/nlogo/swing/PrinterManager.java:46:        if (System.getProperty("os.name").startsWith("Mac")
src/main/org/nlogo/swing/PrinterManager.java:47:            && System.getProperty("os.version").startsWith("10.5")) {
src/main/org/nlogo/swing/PrinterManager.java:62:    String pageNumString = " - page " + pageNum;
src/main/org/nlogo/swing/PrinterManager.java:69:      new java.awt.Font("Monospaced", java.awt.Font.PLAIN, 9);
src/main/org/nlogo/swing/SelectableJLabel.scala:10:class SelectableJLabel(str: String) extends JTextField(" " + str + " ") {  
src/main/org/nlogo/swing/SelectableJLabel.scala:14:  setFont(UIManager.getFont("Label.font"))
src/main/org/nlogo/swing/SelectableJLabel.scala:15:  setForeground(UIManager.getColor("Label.foreground"))
src/main/org/nlogo/swing/SelectableJLabel.scala:16:  setBackground(UIManager.getColor("Label.background"))
src/main/org/nlogo/swing/TextFieldBox.java:125:    fb.addField("Name:", new JTextField(20));
src/main/org/nlogo/swing/TextFieldBox.java:126:    fb.addField("Server location or IP address:", new JTextField(8));
src/main/org/nlogo/swing/TextFieldBox.java:127:    fb.addField("Port:", new JTextField(20));
src/main/org/nlogo/swing/TextFieldBox.java:132:    d.setTitle("TextFieldBox");
src/main/org/nlogo/swing/ToolBarComboBox.scala:13:    if (System.getProperty("os.name").startsWith("Mac")) setBackground(Color.WHITE)
src/main/org/nlogo/swing/ToolBarMenu.java:11:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/swing/UserDialog.java:47:    buttons.add(new javax.swing.JButton(new ButtonPressAction(i18n.apply("common.buttons.halt"), 2)));
src/main/org/nlogo/swing/UserDialog.java:48:    buttons.add(new javax.swing.JButton(new ButtonPressAction(i18n.apply("common.buttons.ok"), 0)));
src/main/org/nlogo/swing/UserDialog.java:55:        (UserDialog.class.getResource("/images/arrowhead.gif"));
src/main/org/nlogo/swing/Utils.java:16:        (bogusFrame, "Notice",
src/main/org/nlogo/swing/Utils.java:36:      javax.swing.UIManager.put("Slider.paintValue", Boolean.FALSE);
src/main/org/nlogo/swing/Utils.java:37:      if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/swing/Utils.java:42:      } else if (System.getProperty("os.name").startsWith("Windows")) {
src/main/org/nlogo/swing/Utils.java:45:      } else if (System.getProperty("swing.defaultlaf") == null) {
src/main/org/nlogo/swing/Utils.java:48:              ("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
src/main/org/nlogo/swing/Utils.java:84:          && QuaquaManager.getProperty("os.arch").equals("x86_64")
src/main/org/nlogo/swing/Utils.java:85:          ? "quaqua64"
src/main/org/nlogo/swing/Utils.java:86:          : "quaqua";
src/main/org/nlogo/swing/Utils.java:87:      System.load(new java.io.File(".").getCanonicalPath() + "/lib/Mac OS X/lib" + libraryName + ".jnilib");
src/main/org/nlogo/swing/Utils.java:88:      System.setProperty("Quaqua.jniIsPreloaded", "true");
src/main/org/nlogo/swing/Utils.java:147:            "ESC_ACTION");
src/main/org/nlogo/swing/Utils.java:151:            ("ESC_ACTION", action);
src/main/org/nlogo/swing/VTextIcon.java:90:    if ("font".equals(prop)) {
src/main/org/nlogo/swing/WindowCloseBox.java:8:      System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/swing/WindowDragger.java:27:      System.getProperty("os.name").startsWith("Mac");
src/main/org/nlogo/swing/WrappingPopupMenu.java:29:    if (System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/util/Exceptions.scala:25:    System.err.println("Warning -- Ignoring exception: " + t)
src/main/org/nlogo/util/Femto.scala:17:      .getField( "MODULE$" ).get(null).asInstanceOf[T]
src/main/org/nlogo/util/HexString.scala:22:  private val hexChar = "0123456789ABCDEF"
src/main/org/nlogo/util/Pico.scala:21:    addComponent(Class.forName(name + "$").getField("MODULE$").get(null))
src/main/org/nlogo/util/SysInfo.scala:11:    var result = getProperty("java.vm.name") +
src/main/org/nlogo/util/SysInfo.scala:12:      " " + getProperty("java.version") +
src/main/org/nlogo/util/SysInfo.scala:13:      " (" + getProperty("java.vendor")
src/main/org/nlogo/util/SysInfo.scala:14:    if(getProperty("java.fullversion") != null)
src/main/org/nlogo/util/SysInfo.scala:15:      result += "; " + getProperty("java.fullversion")
src/main/org/nlogo/util/SysInfo.scala:16:    else if(getProperty("java.runtime.version") != null)
src/main/org/nlogo/util/SysInfo.scala:17:      result += "; " + getProperty("java.runtime.version")
src/main/org/nlogo/util/SysInfo.scala:22:    getVMInfoString.indexOf("libgcj") != -1
src/main/org/nlogo/util/SysInfo.scala:24:    "operating system: " + getProperty("os.name") +
src/main/org/nlogo/util/SysInfo.scala:25:      " " + getProperty("os.version") +
src/main/org/nlogo/util/SysInfo.scala:26:      " ("  + getProperty("os.arch") + " processor)"
src/main/org/nlogo/util/SysInfo.scala:33:    "Java heap: " +
src/main/org/nlogo/util/SysInfo.scala:34:      "used = " + (total - free) +
src/main/org/nlogo/util/SysInfo.scala:35:      " MB, free = " + free +
src/main/org/nlogo/util/SysInfo.scala:36:      " MB, max = " + max +
src/main/org/nlogo/util/SysInfo.scala:37:      " MB"
src/main/org/nlogo/util/SysInfo.scala:39:  var getJOGLInfoString = "JOGL: (3D View not initialized)" 
src/main/org/nlogo/util/SysInfo.scala:40:  var getGLInfoString = "OpenGL Graphics: (3D View not initialized)" 
src/main/org/nlogo/util/SysInfo.scala:44:      var browser = getProperty("browser")
src/main/org/nlogo/util/SysInfo.scala:47:        browser = "(unknown browser)"
src/main/org/nlogo/util/SysInfo.scala:49:      var version = getProperty("browser.version")
src/main/org/nlogo/util/SysInfo.scala:52:        version = "(unknown version)"
src/main/org/nlogo/util/SysInfo.scala:54:      var vendor = getProperty("browser.vendor")
src/main/org/nlogo/util/SysInfo.scala:60:        vendor = " (" + vendor + ")"
src/main/org/nlogo/util/SysInfo.scala:67:    "Scala " + scala.util.Properties.versionString
src/main/org/nlogo/util/Utils.scala:20:    url.flatMap{case ' ' => "%20"
src/main/org/nlogo/util/Utils.scala:23:    url.replaceAll("%20", " ")
src/main/org/nlogo/util/Utils.scala:47:        if(!System.getProperty("os.name").startsWith("Mac")) {
src/main/org/nlogo/util/Utils.scala:50:            "file:/" + sampleURL.drop(badStart.size)
src/main/org/nlogo/util/Utils.scala:61:          .openStream(), "UTF-8"))
src/main/org/nlogo/widget/DummySwitchWidget.java:45:    s.append("SWITCH\n");
src/main/org/nlogo/widget/DummySwitchWidget.java:50:      s.append("NIL\n");
src/main/org/nlogo/widget/DummySwitchWidget.java:55:      s.append("NIL\n");
src/main/org/nlogo/widget/NoteWidget.java:182:    s.append("TEXTBOX\n");
src/main/org/nlogo/widget/NoteWidget.java:185:      s.append("NIL\n");
src/main/org/nlogo/widget/NoteWidget.java:197:    if (strings[5].equals("NIL")) {
src/main/org/nlogo/widget/Switch.java:98:        + fontMetrics.stringWidth("Off");
src/main/org/nlogo/widget/Switch.java:145:    g.drawString("On",
src/main/org/nlogo/widget/Switch.java:149:    g.drawString("Off",
src/main/org/nlogo/widget/Switch.java:154:        StrictMath.max(fontMetrics.stringWidth("On"), fontMetrics.stringWidth("Off")) +
src/main/org/nlogo/widget/SwitchWidget.java:94:    s.append("SWITCH\n");
src/main/org/nlogo/widget/SwitchWidget.java:99:      s.append("NIL\n");
src/main/org/nlogo/widget/SwitchWidget.java:104:      s.append("NIL\n");
src/main/org/nlogo/window/AbstractPlotWidget.scala:153:  override def helpLink = Some("docs/programming.html#plotting")
src/main/org/nlogo/window/AbstractPlotWidget.scala:219:    s.append("PLOT\n")
src/main/org/nlogo/window/AbstractPlotWidget.scala:221:    s.append((if (null != plotName && plotName.trim != "") plotName else "NIL") + "\n")
src/main/org/nlogo/window/AbstractPlotWidget.scala:222:    s.append((if (null != xLabel && xLabel.trim != "") xLabel else "NIL") + "\n")
src/main/org/nlogo/window/AbstractPlotWidget.scala:223:    s.append((if (null != yLabel && yLabel.trim != "") yLabel else "NIL") + "\n")
src/main/org/nlogo/window/AbstractPlotWidget.scala:231:    s.append("PENS\n")
src/main/org/nlogo/window/AbstractPlotWidget.scala:239:      s.append("\"" + escapeString(pen.name) + "\" " +
src/main/org/nlogo/window/AbstractPlotWidget.scala:240:              pen.defaultInterval + " " + pen.defaultMode + " " +
src/main/org/nlogo/window/AbstractPlotWidget.scala:241:              pen.defaultColor + " " + pen.inLegend + " " + pen.saveString + "\n")
src/main/org/nlogo/window/AbstractPlotWidget.scala:249:      xLabel(if (strings(6) == "NIL") "" else strings(6))
src/main/org/nlogo/window/AbstractPlotWidget.scala:250:      yLabel(if (strings(7) == "NIL") "" else strings(7))
src/main/org/nlogo/window/AbstractPlotWidget.scala:288:    case "setupCode" => plotManager.getPlotSetupError(plot)
src/main/org/nlogo/window/AbstractPlotWidget.scala:289:    case "updateCode" => plotManager.getPlotUpdateError(plot)
src/main/org/nlogo/window/AppletAdPanel.java:9:                (AppletAdPanel.class.getResource("/images/icon16.gif")));
src/main/org/nlogo/window/AppletAdPanel.java:12:    JVertLabel label = new JVertLabel("powered by NetLogo");
src/main/org/nlogo/window/ButtonWidget.scala:18:  val FOREVER_GRAPHIC_DARK: ImageIcon = image("/images/forever.gif")
src/main/org/nlogo/window/ButtonWidget.scala:19:  val FOREVER_GRAPHIC: ImageIcon = image("/images/forever2.gif")
src/main/org/nlogo/window/ButtonWidget.scala:24:    val ObserverButton = ButtonType("observer", classOf[Observer], img = None, darkImg = None)
src/main/org/nlogo/window/ButtonWidget.scala:25:    val TurtleButton = ButtonType("turtle", classOf[Turtle], "/images/turtle.gif")
src/main/org/nlogo/window/ButtonWidget.scala:26:    val LinkButton = ButtonType("link", classOf[Link], "/images/link.gif")
src/main/org/nlogo/window/ButtonWidget.scala:27:    val PatchButton = ButtonType("patch", classOf[Patch], "/images/patch.gif")
src/main/org/nlogo/window/ButtonWidget.scala:45:      if(name == "NIL") ObserverButton.agentClass
src/main/org/nlogo/window/ButtonWidget.scala:64:    def toHeaderCode = "__" + name.toLowerCase + "code "
src/main/org/nlogo/window/ButtonWidget.scala:347:    val header = "to __button [] " + buttonType.toHeaderCode + (if(forever) " loop [ " else "")
src/main/org/nlogo/window/ButtonWidget.scala:349:      (if(forever) "__foreverbuttonend ] " else "__done ") + "end"
src/main/org/nlogo/window/ButtonWidget.scala:420:    s.append("BUTTON\n")
src/main/org/nlogo/window/ButtonWidget.scala:423:    if(name.trim != "") s.append(name + "\n") else s.append("NIL\n")
src/main/org/nlogo/window/ButtonWidget.scala:426:    if(innerSource() != null  && innerSource().trim != "") s.append(stripLines(innerSource()) + "\n")
src/main/org/nlogo/window/ButtonWidget.scala:427:    else s.append("NIL\n")
src/main/org/nlogo/window/ButtonWidget.scala:429:    if(forever) s.append("T\n") else s.append("NIL\n")
src/main/org/nlogo/window/ButtonWidget.scala:438:    s.append("NIL\n")
src/main/org/nlogo/window/ButtonWidget.scala:440:    if(actionKey == 0 || actionKey == ' ') s.append("NIL\n")
src/main/org/nlogo/window/ButtonWidget.scala:459:    if(strings.length > 12 && strings(12) != "NIL") actionKey = strings(12).charAt(0)
src/main/org/nlogo/window/ButtonWidget.scala:465:    name = if(strings(5) != "NIL") strings(5) else ""
src/main/org/nlogo/window/ButtonWidget.scala:468:    wrapSource(helper.convert(if(source=="NIL") "" else source, false))
src/main/org/nlogo/window/Chooser.java:145:          new javax.swing.JMenuItem("<No Choices>");
src/main/org/nlogo/window/ChooserWidget.scala:46:    var obj: Object = compiler.readFromString("[ " + choicesString + " ]")
src/main/org/nlogo/window/ChooserWidget.scala:95:    s.append("CHOOSER\n")
src/main/org/nlogo/window/ChooserWidget.scala:105:      s.append("NIL\n")
src/main/org/nlogo/window/ChooserWidget.scala:106:      s.append("NIL\n")
src/main/org/nlogo/window/ColorDialog.java:192:    blackName.setFont(new java.awt.Font("ArialNarrow", 0, 10));
src/main/org/nlogo/window/ColorDialog.java:210:    whiteName.setFont(new java.awt.Font("ArialNarrow", 0, 10));
src/main/org/nlogo/window/ColorDialog.java:241:      colorName.setFont(new java.awt.Font("ArialNarrow", 0, 10));
src/main/org/nlogo/window/ColorDialog.java:280:    upperLeftCorner.setFont(new java.awt.Font("ArialNarrow", 0, 10));
src/main/org/nlogo/window/ColorDialog.java:335:          label.setFont(new java.awt.Font("ArialNarrow", 0, 8));
src/main/org/nlogo/window/ColorDialog.java:372:      copyButton.setActionCommand("Copy");
src/main/org/nlogo/window/ColorDialog.java:412:    oneStep.setActionCommand("oneStep");
src/main/org/nlogo/window/ColorDialog.java:417:    pointFiveStep.setActionCommand("pointFiveStep");
src/main/org/nlogo/window/ColorDialog.java:421:    pointOneStep.setActionCommand("pointOneStep");
src/main/org/nlogo/window/ColorDialog.java:503:      if (actionCommand.equals("oneStep")) {
src/main/org/nlogo/window/ColorDialog.java:507:      } else if (actionCommand.equals("pointFiveStep")) {
src/main/org/nlogo/window/ColorDialog.java:512:      } else if (actionCommand.equals("pointOneStep")) {
src/main/org/nlogo/window/ColorDialog.java:629:                      ("Quaqua.Button.style", "toggle");
src/main/org/nlogo/window/CompilerManager.java:114:        } else if (procedure.fileName.equals("aggregate")) {
src/main/org/nlogo/window/CompilerManager.java:128:        System.err.println("CompilerException: " + error);
src/main/org/nlogo/window/CompilerManager.java:138:      } else if (error.fileName().equals("aggregate")) {
src/main/org/nlogo/window/CompilerManager.java:177:              (owner.source(), scala.Some.apply(owner.classDisplayName() + " '" + owner.displayName() + "'"),
src/main/org/nlogo/window/DummyButtonWidget.java:123:    s.append("BUTTON\n");
src/main/org/nlogo/window/DummyButtonWidget.java:128:      s.append("NIL\n");
src/main/org/nlogo/window/DummyButtonWidget.java:130:    s.append("NIL\n");
src/main/org/nlogo/window/DummyButtonWidget.java:131:    s.append("NIL\n");
src/main/org/nlogo/window/DummyButtonWidget.java:137:    s.append("NIL\n");
src/main/org/nlogo/window/DummyButtonWidget.java:139:      s.append("NIL\n");
src/main/org/nlogo/window/DummyButtonWidget.java:148:    if (strings.length > 12 && !strings[12].equals("NIL")) {
src/main/org/nlogo/window/DummyButtonWidget.java:154:    if (!dName.equals("NIL")) {
src/main/org/nlogo/window/DummyButtonWidget.java:161:      if (!dName.equals("NIL")) {
src/main/org/nlogo/window/DummyChooserWidget.java:53:          ("[ " + choicesString + " ]");
src/main/org/nlogo/window/DummyChooserWidget.java:93:    s.append("CHOOSER\n");
src/main/org/nlogo/window/DummyChooserWidget.java:102:      s.append("NIL\n");
src/main/org/nlogo/window/DummyChooserWidget.java:103:      s.append("NIL\n");
src/main/org/nlogo/window/DummyMonitorWidget.java:108:    s.append("MONITOR\n");
src/main/org/nlogo/window/DummyMonitorWidget.java:113:      s.append("NIL\n");
src/main/org/nlogo/window/DummyMonitorWidget.java:115:    s.append("NIL\n");
src/main/org/nlogo/window/DummyMonitorWidget.java:127:    if (displayName.equals("NIL")) {
src/main/org/nlogo/window/DummyPlotWidget.scala:50:        s.append("\"" + org.nlogo.api.StringUtils.escapeString(pen.name) + "\" " +
src/main/org/nlogo/window/DummyPlotWidget.scala:51:                pen.defaultInterval + " " + pen.defaultMode + " " + pen.defaultColor + " " + pen.inLegend + "\n")
src/main/org/nlogo/window/DummySliderWidget.scala:38:    if( strings.length > 12 ) units = if( strings(12) == "NIL" ) "" else strings(12)
src/main/org/nlogo/window/DummySliderWidget.scala:39:    if( strings.length > 13 && strings(13).equals( "VERTICAL" ) ) vertical = true
src/main/org/nlogo/window/DummySliderWidget.scala:52:    s.append( "SLIDER\n" )
src/main/org/nlogo/window/DummySliderWidget.scala:62:      s.append("NIL\n")
src/main/org/nlogo/window/DummySliderWidget.scala:63:      s.append("NIL\n")
src/main/org/nlogo/window/DummySliderWidget.scala:70:    if( ( null != units ) && ( units.trim!= "" )  ) s.append( units + "\n" )
src/main/org/nlogo/window/DummySliderWidget.scala:71:    else s.append("NIL\n")
src/main/org/nlogo/window/DummySliderWidget.scala:73:    if ( vertical ) s.append( "VERTICAL\n" )
src/main/org/nlogo/window/DummySliderWidget.scala:74:    else s.append( "HORIZONTAL\n" )
src/main/org/nlogo/window/DummyViewWidget.java:97:        "VIEW\n" +
src/main/org/nlogo/window/EditorColorizer.java:48:          tokens[i].name().equalsIgnoreCase("BREED")) {
src/main/org/nlogo/window/ErrorLabel.scala:13:    setFont(UIManager.getFont("Label.font"))
src/main/org/nlogo/window/ErrorLabel.scala:14:    setForeground(UIManager.getColor("Label.foreground"))
src/main/org/nlogo/window/ErrorLabel.scala:17:      new ImageIcon(classOf[ErrorLabel].getResource("/images/stop.gif")))
src/main/org/nlogo/window/ErrorLabel.scala:29:    setText("<html>" + encodeHTML(err) + "</html>") 
src/main/org/nlogo/window/ErrorLabel.scala:46:        "&#"+ c.toInt + ";"
src/main/org/nlogo/window/Event.java:57:          new java.text.SimpleDateFormat("hh:mm:ss.SSS").format(time);
src/main/org/nlogo/window/Event.java:59:          " (" + readableName(raiser) + ") " +
src/main/org/nlogo/window/Event.java:100:      return longName + " (" + clazz.getName() + ")";
src/main/org/nlogo/window/Event.java:144:          && !name.equals("PeriodicUpdateEvent")
src/main/org/nlogo/window/Event.java:145:          && !name.equals("InterfaceGlobalEvent")
src/main/org/nlogo/window/Event.java:150:        System.out.println("raising " + name + ": " + readableName(raiser));
src/main/org/nlogo/window/Event.java:154:            ("event raised with null raiser");
src/main/org/nlogo/window/Event.java:187:            && !name.equals("PeriodicUpdateEvent")
src/main/org/nlogo/window/Event.java:188:            && !name.equals("InterfaceGlobalEvent")
src/main/org/nlogo/window/Event.java:193:          System.out.println("handling " + eventName(this)
src/main/org/nlogo/window/Event.java:285:          if (interfaceName.endsWith("$Handler")) {
src/main/org/nlogo/window/ExternalFileInterface.java:17:    return "ExternalFileInterface";
src/main/org/nlogo/window/GUIWorkspace.java:117:      super("Lifeguard");
src/main/org/nlogo/window/GUIWorkspace.java:279:        "Warning: " + message, options);
src/main/org/nlogo/window/GUIWorkspace.java:695:            }, "Halting...");
src/main/org/nlogo/window/GUIWorkspace.java:719:      evaluateCommands(new SimpleJobOwner("startup", world.mainRNG, Observer.class),
src/main/org/nlogo/window/GUIWorkspace.java:720:          "without-interruption [ startup ]", false);
src/main/org/nlogo/window/GUIWorkspace.java:1011:              (getExportWindowFrame(), "Export View",
src/main/org/nlogo/window/GUIWorkspace.java:1013:                  guessExportName("view.png"));
src/main/org/nlogo/window/GUIWorkspace.java:1021:                    exportView(exportee, exportPath, "png");
src/main/org/nlogo/window/GUIWorkspace.java:1027:              "Exporting...");
src/main/org/nlogo/window/GUIWorkspace.java:1087:            (getFrame(), "Export Plot", "There are no plots to export.",
src/main/org/nlogo/window/GUIWorkspace.java:1094:        String message = "Export of all plots to" + e.filename + " failed: " + ex.getMessage();
src/main/org/nlogo/window/GUIWorkspace.java:1096:        org.nlogo.swing.OptionDialog.show(getFrame(), "Export Plot Failed", message, options);
src/main/org/nlogo/window/GUIWorkspace.java:1107:          String message = "Export of " + plot.name() + " plot to " + e.filename + " failed: " + ex.getMessage();
src/main/org/nlogo/window/GUIWorkspace.java:1109:          org.nlogo.swing.OptionDialog.show(getFrame(), "Export Plot Failed", message, options);
src/main/org/nlogo/window/GUIWorkspace.java:1120:      String message = "There are no plots to export.";
src/main/org/nlogo/window/GUIWorkspace.java:1122:      org.nlogo.swing.OptionDialog.show(frame, "Export Plot", message, options);
src/main/org/nlogo/window/GUIWorkspace.java:1125:    String message = "Which plot would you like to export?";
src/main/org/nlogo/window/GUIWorkspace.java:1127:        (frame, "Export Plot",
src/main/org/nlogo/window/GUIWorkspace.java:1195:              RuntimeErrorDialog.show("Runtime Error", context, instruction, thread, ex);
src/main/org/nlogo/window/GUIWorkspace.java:1268:      new javax.swing.AbstractAction("3D View") {
src/main/org/nlogo/window/InputBox.scala:38:  protected val changeButton: JButton = new NLButton("Change") {
src/main/org/nlogo/window/InputBox.scala:41:  protected val colorSwatch: JButton = new JButton("black"){
src/main/org/nlogo/window/InputBox.scala:42:    setFont(javax.swing.UIManager.getFont("Label.font").deriveFont(9.0f))
src/main/org/nlogo/window/InputBox.scala:207:      if (msg.startsWith("REPORT expected 1 input."))
src/main/org/nlogo/window/InputBox.scala:208:        msg = "Expected reporter."
src/main/org/nlogo/window/InputBox.scala:209:      org.nlogo.swing.OptionDialog.show(frame, "Invalid input for a " + inputType,
src/main/org/nlogo/window/InputBox.scala:289:    s.append("INPUTBOX\n")
src/main/org/nlogo/window/InputBox.scala:291:    if((null != name) && (name.trim != "")) s.append(name + "\n")
src/main/org/nlogo/window/InputBox.scala:292:    else s.append("NIL\n")
src/main/org/nlogo/window/InputBox.scala:294:    else s.append("NIL\n")
src/main/org/nlogo/window/InputBox.scala:303:    if(displayName ==  "NIL") name("") else name(displayName)
src/main/org/nlogo/window/InputBox.scala:305:    if(contents == "NIL") contents = ""
src/main/org/nlogo/window/InputBox.scala:310:        case "Reporter" => "String (reporter)"
src/main/org/nlogo/window/InputBox.scala:311:        case "Commands" => "String (commands)"
src/main/org/nlogo/window/InputBox.scala:321:    if(strings.length > 9) setType(strings(9)) else setType("String")
src/main/org/nlogo/window/InputBox.scala:335:  override def getDefaultExportName = "export.txt"
src/main/org/nlogo/window/InputBox.scala:345:          "Export failed.  Error:\n" + ex.getMessage, "Export Failed", JOptionPane.ERROR_MESSAGE)
src/main/org/nlogo/window/InputBox.scala:389:    new AbstractAction("Apply") {
src/main/org/nlogo/window/InputBox.scala:446:    val baseNames = List("Number", "String", "Color", "String (reporter)", "String (commands)")
src/main/org/nlogo/window/InputBox.scala:448:      if (inputType == "Number") new NumberInputType(codeEditorKit)
src/main/org/nlogo/window/InputBox.scala:449:      else if (inputType == "Color") new ColorInputType(codeEditorKit)
src/main/org/nlogo/window/InputBox.scala:450:      else if (inputType == "String (reporter)") new ReporterInputType(codeEditorKit)
src/main/org/nlogo/window/InputBox.scala:451:      else if (inputType == "String (commands)") new CommandInputType(codeEditorKit)
src/main/org/nlogo/window/InputBox.scala:493:    "String", "string",
src/main/org/nlogo/window/InputBox.scala:494:    textArea.getEditorKitForContentType("String"),
src/main/org/nlogo/window/InputBox.scala:495:    javax.swing.UIManager.getFont("Label.font").deriveFont(12.0f)){
src/main/org/nlogo/window/InputBox.scala:499:  private class ReporterInputType(kit: EditorKit) extends InputType("String (reporter)", "string.reporter", kit, plainFont) {
src/main/org/nlogo/window/InputBox.scala:511:  private class CommandInputType(kit: EditorKit) extends InputType("String (commands)", "string.commands", kit, plainFont) {
src/main/org/nlogo/window/InputBox.scala:522:  private class NumberInputType(kit: EditorKit) extends InputType("Number", "number", kit, plainFont) {
src/main/org/nlogo/window/InputBox.scala:529:  private class ColorInputType(kit: EditorKit) extends InputType("Color", "color", kit, plainFont) {
src/main/org/nlogo/window/InputBox.scala:547:        case 0 => "0 (black)"
src/main/org/nlogo/window/InputBox.scala:548:        case 9.9 => "9.9 (white)"
src/main/org/nlogo/window/InterfaceFactory.scala:11:  val button = WidgetInfo("button", "button.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:12:  val slider = WidgetInfo("slider", "slider.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:13:  val switch = WidgetInfo("switch", "switch.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:14:  val chooser = WidgetInfo("chooser", "chooser.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:15:  val input = WidgetInfo("input", "input.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:16:  val monitor = WidgetInfo("monitor", "monitor.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:17:  val plot = WidgetInfo("plot", "plot.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:18:  val output = WidgetInfo("output", "output.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:19:  val note = WidgetInfo("note", "note.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:20:  val view = WidgetInfo("view", "view.gif")
src/main/org/nlogo/window/InterfaceFactory.scala:24:  def icon = new ImageIcon(classOf[WidgetInfo].getResource("/images/" + imageName))
src/main/org/nlogo/window/InterfacePanelLite.java:321:      if (!type.equals("GRAPHICS-WINDOW") &&
src/main/org/nlogo/window/InterfacePanelLite.java:325:      if (type.equals("GRAPHICS-WINDOW") || type.equals("VIEW")) {
src/main/org/nlogo/window/InterfacePanelLite.java:340:          if (type.equals("MONITOR")) {
src/main/org/nlogo/window/InterfacePanelLite.java:342:          } else if (type.equals("PLOT")) {
src/main/org/nlogo/window/InterfacePanelLite.java:344:          } else if (type.equals("SLIDER")) {
src/main/org/nlogo/window/InterfacePanelLite.java:350:          } else if (type.equals("INPUTBOX")) {
src/main/org/nlogo/window/InterfacePanelLite.java:354:          } else if (type.equals("BUTTON")) {
src/main/org/nlogo/window/InterfacePanelLite.java:356:          } else if (type.equals("OUTPUT")) {
src/main/org/nlogo/window/ModelLoader.scala:28:      if (version == null || !version.startsWith("NetLogo")) throw new InvalidVersionException()
src/main/org/nlogo/window/ModelLoader.scala:40:              val message = "This model was created in " + version +
src/main/org/nlogo/window/ModelLoader.scala:41:                      ". You may need to make changes for it to work in " +
src/main/org/nlogo/window/ModelLoader.scala:94:              map.get(section).map(_.replaceAll("org.nlogo.aggregate.gui", "org.nlogo.sdm.gui"))
src/main/org/nlogo/window/MonitorWidget.java:241:      source("to __monitor [] __observercode loop [ __updatemonitor __monitorprecision (",
src/main/org/nlogo/window/MonitorWidget.java:242:          innerSource, "\n) " + decimalPlaces() + " ] end");
src/main/org/nlogo/window/MonitorWidget.java:281:    s.append("MONITOR\n");
src/main/org/nlogo/window/MonitorWidget.java:286:      s.append("NIL\n");
src/main/org/nlogo/window/MonitorWidget.java:291:      s.append("NIL\n");
src/main/org/nlogo/window/MonitorWidget.java:309:    if (displayName.equals("NIL")) {
src/main/org/nlogo/window/MonitorWidget.java:320:    if (!source.equals("NIL")) {
src/main/org/nlogo/window/NetLogoListenerManager.java:50:        } else if (e.widget.classDisplayName().equals("Switch")) {
src/main/org/nlogo/window/NetLogoListenerManager.java:65:              ("unknown widget type: " + e.widget);
src/main/org/nlogo/window/NetLogoListenerManager.java:92:            ("unexpected agent class: " + e.sourceOwner.agentClass());
src/main/org/nlogo/window/OutputWidget.scala:27:  override def getDefaultExportName = "output.txt"
src/main/org/nlogo/window/OutputWidget.scala:40:    val copyItem = PimpedJMenuItem("Copy Selected Text"){ outputArea.text.copy }
src/main/org/nlogo/window/OutputWidget.scala:50:    e.writer.println(Dump.csv.encode("OUTPUT")) 
src/main/org/nlogo/window/OutputWidget.scala:56:    s.append("OUTPUT\n") 
src/main/org/nlogo/window/PlotWidget.scala:15:    plot.createPlotPen("default", false, "", "plot count turtles")
src/main/org/nlogo/window/PlotWidget.scala:34:  override def getDefaultExportName = plotName + ".csv"
src/main/org/nlogo/window/PlotWidget.scala:47:    val copyItem = PimpedJMenuItem("Copy Image"){
src/main/org/nlogo/window/PlotWidget.scala:55:    PimpedJMenuItem("Clear"){ clear() }
src/main/org/nlogo/window/Properties.scala:38:      "<html>example: &quot;a&quot; &quot;b&quot; &quot;c&quot; 3 4 5</html>")
src/main/org/nlogo/window/Properties.scala:43:      "min, increment, and max may be numbers or reporters",
src/main/org/nlogo/window/Properties.scala:74:    P("patchSize", P.Double,
src/main/org/nlogo/window/Properties.scala:77:    P("fontSize", P.Integer,
src/main/org/nlogo/window/Properties.scala:79:    P("frameRate", P.StrictlyPositiveDouble,
src/main/org/nlogo/window/Properties.scala:119:      "<html>example: &quot;a&quot; &quot;b&quot; &quot;c&quot; 3 4 5</html>")
src/main/org/nlogo/window/Properties.scala:127:    P("decimalPlaces", P.Integer, "Decimal places", gridWidth = RELATIVE)
src/main/org/nlogo/window/QuickHelp.java:28:  private static final String QUICKHELPWORDS_PATH = "/system/dict.txt";
src/main/org/nlogo/window/QuickHelp.java:29:  private static final String QUICKHELPWORDS_PATH3D = "/system/dict3d.txt";
src/main/org/nlogo/window/QuickHelp.java:49:        (comp, "docs/dict/" + theFile, true);
src/main/org/nlogo/window/QuickHelp.java:77:              token.toUpperCase() + " could not be found in the NetLogo Dictionary.\n" +
src/main/org/nlogo/window/QuickHelp.java:78:                  "Would you like to open the full NetLogo Dictionary?",
src/main/org/nlogo/window/QuickHelp.java:79:              "NetLogo", javax.swing.JOptionPane.YES_NO_OPTION)) {
src/main/org/nlogo/window/QuickHelp.java:81:            (comp, "docs/index2.html", true);
src/main/org/nlogo/window/RuntimeErrorDialog.java:29:      new javax.swing.JButton("Don't show again");
src/main/org/nlogo/window/RuntimeErrorDialog.java:31:      new javax.swing.JCheckBox("Show internal details");
src/main/org/nlogo/window/RuntimeErrorDialog.java:97:    if (textWithDetails.indexOf("sun.font.FontDesignMetrics.charsWidth") == -1) {
src/main/org/nlogo/window/RuntimeErrorDialog.java:118:      javax.swing.JButton copyButton = new javax.swing.JButton("Copy");
src/main/org/nlogo/window/RuntimeErrorDialog.java:150:      extra = "NetLogo is unable to supply you with more details "
src/main/org/nlogo/window/RuntimeErrorDialog.java:151:          + "about this error.  Please report the problem to "
src/main/org/nlogo/window/RuntimeErrorDialog.java:152:          + "bugs@ccl.northwestern.edu and paste the contents "
src/main/org/nlogo/window/RuntimeErrorDialog.java:153:          + "of this window into your E-mail.\n\n";
src/main/org/nlogo/window/RuntimeErrorDialog.java:166:            "main: " + className + "\n" +
src/main/org/nlogo/window/RuntimeErrorDialog.java:167:            "thread: " + threadName + "\n" +
src/main/org/nlogo/window/RuntimeErrorDialog.java:173:            "model: " + modelName + "\n\n" +
src/main/org/nlogo/window/RuntimeErrorDialog.java:180:              ? "running as applet in unknown browser"
src/main/org/nlogo/window/RuntimeErrorDialog.java:181:              : ("browser info: " + browser);
src/main/org/nlogo/window/SliderData.scala:110:  override def toString = "Slider(min=" + minimum + ", max=" + maximum + ", inc=" + increment +")"
src/main/org/nlogo/window/SliderWidget.scala:98:    if (units=="") numString else numString + " " + units
src/main/org/nlogo/window/SliderWidget.scala:116:  var maximumCode: String = "100"
src/main/org/nlogo/window/SliderWidget.scala:223:      if (units == "NIL") { units = "" }
src/main/org/nlogo/window/SliderWidget.scala:225:    if (strings.length > 13 && strings(13) == "VERTICAL") vertical = true
src/main/org/nlogo/window/SliderWidget.scala:242:    s.append("SLIDER\n")
src/main/org/nlogo/window/SliderWidget.scala:244:    if ((null != name) && (name.trim != "")) { s.append(name + "\n"); s.append(name + "\n") }
src/main/org/nlogo/window/SliderWidget.scala:245:    else { s.append("NIL\n"); s.append("NIL\n") }
src/main/org/nlogo/window/SliderWidget.scala:251:    if ((null != units) && (units.trim!="")) s.append(units + "\n")
src/main/org/nlogo/window/SliderWidget.scala:252:    else { s.append("NIL\n") }
src/main/org/nlogo/window/SliderWidget.scala:253:    if (vertical) s.append("VERTICAL\n") else s.append("HORIZONTAL\n")
src/main/org/nlogo/window/SpeedSliderPanel.java:158:      setToolTipText("Adjust speed of model");
src/main/org/nlogo/window/SyntaxColors.java:5:    throw new IllegalStateException("This class cannot be instantiated");
src/main/org/nlogo/window/UpdateManager.scala:134:    "speed = %.0f, frameRateGap = %.2f fps, nanoGap = %.2f fps, slowdown = %.1f ms, every %.3f ticks".format(
src/main/org/nlogo/window/View.java:445:          new javax.swing.JMenuItem("Copy View");
src/main/org/nlogo/window/View.java:457:          new javax.swing.JMenuItem("Export View...");
src/main/org/nlogo/window/View.java:470:              "<html>"
src/main/org/nlogo/window/View.java:471:                  + org.nlogo.awt.Utils.colorize("reset-perspective", SyntaxColors.COMMAND_COLOR));
src/main/org/nlogo/window/View.java:494:          menu.add(new AgentMenuItem(patch, AgentMenuType.INSPECT, "inspect", false));
src/main/org/nlogo/window/View.java:510:            menu.add(new AgentMenuItem(link, AgentMenuType.INSPECT, "inspect", false));
src/main/org/nlogo/window/View.java:592:      submenu.add(new AgentMenuItem(turtle, AgentMenuType.INSPECT, "inspect", true));
src/main/org/nlogo/window/View.java:595:    submenu.add(new AgentMenuItem(turtle, AgentMenuType.WATCH, "watch", true));
src/main/org/nlogo/window/View.java:596:    submenu.add(new AgentMenuItem(turtle, AgentMenuType.FOLLOW, "follow", true));
src/main/org/nlogo/window/View.java:611:      super("<html>"
src/main/org/nlogo/window/ViewControlStrip.java:37:      sizeControlXY = new SizeControl("/images/arrowsdiag.gif", 1, 1);
src/main/org/nlogo/window/ViewControlStrip.java:38:      sizeControlXY.setToolTipText("Change width and height of world");
src/main/org/nlogo/window/ViewControlStrip.java:41:      sizeControlX = new SizeControl("/images/arrowsx.gif", 1, 0);
src/main/org/nlogo/window/ViewControlStrip.java:42:      sizeControlX.setToolTipText("Change width of world");
src/main/org/nlogo/window/ViewControlStrip.java:45:      sizeControlY = new SizeControl("/images/arrowsy.gif", 0, 1);
src/main/org/nlogo/window/ViewControlStrip.java:46:      sizeControlY.setToolTipText("Change height of world");
src/main/org/nlogo/window/ViewControlStrip.java:133:      setToolTipText("Switch to 3D view");
src/main/org/nlogo/window/ViewControlStrip.java:258:                "Changing the size will halt and clear the world.",
src/main/org/nlogo/window/ViewWidget.java:19:    return "World & View";
src/main/org/nlogo/window/ViewWidget.java:369:    tickCounter.setText("     " + tickCounterLabel + ": " + tickText);
src/main/org/nlogo/window/ViewWidget.java:403:          fontMetrics.stringWidth(tickCounterLabel + ": 00000000"));
src/main/org/nlogo/window/VMCheck.java:32:      warn("You have started NetLogo under the GNU libgcj Java VM. " +
src/main/org/nlogo/window/VMCheck.java:33:          "NetLogo may not run well, or at all, under libgcj. " +
src/main/org/nlogo/window/VMCheck.java:34:          "We recommend using either the Sun or IBM Java VM's to" +
src/main/org/nlogo/window/VMCheck.java:35:          "run NetLogo.");
src/main/org/nlogo/window/VMCheck.java:44:            message + "  If you choose to continue, NetLogo may not " +
src/main/org/nlogo/window/VMCheck.java:45:                "function properly.",
src/main/org/nlogo/window/Widget.scala:15:  val validWidgetTypes = List("BUTTON", "SLIDER", "SWITCH", "CHOOSER", "INPUT", "MONITOR", "PLOT", "NOTE")
src/main/org/nlogo/window/Widget.scala:53:  def getDefaultExportName = "output.txt"
src/main/org/nlogo/window/Widget.scala:115:    if (displayName != null && !displayName.equals("")) sup + "(" + displayName + ")"
src/main/org/nlogo/window/WidgetRegistry.scala:9:  map("SWITCH")        = "org.nlogo.widget.SwitchWidget"
src/main/org/nlogo/window/WidgetRegistry.scala:10:  map("DUMMY SWITCH")  = "org.nlogo.widget.DummySwitchWidget"
src/main/org/nlogo/window/WidgetRegistry.scala:13:  map("TEXTBOX")       = "org.nlogo.widget.NoteWidget"
src/main/org/nlogo/window/WidgetRegistry.scala:14:  map("NOTE")          = "org.nlogo.widget.NoteWidget"
src/main/org/nlogo/window/WidgetRegistry.scala:15:  map("DUMMY TEXTBOX") = "org.nlogo.widget.NoteWidget"
src/main/org/nlogo/window/WidgetRegistry.scala:16:  map("DUMMY NOTE")    = "org.nlogo.widget.NoteWidget"
src/main/org/nlogo/window/WorldViewSettings.java:20:    return "Model Settings";
src/main/org/nlogo/window/WorldViewSettings2D.java:95:          String message = "Resizing the world kills all turtles. " +
src/main/org/nlogo/window/WorldViewSettings2D.java:96:              "This may cause HubNet clients to be unresponsive. " +
src/main/org/nlogo/window/WorldViewSettings2D.java:97:              "Consider kicking out all clients before proceeding.";
src/main/org/nlogo/window/WorldViewSettings2D.java:100:                  "Kick clients?", message,
src/main/org/nlogo/window/WorldViewSettings2D.java:102:                  new String[]{"Kick clients", "Don't kick"});
src/main/org/nlogo/window/WorldViewSettings2D.java:110:          (org.nlogo.awt.Utils.getFrame(gWidget), runnable, "Resizing...");
src/main/org/nlogo/window/WorldViewSettings2D.java:125:        "GRAPHICS-WINDOW\n" +
src/main/org/nlogo/window/WorldViewSettings3D.java:302:          (org.nlogo.awt.Utils.getFrame(gWidget), runnable, "Resizing...");
src/main/org/nlogo/window/WorldViewSettings3D.java:353:        "GRAPHICS-WINDOW\n" +
src/main/org/nlogo/workspace/AbstractWorkspace.java:81:   * end in ".nlogo".
src/main/org/nlogo/workspace/AbstractWorkspace.java:110:    jobManager = Femto.get(JobManagerInterface.class, "org.nlogo.job.JobManager",
src/main/org/nlogo/workspace/AbstractWorkspace.java:160:    System.err.println("WARNING: " + message);
src/main/org/nlogo/workspace/AbstractWorkspace.java:260:      path = System.getProperty("user.home")
src/main/org/nlogo/workspace/AbstractWorkspace.java:261:          + java.io.File.separatorChar + "dummy.txt";
src/main/org/nlogo/workspace/AbstractWorkspace.java:276:  @SuppressWarnings("deprecation")
src/main/org/nlogo/workspace/AbstractWorkspace.java:289:    java.io.File git = new java.io.File(".git");
src/main/org/nlogo/workspace/AbstractWorkspace.java:291:      throw new java.io.IOException("no .git directory found");
src/main/org/nlogo/workspace/AbstractWorkspace.java:334:   * We need to do a "save as" if the model is new, from the
src/main/org/nlogo/workspace/AbstractWorkspace.java:356:      return "Untitled";
src/main/org/nlogo/workspace/AbstractWorkspace.java:358:    int suffixIndex = str.lastIndexOf(".nlogo");
src/main/org/nlogo/workspace/AbstractWorkspace.java:362:    suffixIndex = str.lastIndexOf(".nlogo3d");
src/main/org/nlogo/workspace/AbstractWorkspace.java:511:    writer.println(Dump.csv.header("MODEL SETTINGS"));
src/main/org/nlogo/workspace/AbstractWorkspace.java:630:    index = modelName.lastIndexOf(".nlogo");
src/main/org/nlogo/workspace/AbstractWorkspace.java:643:        new org.nlogo.api.LocalFile(filename, ".csv");
src/main/org/nlogo/workspace/AbstractWorkspace.java:647:          (file.getPrintWriter(), "BehaviorSpace", modelFileName, experimentName);
src/main/org/nlogo/workspace/AbstractWorkspace.java:667:    if (filename.equals("aggregate")) {
src/main/org/nlogo/workspace/AbstractWorkspaceScala.scala:14:  val DefaultPreviewCommands = "setup repeat 75 [ go ]"
src/main/org/nlogo/workspace/AbstractWorkspaceScala.scala:35:        "The tick counter has not been started yet. Use RESET-TICKS.")
src/main/org/nlogo/workspace/AbstractWorkspaceScala.scala:103:        } }.export("world",modelFileName,"") 
src/main/org/nlogo/workspace/AbstractWorkspaceScala.scala:115:      writer.println(Dump.csv.encode("PLOTS"))
src/main/org/nlogo/workspace/AbstractWorkspaceScala.scala:135:      }.export("plot",modelFileName,"")
src/main/org/nlogo/workspace/AbstractWorkspaceScala.scala:149:      }.export("plots",modelFileName,"")
src/main/org/nlogo/workspace/Benchmarker.scala:11:  private val formatter   = new java.text.DecimalFormat("0.000")
src/main/org/nlogo/workspace/Benchmarker.scala:15:    val goProcedure = workspace.compileCommands("ca benchmark")
src/main/org/nlogo/workspace/Benchmarker.scala:16:    val resultProcedure = workspace.compileReporter("result")
src/main/org/nlogo/workspace/Benchmarker.scala:17:    val owner = new SimpleJobOwner("Benchmarker", workspace.world.mainRNG, classOf[Observer])
src/main/org/nlogo/workspace/Benchmarker.scala:30:      println("(" + workspace.modelNameForDisplay + ")")
src/main/org/nlogo/workspace/Benchmarker.scala:41:          times.size + "/" + runs + " (mean=" + formatter.format(average) +
src/main/org/nlogo/workspace/Benchmarker.scala:42:          ", stddev=" + formatter.format(stddev) + ")")
src/main/org/nlogo/workspace/Benchmarker.scala:49:      println("@@@ " + workspace.modelNameForDisplay + ": " + formatter.format(average) +
src/main/org/nlogo/workspace/Benchmarker.scala:50:              (if(times.size < runs) " (hit time limit)" else ""))
src/main/org/nlogo/workspace/DefaultFileManager.java:22:      setPrefix(System.getProperty("user.home"));
src/main/org/nlogo/workspace/DefaultFileManager.java:55:        " (line number " + lineNumber +
src/main/org/nlogo/workspace/DefaultFileManager.java:56:            ", character " + (charPos + 1) + ")";
src/main/org/nlogo/workspace/DefaultFileManager.java:178:        throw new java.io.IOException("The file " + currentFile.getAbsolutePath() + " cannot be found");
src/main/org/nlogo/workspace/DefaultFileManager.java:183:      String mode = (currentFile.getMode() == org.nlogo.api.File.Mode.READ) ? "READING" : "WRITING";
src/main/org/nlogo/workspace/DefaultFileManager.java:185:      throw new java.io.IOException("You can only use " + mode + " primitives with this file");
src/main/org/nlogo/workspace/DefaultFileManager.java:206:      throw new java.io.IOException("You need to close the file before deletion");
src/main/org/nlogo/workspace/DefaultFileManager.java:213:      throw new java.io.IOException("Modification to this file is denied.");
src/main/org/nlogo/workspace/DefaultFileManager.java:220:      throw new java.io.IOException("Deletion failed.");
src/main/org/nlogo/workspace/DefaultFileManager.java:231:      throw new java.io.IOException("This filename is illegal, " + newFileName);
src/main/org/nlogo/workspace/DefaultFileManager.java:251:      throw new java.io.IOException("There is no file to file");
src/main/org/nlogo/workspace/DefaultFileManager.java:265:      throw new java.io.IOException("There is no file to close");
src/main/org/nlogo/workspace/DefaultFileManager.java:390:      setPrefix(System.getProperty("user.home"));
src/main/org/nlogo/workspace/Evaluator.scala:38:   * @return whether the code did a "stop" at the top level
src/main/org/nlogo/workspace/Evaluator.scala:95:    if(source.trim.isEmpty) throw new IllegalStateException("empty reporter source")
src/main/org/nlogo/workspace/Evaluator.scala:126:    else new MyLogoThunk(source + "\n__thunk-did-finish", agent, owner, true) with CommandLogoThunk {
src/main/org/nlogo/workspace/Evaluator.scala:155:      "to-report __runresult " +
src/main/org/nlogo/workspace/Evaluator.scala:157:        agentTypeHint + " report ( " + source + " \n) __done end"
src/main/org/nlogo/workspace/Evaluator.scala:159:      "to __run " + vars.toString.replace(',', ' ') + " " + agentTypeHint + " " + source + "\nend"
src/main/org/nlogo/workspace/Evaluator.scala:162:      Some(if(reporter) "runresult" else "run"),
src/main/org/nlogo/workspace/Evaluator.scala:191:    classOf[Observer] -> "__observercode",
src/main/org/nlogo/workspace/Evaluator.scala:192:    classOf[Turtle] -> "__turtlecode",
src/main/org/nlogo/workspace/Evaluator.scala:193:    classOf[Patch] -> "__patchcode",
src/main/org/nlogo/workspace/Evaluator.scala:194:    classOf[Link] -> "__linkcode")
src/main/org/nlogo/workspace/Evaluator.scala:198:    if(commands) "to __evaluator [] " + hint + " "
src/main/org/nlogo/workspace/Evaluator.scala:204:      "to-report __evaluator [] " + hint + " report ( "
src/main/org/nlogo/workspace/Evaluator.scala:208:    if(commands) "\n__done end" else "\n) __done end"
src/main/org/nlogo/workspace/ExtensionManager.java:118:    if (!id.endsWith(".jar")) {
src/main/org/nlogo/workspace/ExtensionManager.java:120:        return id + "/" + id + ".jar";
src/main/org/nlogo/workspace/ExtensionManager.java:122:        return id + java.io.File.separator + id + ".jar";
src/main/org/nlogo/workspace/ExtensionManager.java:144:      errors.signalError("Can't find extension: " + extName);
src/main/org/nlogo/workspace/ExtensionManager.java:183:          System.err.println("Error while initializing extension.");
src/main/org/nlogo/workspace/ExtensionManager.java:184:          System.err.println("Error is: " + ex);
src/main/org/nlogo/workspace/ExtensionManager.java:209:      errors.signalError("This extension doesn't work with this version of NetLogo");
src/main/org/nlogo/workspace/ExtensionManager.java:231:      throw new IllegalStateException(path + " is not a valid pathname: " + ex);
src/main/org/nlogo/workspace/ExtensionManager.java:246:              ("Can't find extension " + path + " using URL " + jarPath);
src/main/org/nlogo/workspace/ExtensionManager.java:249:        throw new IllegalStateException(path + " is not a valid pathname: " + ex);
src/main/org/nlogo/workspace/ExtensionManager.java:288:          new java.io.File("extensions" + java.io.File.separator + path);
src/main/org/nlogo/workspace/ExtensionManager.java:298:        ("Can't find extension " + path);
src/main/org/nlogo/workspace/ExtensionManager.java:309:          throw new ExtensionException("Can't find file " + path + " using " + fullPath);
src/main/org/nlogo/workspace/ExtensionManager.java:312:        throw new ExtensionException(path + " is not a valid pathname: " + ex);
src/main/org/nlogo/workspace/ExtensionManager.java:327:    java.io.File f = new java.io.File("extensions" + java.io.File.separator + path);
src/main/org/nlogo/workspace/ExtensionManager.java:333:    throw new ExtensionException("Can't find file " + path);
src/main/org/nlogo/workspace/ExtensionManager.java:358:      folder = new java.io.File("extensions");
src/main/org/nlogo/workspace/ExtensionManager.java:367:      errors.signalError("Invalid URL: " + jarPath);
src/main/org/nlogo/workspace/ExtensionManager.java:390:        errors.signalError("Bad extension: Couldn't locate Class-Manager tag in Manifest File");
src/main/org/nlogo/workspace/ExtensionManager.java:398:        errors.signalError("Bad extension: The ClassManager doesn't implement "
src/main/org/nlogo/workspace/ExtensionManager.java:399:            + "org.nlogo.api.ClassManager");
src/main/org/nlogo/workspace/ExtensionManager.java:402:      errors.signalError("Can't find extension " + jarPath);
src/main/org/nlogo/workspace/ExtensionManager.java:404:      errors.signalError("Can't open extension " + jarPath);
src/main/org/nlogo/workspace/ExtensionManager.java:410:      errors.signalError("Can't find class " + classMangName
src/main/org/nlogo/workspace/ExtensionManager.java:411:          + " in extension");
src/main/org/nlogo/workspace/ExtensionManager.java:422:    java.net.URL jarURL = new java.net.URL("jar", "", jarPath + "!/");
src/main/org/nlogo/workspace/ExtensionManager.java:427:      errors.signalError("Bad extension: Can't find a Manifest file in extension");
src/main/org/nlogo/workspace/ExtensionManager.java:431:    name = attr.getValue("Class-Manager");
src/main/org/nlogo/workspace/ExtensionManager.java:434:      errors.signalError("User halted compilation");
src/main/org/nlogo/workspace/ExtensionManager.java:446:      java.net.URL jarURL = new java.net.URL("jar", "", jarPath + "!/");
src/main/org/nlogo/workspace/ExtensionManager.java:451:        errors.signalError("Bad extension: Can't find Manifest file in extension");
src/main/org/nlogo/workspace/ExtensionManager.java:455:      name = attr.getValue("Extension-Name");
src/main/org/nlogo/workspace/ExtensionManager.java:458:        errors.signalError("Bad extension: Can't find extension name in Manifest.");
src/main/org/nlogo/workspace/ExtensionManager.java:463:      errors.signalError("Can't find extension " + jarPath);
src/main/org/nlogo/workspace/ExtensionManager.java:465:      errors.signalError("Can't open extension " + jarPath);
src/main/org/nlogo/workspace/ExtensionManager.java:505:              ("Error reading extension object "
src/main/org/nlogo/workspace/ExtensionManager.java:507:                  + " " + value + " ==> " + ex.getMessage());
src/main/org/nlogo/workspace/ExtensionManager.java:548:    String str = "EXTENSION\tLOADED\tMODIFIED\tJARPATH\n";
src/main/org/nlogo/workspace/ExtensionManager.java:557:      str += theJarContainer.prefix + "\t" + theJarContainer.loaded + "\t" + theJarContainer.modified + "\t" + theJarContainer.jarName + "\n";
src/main/org/nlogo/workspace/ExtensionManager.java:566:      names.add(jar.extensionName + java.io.File.separator + jar.extensionName + ".jar");
src/main/org/nlogo/workspace/ExtensionManager.java:586:    String pstr = "\n\nEXTENSION\tPRIMITIVE\tTYPE\n";
src/main/org/nlogo/workspace/ExtensionManager.java:599:        String type = (p instanceof org.nlogo.api.Reporter ? "Reporter" : "Command");
src/main/org/nlogo/workspace/ExtensionManager.java:600:        pstr += theJarContainer.prefix + "\t" + name + "\t" + type + "\n";
src/main/org/nlogo/workspace/ExtensionManager.java:639:        if (files[n].isFile() && files[n].getName().toUpperCase().endsWith(".JAR")) {
src/main/org/nlogo/workspace/ExtensionManager.java:670:        System.err.println("Error unloading extension: " + ex);
src/main/org/nlogo/workspace/ExtensionManager.java:677:    String jarVer = attr.getValue("NetLogo-Extension-API-Version");
src/main/org/nlogo/workspace/ExtensionManager.java:681:          "Could not determine version of NetLogo extension.  NetLogo can "
src/main/org/nlogo/workspace/ExtensionManager.java:682:              + "try to load the extension, but it might not work.");
src/main/org/nlogo/workspace/ExtensionManager.java:685:          "You are attempting to open a NetLogo extension file that was created " +
src/main/org/nlogo/workspace/ExtensionManager.java:686:              "for a different version of the NetLogo Extension API.  (This NetLogo uses Extension API "
src/main/org/nlogo/workspace/ExtensionManager.java:687:              + currentVer + "; the extension uses NetLogo Extension API " + jarVer
src/main/org/nlogo/workspace/ExtensionManager.java:688:              + ".)  NetLogo can try to load the extension, " +
src/main/org/nlogo/workspace/ExtensionManager.java:689:              "but it might not work.");
src/main/org/nlogo/workspace/ExtensionManager.java:701:      errors.signalError("Can't open extension");
src/main/org/nlogo/workspace/ExtensionManager.java:704:      throw new IllegalStateException("this code is unreachable");
src/main/org/nlogo/workspace/ExtensionManager.java:709:    writer.println(Dump.csv.encode("EXTENSIONS"));
src/main/org/nlogo/workspace/ExtensionManager.java:728:      throw new org.nlogo.api.ExtensionException("there is no extension named " + name + "in this model");
src/main/org/nlogo/workspace/ExtensionManager.java:784:  @SuppressWarnings("deprecation")
src/main/org/nlogo/workspace/ModelsLibrary.java:57:      int loc = path.toUpperCase().lastIndexOf("/" + targetName.toUpperCase() + ".NLOGO");
src/main/org/nlogo/workspace/ModelsLibrary.java:95:   *                   ".nlogo" extension.
src/main/org/nlogo/workspace/ModelsLibrary.java:106:          + ".NLOGO") == path.lastIndexOf('/')) {
src/main/org/nlogo/workspace/ModelsLibrary.java:122:      java.io.File directoryRoot = new java.io.File("models", "");
src/main/org/nlogo/workspace/ModelsLibrary.java:123:      rootNode = new Node("models", "", true);
src/main/org/nlogo/workspace/ModelsLibrary.java:126:      java.io.File directoryRoot = new java.io.File("models/3D", "");
src/main/org/nlogo/workspace/ModelsLibrary.java:127:      rootNode = new Node("models/3D", "", true);
src/main/org/nlogo/workspace/ModelsLibrary.java:165:    int index = filePath.indexOf(".nlogo");
src/main/org/nlogo/workspace/ModelsLibrary.java:169:    return filePath + ".png";
src/main/org/nlogo/workspace/ModelsLibrary.java:201:        if (fileName.toUpperCase().endsWith(".NLOGO") ||
src/main/org/nlogo/workspace/ModelsLibrary.java:202:            fileName.toUpperCase().endsWith(".NLOGO3D")) {
src/main/org/nlogo/workspace/ModelsLibrary.java:210:    if (name.equalsIgnoreCase("UNVERIFIED")) {
src/main/org/nlogo/workspace/ModelsLibrary.java:211:      return "(unverified)";
src/main/org/nlogo/workspace/ModelsLibrary.java:230:      return s.endsWith(".NLOGO")
src/main/org/nlogo/workspace/ModelsLibrary.java:232:          : (s.endsWith(".NLOGO3D")
src/main/org/nlogo/workspace/ModelsLibrary.java:243:          orderednames = new String[]{"3D"};
src/main/org/nlogo/workspace/ModelsLibrary.java:247:              "3D", "SAMPLE MODELS", "CURRICULAR MODELS", "CODE EXAMPLES",
src/main/org/nlogo/workspace/ModelsLibrary.java:248:              "HUBNET ACTIVITIES"};
src/main/org/nlogo/workspace/ModelsLibrary.java:252:            "SAMPLE MODELS", "CURRICULAR MODELS", "CODE EXAMPLES",
src/main/org/nlogo/workspace/ModelsLibrary.java:253:            "HUBNET ACTIVITIES"};
src/main/org/nlogo/workspace/ModelsLibrary.java:279:        if (temp.equals("UNVERIFIED")) {
src/main/org/nlogo/workspace/ModelsLibrary.java:298:            name.equals("BEATS") ||
src/main/org/nlogo/workspace/ModelsLibrary.java:301:                (name.equals("3D") ||
src/main/org/nlogo/workspace/ModelsLibrary.java:304:                    name.equals("VRML")));
src/main/org/nlogo/workspace/ModelsLibrary.java:308:    if (reference.endsWith(".nlogo")) {
src/main/org/nlogo/workspace/ModelsLibrary.java:309:      return reference.substring(0, reference.lastIndexOf(".nlogo"));
src/main/org/nlogo/workspace/ModelsLibrary.java:311:    if (reference.endsWith(".nlogo3d")) {
src/main/org/nlogo/workspace/ModelsLibrary.java:312:      return reference.substring(0, reference.lastIndexOf(".nlogo3d"));
src/main/org/nlogo/workspace/WorldLoader.scala:128:       (version.containsSlice("3-D Preview 1") ||
src/main/org/nlogo/workspace/WorldLoader.scala:129:        version.containsSlice("3-D Preview 2"))) {
